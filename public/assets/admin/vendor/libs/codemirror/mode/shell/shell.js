/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/shell/shell.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/shell/shell.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('shell', function () {\n    var words = {};\n\n    function define(style, dict) {\n      for (var i = 0; i < dict.length; i++) {\n        words[dict[i]] = style;\n      }\n    }\n\n    ;\n    var commonAtoms = [\"true\", \"false\"];\n    var commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\", \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\n    var commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\", \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\", \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\", \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\", \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\", \"yes\", \"zsh\"];\n    CodeMirror.registerHelper(\"hintWords\", \"shell\", commonAtoms.concat(commonKeywords, commonCommands));\n    define('atom', commonAtoms);\n    define('keyword', commonKeywords);\n    define('builtin', commonCommands);\n\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) return null;\n      var sol = stream.sol();\n      var ch = stream.next();\n\n      if (ch === '\\\\') {\n        stream.next();\n        return null;\n      }\n\n      if (ch === '\\'' || ch === '\"' || ch === '`') {\n        state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n        return tokenize(stream, state);\n      }\n\n      if (ch === '#') {\n        if (sol && stream.eat('!')) {\n          stream.skipToEnd();\n          return 'meta'; // 'comment'?\n        }\n\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (ch === '$') {\n        state.tokens.unshift(tokenDollar);\n        return tokenize(stream, state);\n      }\n\n      if (ch === '+' || ch === '=') {\n        return 'operator';\n      }\n\n      if (ch === '-') {\n        stream.eat('-');\n        stream.eatWhile(/\\w/);\n        return 'attribute';\n      }\n\n      if (ch == \"<\") {\n        if (stream.match(\"<<\")) return \"operator\";\n        var heredoc = stream.match(/^<-?\\s*['\"]?([^'\"]*)['\"]?/);\n\n        if (heredoc) {\n          state.tokens.unshift(tokenHeredoc(heredoc[1]));\n          return 'string-2';\n        }\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/\\d/);\n\n        if (stream.eol() || !/\\w/.test(stream.peek())) {\n          return 'number';\n        }\n      }\n\n      stream.eatWhile(/[\\w-]/);\n      var cur = stream.current();\n      if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n      return words.hasOwnProperty(cur) ? words[cur] : null;\n    }\n\n    function tokenString(quote, style) {\n      var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote;\n      return function (stream, state) {\n        var next,\n            escaped = false;\n\n        while ((next = stream.next()) != null) {\n          if (next === close && !escaped) {\n            state.tokens.shift();\n            break;\n          } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n            escaped = true;\n            stream.backUp(1);\n            state.tokens.unshift(tokenDollar);\n            break;\n          } else if (!escaped && quote !== close && next === quote) {\n            state.tokens.unshift(tokenString(quote, style));\n            return tokenize(stream, state);\n          } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n            state.tokens.unshift(tokenStringStart(next, \"string\"));\n            stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && next === '\\\\';\n        }\n\n        return style;\n      };\n    }\n\n    ;\n\n    function tokenStringStart(quote, style) {\n      return function (stream, state) {\n        state.tokens[0] = tokenString(quote, style);\n        stream.next();\n        return tokenize(stream, state);\n      };\n    }\n\n    var tokenDollar = function tokenDollar(stream, state) {\n      if (state.tokens.length > 1) stream.eat('$');\n      var ch = stream.next();\n\n      if (/['\"({]/.test(ch)) {\n        state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n        return tokenize(stream, state);\n      }\n\n      if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n      state.tokens.shift();\n      return 'def';\n    };\n\n    function tokenHeredoc(delim) {\n      return function (stream, state) {\n        if (stream.sol() && stream.string == delim) state.tokens.shift();\n        stream.skipToEnd();\n        return \"string-2\";\n      };\n    }\n\n    function tokenize(stream, state) {\n      return (state.tokens[0] || tokenBase)(stream, state);\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        return {\n          tokens: []\n        };\n      },\n      token: function token(stream, state) {\n        return tokenize(stream, state);\n      },\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      lineComment: '#',\n      fold: \"brace\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-sh', 'shell'); // Apache uses a slightly different Media Type for Shell scripts\n  // http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n\n  CodeMirror.defineMIME('application/x-sh', 'shell');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/shell/shell.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/shell/shell.js");
/******/ 	
/******/ })()
;