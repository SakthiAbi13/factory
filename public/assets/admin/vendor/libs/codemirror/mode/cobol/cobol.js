/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/cobol/cobol.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/cobol/cobol.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Author: Gautam Mehta\n * Branched from CodeMirror's Scheme mode\n */\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"cobol\", function () {\n    var BUILTIN = \"builtin\",\n        COMMENT = \"comment\",\n        STRING = \"string\",\n        ATOM = \"atom\",\n        NUMBER = \"number\",\n        KEYWORD = \"keyword\",\n        MODTAG = \"header\",\n        COBOLLINENUM = \"def\",\n        PERIOD = \"link\";\n\n    function makeKeywords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var atoms = makeKeywords(\"TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES \");\n    var keywords = makeKeywords(\"ACCEPT ACCESS ACQUIRE ADD ADDRESS \" + \"ADVANCING AFTER ALIAS ALL ALPHABET \" + \"ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED \" + \"ALSO ALTER ALTERNATE AND ANY \" + \"ARE AREA AREAS ARITHMETIC ASCENDING \" + \"ASSIGN AT ATTRIBUTE AUTHOR AUTO \" + \"AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS \" + \"B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP \" + \"BEFORE BELL BINARY BIT BITS \" + \"BLANK BLINK BLOCK BOOLEAN BOTTOM \" + \"BY CALL CANCEL CD CF \" + \"CH CHARACTER CHARACTERS CLASS CLOCK-UNITS \" + \"CLOSE COBOL CODE CODE-SET COL \" + \"COLLATING COLUMN COMMA COMMIT COMMITMENT \" + \"COMMON COMMUNICATION COMP COMP-0 COMP-1 \" + \"COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 \" + \"COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 \" + \"COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 \" + \"COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE \" + \"CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS \" + \"CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS \" + \"CONVERTING COPY CORR CORRESPONDING COUNT \" + \"CRT CRT-UNDER CURRENCY CURRENT CURSOR \" + \"DATA DATE DATE-COMPILED DATE-WRITTEN DAY \" + \"DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION \" + \"DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS \" + \"DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE \" + \"DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING \" + \"DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED \" + \"DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION \" + \"DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 \" + \"DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 \" + \"DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION \" + \"DOWN DROP DUPLICATE DUPLICATES DYNAMIC \" + \"EBCDIC EGI EJECT ELSE EMI \" + \"EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. \" + \"END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY \" + \"END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY \" + \"END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN \" + \"END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT \" + \"END-UNSTRING END-WRITE END-XML ENTER ENTRY \" + \"ENVIRONMENT EOP EQUAL EQUALS ERASE \" + \"ERROR ESI EVALUATE EVERY EXCEEDS \" + \"EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL \" + \"EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL \" + \"FILE-STREAM FILES FILLER FINAL FIND \" + \"FINISH FIRST FOOTING FOR FOREGROUND-COLOR \" + \"FOREGROUND-COLOUR FORMAT FREE FROM FULL \" + \"FUNCTION GENERATE GET GIVING GLOBAL \" + \"GO GOBACK GREATER GROUP HEADING \" + \"HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL \" + \"ID IDENTIFICATION IF IN INDEX \" + \"INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 \" + \"INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED \" + \"INDIC INDICATE INDICATOR INDICATORS INITIAL \" + \"INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT \" + \"INSTALLATION INTO INVALID INVOKE IS \" + \"JUST JUSTIFIED KANJI KEEP KEY \" + \"LABEL LAST LD LEADING LEFT \" + \"LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY \" + \"LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER \" + \"LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE \" + \"LOCALE LOCALLY LOCK \" + \"MEMBER MEMORY MERGE MESSAGE METACLASS \" + \"MODE MODIFIED MODIFY MODULES MOVE \" + \"MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE \" + \"NEXT NO NO-ECHO NONE NOT \" + \"NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER \" + \"NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS \" + \"OF OFF OMITTED ON ONLY \" + \"OPEN OPTIONAL OR ORDER ORGANIZATION \" + \"OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL \" + \"PADDING PAGE PAGE-COUNTER PARSE PERFORM \" + \"PF PH PIC PICTURE PLUS \" + \"POINTER POSITION POSITIVE PREFIX PRESENT \" + \"PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES \" + \"PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID \" + \"PROMPT PROTECTED PURGE QUEUE QUOTE \" + \"QUOTES RANDOM RD READ READY \" + \"REALM RECEIVE RECONNECT RECORD RECORD-NAME \" + \"RECORDS RECURSIVE REDEFINES REEL REFERENCE \" + \"REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE \" + \"REMAINDER REMOVAL RENAMES REPEATED REPLACE \" + \"REPLACING REPORT REPORTING REPORTS REPOSITORY \" + \"REQUIRED RERUN RESERVE RESET RETAINING \" + \"RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO \" + \"REVERSED REWIND REWRITE RF RH \" + \"RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED \" + \"RUN SAME SCREEN SD SEARCH \" + \"SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT \" + \"SELECT SEND SENTENCE SEPARATE SEQUENCE \" + \"SEQUENTIAL SET SHARED SIGN SIZE \" + \"SKIP1 SKIP2 SKIP3 SORT SORT-MERGE \" + \"SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL \" + \"SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 \" + \"START STARTING STATUS STOP STORE \" + \"STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA \" + \"SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS \" + \"SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT \" + \"TABLE TALLYING TAPE TENANT TERMINAL \" + \"TERMINATE TEST TEXT THAN THEN \" + \"THROUGH THRU TIME TIMES TITLE \" + \"TO TOP TRAILING TRAILING-SIGN TRANSACTION \" + \"TYPE TYPEDEF UNDERLINE UNEQUAL UNIT \" + \"UNSTRING UNTIL UP UPDATE UPON \" + \"USAGE USAGE-MODE USE USING VALID \" + \"VALIDATE VALUE VALUES VARYING VLR \" + \"WAIT WHEN WHEN-COMPILED WITH WITHIN \" + \"WORDS WORKING-STORAGE WRITE XML XML-CODE \" + \"XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL \");\n    var builtins = makeKeywords(\"- * ** / + < <= = > >= \");\n    var tests = {\n      digit: /\\d/,\n      digit_or_colon: /[\\d:]/,\n      hex: /[0-9a-f]/i,\n      sign: /[+-]/,\n      exponent: /e/i,\n      keyword_char: /[^\\s\\(\\[\\;\\)\\]]/,\n      symbol: /[\\w*+\\-]/\n    };\n\n    function isNumber(ch, stream) {\n      // hex\n      if (ch === '0' && stream.eat(/x/i)) {\n        stream.eatWhile(tests.hex);\n        return true;\n      } // leading sign\n\n\n      if ((ch == '+' || ch == '-') && tests.digit.test(stream.peek())) {\n        stream.eat(tests.sign);\n        ch = stream.next();\n      }\n\n      if (tests.digit.test(ch)) {\n        stream.eat(ch);\n        stream.eatWhile(tests.digit);\n\n        if ('.' == stream.peek()) {\n          stream.eat('.');\n          stream.eatWhile(tests.digit);\n        }\n\n        if (stream.eat(tests.exponent)) {\n          stream.eat(tests.sign);\n          stream.eatWhile(tests.digit);\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          indentStack: null,\n          indentation: 0,\n          mode: false\n        };\n      },\n      token: function token(stream, state) {\n        if (state.indentStack == null && stream.sol()) {\n          // update indentation, but only if indentStack is empty\n          state.indentation = 6; //stream.indentation();\n        } // skip spaces\n\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var returnType = null;\n\n        switch (state.mode) {\n          case \"string\":\n            // multi-line string parsing mode\n            var next = false;\n\n            while ((next = stream.next()) != null) {\n              if ((next == \"\\\"\" || next == \"\\'\") && !stream.match(/['\"]/, false)) {\n                state.mode = false;\n                break;\n              }\n            }\n\n            returnType = STRING; // continue on in string mode\n\n            break;\n\n          default:\n            // default parsing mode\n            var ch = stream.next();\n            var col = stream.column();\n\n            if (col >= 0 && col <= 5) {\n              returnType = COBOLLINENUM;\n            } else if (col >= 72 && col <= 79) {\n              stream.skipToEnd();\n              returnType = MODTAG;\n            } else if (ch == \"*\" && col == 6) {\n              // comment\n              stream.skipToEnd(); // rest of the line is a comment\n\n              returnType = COMMENT;\n            } else if (ch == \"\\\"\" || ch == \"\\'\") {\n              state.mode = \"string\";\n              returnType = STRING;\n            } else if (ch == \"'\" && !tests.digit_or_colon.test(stream.peek())) {\n              returnType = ATOM;\n            } else if (ch == \".\") {\n              returnType = PERIOD;\n            } else if (isNumber(ch, stream)) {\n              returnType = NUMBER;\n            } else {\n              if (stream.current().match(tests.symbol)) {\n                while (col < 71) {\n                  if (stream.eat(tests.symbol) === undefined) {\n                    break;\n                  } else {\n                    col++;\n                  }\n                }\n              }\n\n              if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n                returnType = KEYWORD;\n              } else if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) {\n                returnType = BUILTIN;\n              } else if (atoms && atoms.propertyIsEnumerable(stream.current().toUpperCase())) {\n                returnType = ATOM;\n              } else returnType = null;\n            }\n\n        }\n\n        return returnType;\n      },\n      indent: function indent(state) {\n        if (state.indentStack == null) return state.indentation;\n        return state.indentStack.indent;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-cobol\", \"cobol\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/cobol/cobol.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/cobol/cobol.js");
/******/ 	
/******/ })()
;