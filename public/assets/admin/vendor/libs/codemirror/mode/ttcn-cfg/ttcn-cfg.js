/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/ttcn-cfg/ttcn-cfg.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/ttcn-cfg/ttcn-cfg.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn-cfg\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions || {},\n        externalCommands = parserConfig.externalCommands || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[:=]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      if (ch == \"[\") {\n        stream.eatWhile(/[\\w_\\]]/);\n        return \"number sectionTitle\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (fileNCtrlMaskOptions.propertyIsEnumerable(cur)) return \"negative fileNCtrlMaskOptions\";\n      if (externalCommands.propertyIsEnumerable(cur)) return \"negative externalCommands\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterNext = stream.peek(); //look if the character if the quote is like the B in '10100010'B\n\n            if (afterNext) {\n              afterNext = afterNext.toLowerCase();\n              if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n            }\n\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    } //Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      lineComment: \"#\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-cfg\", {\n    name: \"ttcn-cfg\",\n    keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" + \" TimeStampFormat LogEventTypes SourceInfoFormat\" + \" LogEntityName LogSourceInfo DiskFullAction\" + \" LogFileNumber LogFileSize MatchingHints Detailed\" + \" Compact SubCategories Stack Single None Seconds\" + \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" + \" NumHCs UnixSocketsEnabled LocalAddress\"),\n    fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" + \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" + \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" + \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" + \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" + \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" + \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" + \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" + \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" + \" DEBUG_ENCDEC DEBUG_TESTPORT\" + \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" + \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" + \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" + \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" + \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" + \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" + \" FUNCTION_RND FUNCTION_UNQUALIFIED\" + \" MATCHING_DONE MATCHING_MCSUCCESS\" + \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" + \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" + \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" + \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" + \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" + \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" + \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" + \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" + \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" + \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" + \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" + \" PORTEVENT_PCOUT PORTEVENT_PMIN\" + \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" + \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" + \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" + \" TESTCASE_FINISH TESTCASE_START\" + \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" + \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" + \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" + \" USER_UNQUALIFIED VERDICTOP_FINAL\" + \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" + \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n    externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" + \" EndTestCase\"),\n    multiLineStrings: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS90dGNuLWNmZy90dGNuLWNmZy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBRUEsQ0FBQyxVQUFTQSxHQUFULEVBQWM7RUFDYixJQUFJLHNCQUFPQyxPQUFQLE1BQWtCLFFBQWxCLElBQThCLHNCQUFPQyxNQUFQLE1BQWlCLFFBQW5ELEVBQTZEO0lBQzNERixHQUFHLENBQUNHLG1CQUFPLENBQUMsbUpBQUQsQ0FBUixDQUFILENBREYsS0FFSyxJQUFJLElBQUosRUFBK0M7SUFDbERDLGlDQUFPLENBQUMsbUpBQUQsQ0FBRCxvQ0FBMkJKLEdBQTNCO0FBQUE7QUFBQTtBQUFBLGtHQUFOLENBREcsS0FFQTtJQUNIQSxFQUFBO0FBQ0gsQ0FQRCxFQU9HLFVBQVNNLFVBQVQsRUFBcUI7RUFDdEI7O0VBRUFBLFVBQVUsQ0FBQ0MsVUFBWCxDQUFzQixVQUF0QixFQUFrQyxVQUFTQyxNQUFULEVBQWlCQyxZQUFqQixFQUErQjtJQUMvRCxJQUFJQyxVQUFVLEdBQUdGLE1BQU0sQ0FBQ0UsVUFBeEI7SUFBQSxJQUNJQyxRQUFRLEdBQUdGLFlBQVksQ0FBQ0UsUUFBYixJQUF5QixFQUR4QztJQUFBLElBRUlDLG9CQUFvQixHQUFHSCxZQUFZLENBQUNHLG9CQUFiLElBQXFDLEVBRmhFO0lBQUEsSUFHSUMsZ0JBQWdCLEdBQUdKLFlBQVksQ0FBQ0ksZ0JBQWIsSUFBaUMsRUFIeEQ7SUFBQSxJQUlJQyxnQkFBZ0IsR0FBR0wsWUFBWSxDQUFDSyxnQkFKcEM7SUFBQSxJQUtJQyxnQkFBZ0IsR0FBR04sWUFBWSxDQUFDTSxnQkFBYixLQUFrQyxLQUx6RDtJQU1BLElBQUlDLGNBQWMsR0FBRyxNQUFyQjtJQUNBLElBQUlDLE9BQUo7O0lBRUEsU0FBU0MsU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLEtBQTNCLEVBQWtDO01BQ2hDLElBQUlDLEVBQUUsR0FBR0YsTUFBTSxDQUFDRyxJQUFQ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eEI0QixHQXlCNUIsd0NBekI0QixHQTBCNUIsb0NBMUI0QixHQTJCNUIsb0NBM0I0QixHQTRCNUIsa0NBNUI0QixHQTZCNUIsaUNBN0I0QixHQThCNUIsbUNBOUI0QixHQStCNUIsd0NBL0I0QixHQWdDNUIsNENBaEM0QixHQWlDNUIsaUNBakM0QixHQWtDNUIscUNBbEM0QixHQW1DNUIsMENBbkM0QixHQW9DNUIsc0NBcEM0QixHQXFDNUIsbUNBckM0QixHQXNDNUIsNENBdEM0QixHQXVDNUIsNENBdkMyQixDQVRZO0lBaUR2Q2hELGdCQUFnQixFQUFFZ0QsS0FBSyxDQUFDLGtEQUN4QixjQUR1QixDQWpEZ0I7SUFtRHZDL0MsZ0JBQWdCLEVBQUU7RUFuRHFCLENBQXpDO0FBcURELENBbE5EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy92ZW5kb3IvbGlicy9jb2RlbWlycm9yL21vZGUvdHRjbi1jZmcvdHRjbi1jZmcuanM/YmMyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRVxuXG4oZnVuY3Rpb24obW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgLy8gQ29tbW9uSlNcbiAgICBtb2QocmVxdWlyZShcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIpKTtcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EXG4gICAgZGVmaW5lKFtcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCJdLCBtb2QpO1xuICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBDb2RlTWlycm9yLmRlZmluZU1vZGUoXCJ0dGNuLWNmZ1wiLCBmdW5jdGlvbihjb25maWcsIHBhcnNlckNvbmZpZykge1xuICAgIHZhciBpbmRlbnRVbml0ID0gY29uZmlnLmluZGVudFVuaXQsXG4gICAgICAgIGtleXdvcmRzID0gcGFyc2VyQ29uZmlnLmtleXdvcmRzIHx8IHt9LFxuICAgICAgICBmaWxlTkN0cmxNYXNrT3B0aW9ucyA9IHBhcnNlckNvbmZpZy5maWxlTkN0cmxNYXNrT3B0aW9ucyB8fCB7fSxcbiAgICAgICAgZXh0ZXJuYWxDb21tYW5kcyA9IHBhcnNlckNvbmZpZy5leHRlcm5hbENvbW1hbmRzIHx8IHt9LFxuICAgICAgICBtdWx0aUxpbmVTdHJpbmdzID0gcGFyc2VyQ29uZmlnLm11bHRpTGluZVN0cmluZ3MsXG4gICAgICAgIGluZGVudFN0YXRlbWVudHMgPSBwYXJzZXJDb25maWcuaW5kZW50U3RhdGVtZW50cyAhPT0gZmFsc2U7XG4gICAgdmFyIGlzT3BlcmF0b3JDaGFyID0gL1tcXHxdLztcbiAgICB2YXIgY3VyUHVuYztcblxuICAgIGZ1bmN0aW9uIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpO1xuICAgICAgaWYgKGNoID09ICdcIicgfHwgY2ggPT0gXCInXCIpIHtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlblN0cmluZyhjaCk7XG4gICAgICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgIH1cbiAgICAgIGlmICgvWzo9XS8udGVzdChjaCkpIHtcbiAgICAgICAgY3VyUHVuYyA9IGNoO1xuICAgICAgICByZXR1cm4gXCJwdW5jdHVhdGlvblwiO1xuICAgICAgfVxuICAgICAgaWYgKGNoID09IFwiI1wiKXtcbiAgICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgICB9XG4gICAgICBpZiAoL1xcZC8udGVzdChjaCkpIHtcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwuXS8pO1xuICAgICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09wZXJhdG9yQ2hhci50ZXN0KGNoKSkge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoaXNPcGVyYXRvckNoYXIpO1xuICAgICAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICAgICAgfVxuICAgICAgaWYgKGNoID09IFwiW1wiKXtcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3X1xcXV0vKTtcbiAgICAgICAgcmV0dXJuIFwibnVtYmVyIHNlY3Rpb25UaXRsZVwiO1xuICAgICAgfVxuXG4gICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXCRfXS8pO1xuICAgICAgdmFyIGN1ciA9IHN0cmVhbS5jdXJyZW50KCk7XG4gICAgICBpZiAoa2V5d29yZHMucHJvcGVydHlJc0VudW1lcmFibGUoY3VyKSkgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgICAgaWYgKGZpbGVOQ3RybE1hc2tPcHRpb25zLnByb3BlcnR5SXNFbnVtZXJhYmxlKGN1cikpXG4gICAgICAgIHJldHVybiBcIm5lZ2F0aXZlIGZpbGVOQ3RybE1hc2tPcHRpb25zXCI7XG4gICAgICBpZiAoZXh0ZXJuYWxDb21tYW5kcy5wcm9wZXJ0eUlzRW51bWVyYWJsZShjdXIpKSByZXR1cm4gXCJuZWdhdGl2ZSBleHRlcm5hbENvbW1hbmRzXCI7XG5cbiAgICAgIHJldHVybiBcInZhcmlhYmxlXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9rZW5TdHJpbmcocXVvdGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsIG5leHQsIGVuZCA9IGZhbHNlO1xuICAgICAgICB3aGlsZSAoKG5leHQgPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKG5leHQgPT0gcXVvdGUgJiYgIWVzY2FwZWQpe1xuICAgICAgICAgICAgdmFyIGFmdGVyTmV4dCA9IHN0cmVhbS5wZWVrKCk7XG4gICAgICAgICAgICAvL2xvb2sgaWYgdGhlIGNoYXJhY3RlciBpZiB0aGUgcXVvdGUgaXMgbGlrZSB0aGUgQiBpbiAnMTAxMDAwMTAnQlxuICAgICAgICAgICAgaWYgKGFmdGVyTmV4dCl7XG4gICAgICAgICAgICAgIGFmdGVyTmV4dCA9IGFmdGVyTmV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICBpZihhZnRlck5leHQgPT0gXCJiXCIgfHwgYWZ0ZXJOZXh0ID09IFwiaFwiIHx8IGFmdGVyTmV4dCA9PSBcIm9cIilcbiAgICAgICAgICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5kID0gdHJ1ZTsgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZCAmJiBuZXh0ID09IFwiXFxcXFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgfHwgIShlc2NhcGVkIHx8IG11bHRpTGluZVN0cmluZ3MpKVxuICAgICAgICAgIHN0YXRlLnRva2VuaXplID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIENvbnRleHQoaW5kZW50ZWQsIGNvbHVtbiwgdHlwZSwgYWxpZ24sIHByZXYpIHtcbiAgICAgIHRoaXMuaW5kZW50ZWQgPSBpbmRlbnRlZDtcbiAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgIHRoaXMuYWxpZ24gPSBhbGlnbjtcbiAgICAgIHRoaXMucHJldiA9IHByZXY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHB1c2hDb250ZXh0KHN0YXRlLCBjb2wsIHR5cGUpIHtcbiAgICAgIHZhciBpbmRlbnQgPSBzdGF0ZS5pbmRlbnRlZDtcbiAgICAgIGlmIChzdGF0ZS5jb250ZXh0ICYmIHN0YXRlLmNvbnRleHQudHlwZSA9PSBcInN0YXRlbWVudFwiKVxuICAgICAgICBpbmRlbnQgPSBzdGF0ZS5jb250ZXh0LmluZGVudGVkO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvbnRleHQgPSBuZXcgQ29udGV4dChpbmRlbnQsIGNvbCwgdHlwZSwgbnVsbCwgc3RhdGUuY29udGV4dCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvcENvbnRleHQoc3RhdGUpIHtcbiAgICAgIHZhciB0ID0gc3RhdGUuY29udGV4dC50eXBlO1xuICAgICAgaWYgKHQgPT0gXCIpXCIgfHwgdCA9PSBcIl1cIiB8fCB0ID09IFwifVwiKVxuICAgICAgICBzdGF0ZS5pbmRlbnRlZCA9IHN0YXRlLmNvbnRleHQuaW5kZW50ZWQ7XG4gICAgICByZXR1cm4gc3RhdGUuY29udGV4dCA9IHN0YXRlLmNvbnRleHQucHJldjtcbiAgICB9XG5cbiAgICAvL0ludGVyZmFjZVxuICAgIHJldHVybiB7XG4gICAgICBzdGFydFN0YXRlOiBmdW5jdGlvbihiYXNlY29sdW1uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9rZW5pemU6IG51bGwsXG4gICAgICAgICAgY29udGV4dDogbmV3IENvbnRleHQoKGJhc2Vjb2x1bW4gfHwgMCkgLSBpbmRlbnRVbml0LCAwLCBcInRvcFwiLCBmYWxzZSksXG4gICAgICAgICAgaW5kZW50ZWQ6IDAsXG4gICAgICAgICAgc3RhcnRPZkxpbmU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIHZhciBjdHggPSBzdGF0ZS5jb250ZXh0O1xuICAgICAgICBpZiAoc3RyZWFtLnNvbCgpKSB7XG4gICAgICAgICAgaWYgKGN0eC5hbGlnbiA9PSBudWxsKSBjdHguYWxpZ24gPSBmYWxzZTtcbiAgICAgICAgICBzdGF0ZS5pbmRlbnRlZCA9IHN0cmVhbS5pbmRlbnRhdGlvbigpO1xuICAgICAgICAgIHN0YXRlLnN0YXJ0T2ZMaW5lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgICAgICBjdXJQdW5jID0gbnVsbDtcbiAgICAgICAgdmFyIHN0eWxlID0gKHN0YXRlLnRva2VuaXplIHx8IHRva2VuQmFzZSkoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIGlmIChzdHlsZSA9PSBcImNvbW1lbnRcIikgcmV0dXJuIHN0eWxlO1xuICAgICAgICBpZiAoY3R4LmFsaWduID09IG51bGwpIGN0eC5hbGlnbiA9IHRydWU7XG5cbiAgICAgICAgaWYgKChjdXJQdW5jID09IFwiO1wiIHx8IGN1clB1bmMgPT0gXCI6XCIgfHwgY3VyUHVuYyA9PSBcIixcIilcbiAgICAgICAgICAgICYmIGN0eC50eXBlID09IFwic3RhdGVtZW50XCIpe1xuICAgICAgICAgIHBvcENvbnRleHQoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1clB1bmMgPT0gXCJ7XCIpIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0uY29sdW1uKCksIFwifVwiKTtcbiAgICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIltcIikgcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbS5jb2x1bW4oKSwgXCJdXCIpO1xuICAgICAgICBlbHNlIGlmIChjdXJQdW5jID09IFwiKFwiKSBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLmNvbHVtbigpLCBcIilcIik7XG4gICAgICAgIGVsc2UgaWYgKGN1clB1bmMgPT0gXCJ9XCIpIHtcbiAgICAgICAgICB3aGlsZSAoY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIikgY3R4ID0gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICAgICAgaWYgKGN0eC50eXBlID09IFwifVwiKSBjdHggPSBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICAgICAgICB3aGlsZSAoY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIikgY3R4ID0gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBjdHgudHlwZSkgcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICAgIGVsc2UgaWYgKGluZGVudFN0YXRlbWVudHMgJiYgKCgoY3R4LnR5cGUgPT0gXCJ9XCIgfHwgY3R4LnR5cGUgPT0gXCJ0b3BcIilcbiAgICAgICAgICAgICYmIGN1clB1bmMgIT0gJzsnKSB8fCAoY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIlxuICAgICAgICAgICAgJiYgY3VyUHVuYyA9PSBcIm5ld3N0YXRlbWVudFwiKSkpXG4gICAgICAgICAgcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbS5jb2x1bW4oKSwgXCJzdGF0ZW1lbnRcIik7XG4gICAgICAgIHN0YXRlLnN0YXJ0T2ZMaW5lID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sXG5cbiAgICAgIGVsZWN0cmljQ2hhcnM6IFwie31cIixcbiAgICAgIGxpbmVDb21tZW50OiBcIiNcIixcbiAgICAgIGZvbGQ6IFwiYnJhY2VcIlxuICAgIH07XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHdvcmRzKHN0cikge1xuICAgIHZhciBvYmogPSB7fSwgd29yZHMgPSBzdHIuc3BsaXQoXCIgXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpXG4gICAgICBvYmpbd29yZHNbaV1dID0gdHJ1ZTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC94LXR0Y24tY2ZnXCIsIHtcbiAgICBuYW1lOiBcInR0Y24tY2ZnXCIsXG4gICAga2V5d29yZHM6IHdvcmRzKFwiWWVzIE5vIExvZ0ZpbGUgRmlsZU1hc2sgQ29uc29sZU1hc2sgQXBwZW5kRmlsZVwiICtcbiAgICBcIiBUaW1lU3RhbXBGb3JtYXQgTG9nRXZlbnRUeXBlcyBTb3VyY2VJbmZvRm9ybWF0XCIgK1xuICAgIFwiIExvZ0VudGl0eU5hbWUgTG9nU291cmNlSW5mbyBEaXNrRnVsbEFjdGlvblwiICtcbiAgICBcIiBMb2dGaWxlTnVtYmVyIExvZ0ZpbGVTaXplIE1hdGNoaW5nSGludHMgRGV0YWlsZWRcIiArXG4gICAgXCIgQ29tcGFjdCBTdWJDYXRlZ29yaWVzIFN0YWNrIFNpbmdsZSBOb25lIFNlY29uZHNcIiArXG4gICAgXCIgRGF0ZVRpbWUgVGltZSBTdG9wIEVycm9yIFJldHJ5IERlbGV0ZSBUQ1BQb3J0IEtpbGxUaW1lclwiICtcbiAgICBcIiBOdW1IQ3MgVW5peFNvY2tldHNFbmFibGVkIExvY2FsQWRkcmVzc1wiKSxcbiAgICBmaWxlTkN0cmxNYXNrT3B0aW9uczogd29yZHMoXCJUVENOX0VYRUNVVE9SIFRUQ05fRVJST1IgVFRDTl9XQVJOSU5HXCIgK1xuICAgIFwiIFRUQ05fUE9SVEVWRU5UIFRUQ05fVElNRVJPUCBUVENOX1ZFUkRJQ1RPUFwiICtcbiAgICBcIiBUVENOX0RFRkFVTFRPUCBUVENOX1RFU1RDQVNFIFRUQ05fQUNUSU9OXCIgK1xuICAgIFwiIFRUQ05fVVNFUiBUVENOX0ZVTkNUSU9OIFRUQ05fU1RBVElTVElDU1wiICtcbiAgICBcIiBUVENOX1BBUkFMTEVMIFRUQ05fTUFUQ0hJTkcgVFRDTl9ERUJVR1wiICtcbiAgICBcIiBFWEVDVVRPUiBFUlJPUiBXQVJOSU5HIFBPUlRFVkVOVCBUSU1FUk9QXCIgK1xuICAgIFwiIFZFUkRJQ1RPUCBERUZBVUxUT1AgVEVTVENBU0UgQUNUSU9OIFVTRVJcIiArXG4gICAgXCIgRlVOQ1RJT04gU1RBVElTVElDUyBQQVJBTExFTCBNQVRDSElORyBERUJVR1wiICtcbiAgICBcIiBMT0dfQUxMIExPR19OT1RISU5HIEFDVElPTl9VTlFVQUxJRklFRFwiICtcbiAgICBcIiBERUJVR19FTkNERUMgREVCVUdfVEVTVFBPUlRcIiArXG4gICAgXCIgREVCVUdfVU5RVUFMSUZJRUQgREVGQVVMVE9QX0FDVElWQVRFXCIgK1xuICAgIFwiIERFRkFVTFRPUF9ERUFDVElWQVRFIERFRkFVTFRPUF9FWElUXCIgK1xuICAgIFwiIERFRkFVTFRPUF9VTlFVQUxJRklFRCBFUlJPUl9VTlFVQUxJRklFRFwiICtcbiAgICBcIiBFWEVDVVRPUl9DT01QT05FTlQgRVhFQ1VUT1JfQ09ORklHREFUQVwiICtcbiAgICBcIiBFWEVDVVRPUl9FWFRDT01NQU5EIEVYRUNVVE9SX0xPR09QVElPTlNcIiArXG4gICAgXCIgRVhFQ1VUT1JfUlVOVElNRSBFWEVDVVRPUl9VTlFVQUxJRklFRFwiICtcbiAgICBcIiBGVU5DVElPTl9STkQgRlVOQ1RJT05fVU5RVUFMSUZJRURcIiArXG4gICAgXCIgTUFUQ0hJTkdfRE9ORSBNQVRDSElOR19NQ1NVQ0NFU1NcIiArXG4gICAgXCIgTUFUQ0hJTkdfTUNVTlNVQ0MgTUFUQ0hJTkdfTU1TVUNDRVNTXCIgK1xuICAgIFwiIE1BVENISU5HX01NVU5TVUNDIE1BVENISU5HX1BDU1VDQ0VTU1wiICtcbiAgICBcIiBNQVRDSElOR19QQ1VOU1VDQyBNQVRDSElOR19QTVNVQ0NFU1NcIiArXG4gICAgXCIgTUFUQ0hJTkdfUE1VTlNVQ0MgTUFUQ0hJTkdfUFJPQkxFTVwiICtcbiAgICBcIiBNQVRDSElOR19USU1FT1VUIE1BVENISU5HX1VOUVVBTElGSUVEXCIgK1xuICAgIFwiIFBBUkFMTEVMX1BPUlRDT05OIFBBUkFMTEVMX1BPUlRNQVBcIiArXG4gICAgXCIgUEFSQUxMRUxfUFRDIFBBUkFMTEVMX1VOUVVBTElGSUVEXCIgK1xuICAgIFwiIFBPUlRFVkVOVF9EVUFMUkVDViBQT1JURVZFTlRfRFVBTFNFTkRcIiArXG4gICAgXCIgUE9SVEVWRU5UX01DUkVDViBQT1JURVZFTlRfTUNTRU5EXCIgK1xuICAgIFwiIFBPUlRFVkVOVF9NTVJFQ1YgUE9SVEVWRU5UX01NU0VORFwiICtcbiAgICBcIiBQT1JURVZFTlRfTVFVRVVFIFBPUlRFVkVOVF9QQ0lOXCIgK1xuICAgIFwiIFBPUlRFVkVOVF9QQ09VVCBQT1JURVZFTlRfUE1JTlwiICtcbiAgICBcIiBQT1JURVZFTlRfUE1PVVQgUE9SVEVWRU5UX1BRVUVVRVwiICtcbiAgICBcIiBQT1JURVZFTlRfU1RBVEUgUE9SVEVWRU5UX1VOUVVBTElGSUVEXCIgK1xuICAgIFwiIFNUQVRJU1RJQ1NfVU5RVUFMSUZJRUQgU1RBVElTVElDU19WRVJESUNUXCIgK1xuICAgIFwiIFRFU1RDQVNFX0ZJTklTSCBURVNUQ0FTRV9TVEFSVFwiICtcbiAgICBcIiBURVNUQ0FTRV9VTlFVQUxJRklFRCBUSU1FUk9QX0dVQVJEXCIgK1xuICAgIFwiIFRJTUVST1BfUkVBRCBUSU1FUk9QX1NUQVJUIFRJTUVST1BfU1RPUFwiICtcbiAgICBcIiBUSU1FUk9QX1RJTUVPVVQgVElNRVJPUF9VTlFVQUxJRklFRFwiICtcbiAgICBcIiBVU0VSX1VOUVVBTElGSUVEIFZFUkRJQ1RPUF9GSU5BTFwiICtcbiAgICBcIiBWRVJESUNUT1BfR0VUVkVSRElDVCBWRVJESUNUT1BfU0VUVkVSRElDVFwiICtcbiAgICBcIiBWRVJESUNUT1BfVU5RVUFMSUZJRUQgV0FSTklOR19VTlFVQUxJRklFRFwiKSxcbiAgICBleHRlcm5hbENvbW1hbmRzOiB3b3JkcyhcIkJlZ2luQ29udHJvbFBhcnQgRW5kQ29udHJvbFBhcnQgQmVnaW5UZXN0Q2FzZVwiICtcbiAgICBcIiBFbmRUZXN0Q2FzZVwiKSxcbiAgICBtdWx0aUxpbmVTdHJpbmdzOiB0cnVlXG4gIH0pO1xufSk7Il0sIm5hbWVzIjpbIm1vZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwiQ29kZU1pcnJvciIsImRlZmluZU1vZGUiLCJjb25maWciLCJwYXJzZXJDb25maWciLCJpbmRlbnRVbml0Iiwia2V5d29yZHMiLCJmaWxlTkN0cmxNYXNrT3B0aW9ucyIsImV4dGVybmFsQ29tbWFuZHMiLCJtdWx0aUxpbmVTdHJpbmdzIiwiaW5kZW50U3RhdGVtZW50cyIsImlzT3BlcmF0b3JDaGFyIiwiY3VyUHVuYyIsInRva2VuQmFzZSIsInN0cmVhbSIsInN0YXRlIiwiY2giLCJuZXh0IiwidG9rZW5pemUiLCJ0b2tlblN0cmluZyIsInRlc3QiLCJza2lwVG9FbmQiLCJlYXRXaGlsZSIsImN1ciIsImN1cnJlbnQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInF1b3RlIiwiZXNjYXBlZCIsImVuZCIsImFmdGVyTmV4dCIsInBlZWsiLCJ0b0xvd2VyQ2FzZSIsIkNvbnRleHQiLCJpbmRlbnRlZCIsImNvbHVtbiIsInR5cGUiLCJhbGlnbiIsInByZXYiLCJwdXNoQ29udGV4dCIsImNvbCIsImluZGVudCIsImNvbnRleHQiLCJwb3BDb250ZXh0IiwidCIsInN0YXJ0U3RhdGUiLCJiYXNlY29sdW1uIiwic3RhcnRPZkxpbmUiLCJ0b2tlbiIsImN0eCIsInNvbCIsImluZGVudGF0aW9uIiwiZWF0U3BhY2UiLCJzdHlsZSIsImVsZWN0cmljQ2hhcnMiLCJsaW5lQ29tbWVudCIsImZvbGQiLCJ3b3JkcyIsInN0ciIsIm9iaiIsInNwbGl0IiwiaSIsImxlbmd0aCIsImRlZmluZU1JTUUiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/ttcn-cfg/ttcn-cfg.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/ttcn-cfg/ttcn-cfg.js");
/******/ 	
/******/ })()
;