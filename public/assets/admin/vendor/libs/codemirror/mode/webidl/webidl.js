/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/webidl/webidl.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/webidl/webidl.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  ;\n  var builtinArray = [\"Clamp\", \"Constructor\", \"EnforceRange\", \"Exposed\", \"ImplicitThis\", \"Global\", \"PrimaryGlobal\", \"LegacyArrayClass\", \"LegacyUnenumerableNamedProperties\", \"LenientThis\", \"NamedConstructor\", \"NewObject\", \"NoInterfaceObject\", \"OverrideBuiltins\", \"PutForwards\", \"Replaceable\", \"SameObject\", \"TreatNonObjectAsNull\", \"TreatNullAs\", \"EmptyString\", \"Unforgeable\", \"Unscopeable\"];\n  var builtins = wordRegexp(builtinArray);\n  var typeArray = [\"unsigned\", \"short\", \"long\", // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\", // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\", // Rest of PrimitiveType\n  \"Promise\", // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\", \"Float32Array\", \"Float64Array\", // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\", \"Error\", \"DOMException\", \"FrozenArray\", // Rest of NonAnyType\n  \"any\", // Rest of SingleType\n  \"void\" // Rest of ReturnType\n  ];\n  var types = wordRegexp(typeArray);\n  var keywordArray = [\"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\", \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\", \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\", \"stringifier\", \"typedef\", // ArgumentNameKeyword except\n  // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"];\n  var keywords = wordRegexp(keywordArray);\n  var atomArray = [\"true\", \"false\", // BooleanLiteral\n  \"Infinity\", \"NaN\", // FloatLiteral\n  \"null\" // Rest of ConstValue\n  ];\n  var atoms = wordRegexp(atomArray);\n  CodeMirror.registerHelper(\"hintWords\", \"webidl\", builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n  var startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\n  var startDefs = wordRegexp(startDefArray);\n  var endDefArray = [\"typedef\"];\n  var endDefs = wordRegexp(endDefArray);\n  var singleOperators = /^[:<=>?]/;\n  var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\n  var floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\n  var identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\n  var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\n  var strings = /^\"[^\"]*\"/;\n  var multilineComments = /^\\/\\*.*?\\*\\//;\n  var multilineCommentsStart = /^\\/\\*.*/;\n  var multilineCommentsEnd = /^.*?\\*\\//;\n\n  function readToken(stream, state) {\n    // whitespace\n    if (stream.eatSpace()) return null; // comment\n\n    if (state.inComment) {\n      if (stream.match(multilineCommentsEnd)) {\n        state.inComment = false;\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(multilineComments)) return \"comment\";\n\n    if (stream.match(multilineCommentsStart)) {\n      state.inComment = true;\n      return \"comment\";\n    } // integer and float\n\n\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      if (stream.match(integers) || stream.match(floats)) return \"number\";\n    } // string\n\n\n    if (stream.match(strings)) return \"string\"; // identifier\n\n    if (state.startDef && stream.match(identifiers)) return \"def\";\n\n    if (state.endDef && stream.match(identifiersEnd)) {\n      state.endDef = false;\n      return \"def\";\n    }\n\n    if (stream.match(keywords)) return \"keyword\";\n\n    if (stream.match(types)) {\n      var lastToken = state.lastToken;\n      var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n      if (lastToken === \":\" || lastToken === \"implements\" || nextToken === \"implements\" || nextToken === \"=\") {\n        // Used as identifier\n        return \"builtin\";\n      } else {\n        // Used as type\n        return \"variable-3\";\n      }\n    }\n\n    if (stream.match(builtins)) return \"builtin\";\n    if (stream.match(atoms)) return \"atom\";\n    if (stream.match(identifiers)) return \"variable\"; // other\n\n    if (stream.match(singleOperators)) return \"operator\"; // unrecognized\n\n    stream.next();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"webidl\", function () {\n    return {\n      startState: function startState() {\n        return {\n          // Is in multiline comment\n          inComment: false,\n          // Last non-whitespace, matched token\n          lastToken: \"\",\n          // Next token is a definition\n          startDef: false,\n          // Last token of the statement is a definition\n          endDef: false\n        };\n      },\n      token: function token(stream, state) {\n        var style = readToken(stream, state);\n\n        if (style) {\n          var cur = stream.current();\n          state.lastToken = cur;\n\n          if (style === \"keyword\") {\n            state.startDef = startDefs.test(cur);\n            state.endDef = state.endDef || endDefs.test(cur);\n          } else {\n            state.startDef = false;\n          }\n        }\n\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/webidl/webidl.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/webidl/webidl.js");
/******/ 	
/******/ })()
;