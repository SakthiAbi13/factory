/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/mscgen/mscgen.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/mscgen/mscgen.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// mode(s) for the sequence chart dsl's mscgen, x√π and msgenny\n// For more information on mscgen, see the site of the original author:\n// http://www.mcternan.me.uk/mscgen\n//\n// This mode for mscgen and the two derivative languages were\n// originally made for use in the mscgen_js interpreter\n// (https://sverweij.github.io/mscgen_js)\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var languages = {\n    mscgen: {\n      \"keywords\": [\"msc\"],\n      \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n      \"constants\": [\"true\", \"false\", \"on\", \"off\"],\n      \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n      \"brackets\": [\"\\\\{\", \"\\\\}\"],\n      // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\"],\n      \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\": [\"//\", \"#\"],\n      \"operators\": [\"=\"]\n    },\n    xu: {\n      \"keywords\": [\"msc\", \"xu\"],\n      \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n      \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n      \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n      \"brackets\": [\"\\\\{\", \"\\\\}\"],\n      // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\": [\"//\", \"#\"],\n      \"operators\": [\"=\"]\n    },\n    msgenny: {\n      \"keywords\": null,\n      \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n      \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n      \"attributes\": null,\n      \"brackets\": [\"\\\\{\", \"\\\\}\"],\n      \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\": [\"//\", \"#\"],\n      \"operators\": [\"=\"]\n    }\n  };\n  CodeMirror.defineMode(\"mscgen\", function (_, modeConfig) {\n    var language = languages[modeConfig && modeConfig.language || \"mscgen\"];\n    return {\n      startState: startStateFn,\n      copyState: copyStateFn,\n      token: produceTokenFunction(language),\n      lineComment: \"#\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-mscgen\", \"mscgen\");\n  CodeMirror.defineMIME(\"text/x-xu\", {\n    name: \"mscgen\",\n    language: \"xu\"\n  });\n  CodeMirror.defineMIME(\"text/x-msgenny\", {\n    name: \"mscgen\",\n    language: \"msgenny\"\n  });\n\n  function wordRegexpBoundary(pWords) {\n    return new RegExp(\"^\\\\b(?:\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n  }\n\n  function wordRegexp(pWords) {\n    return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n  }\n\n  function startStateFn() {\n    return {\n      inComment: false,\n      inString: false,\n      inAttributeList: false,\n      inScript: false\n    };\n  }\n\n  function copyStateFn(pState) {\n    return {\n      inComment: pState.inComment,\n      inString: pState.inString,\n      inAttributeList: pState.inAttributeList,\n      inScript: pState.inScript\n    };\n  }\n\n  function produceTokenFunction(pConfig) {\n    return function (pStream, pState) {\n      if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n        return \"bracket\";\n      }\n      /* comments */\n\n\n      if (!pState.inComment) {\n        if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n          pState.inComment = true;\n          return \"comment\";\n        }\n\n        if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n          pStream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (pState.inComment) {\n        if (pStream.match(/[^\\*\\/]*\\*\\//, true, true)) pState.inComment = false;else pStream.skipToEnd();\n        return \"comment\";\n      }\n      /* strings */\n\n\n      if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n        pState.inString = true;\n        return \"string\";\n      }\n\n      if (pState.inString) {\n        if (pStream.match(/[^\\\"]*\\\"/, true, true)) pState.inString = false;else pStream.skipToEnd();\n        return \"string\";\n      }\n      /* keywords & operators */\n\n\n      if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true)) return \"keyword\";\n      if (pStream.match(wordRegexpBoundary(pConfig.options), true, true)) return \"keyword\";\n      if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true)) return \"keyword\";\n      if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true)) return \"keyword\";\n      if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true)) return \"operator\";\n      if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true)) return \"variable\";\n      /* attribute lists */\n\n      if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n        pConfig.inAttributeList = true;\n        return \"bracket\";\n      }\n\n      if (pConfig.inAttributeList) {\n        if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n          return \"attribute\";\n        }\n\n        if (pStream.match(']', true, true)) {\n          pConfig.inAttributeList = false;\n          return \"bracket\";\n        }\n      }\n\n      pStream.next();\n      return \"base\";\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS9tc2NnZW4vbXNjZ2VuLmpzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLENBQUMsVUFBU0EsR0FBVCxFQUFjO0VBQ2IsSUFBSyxzQkFBT0MsT0FBUCxNQUFrQixRQUFsQixJQUE4QixzQkFBT0MsTUFBUCxNQUFpQixRQUFwRCxFQUE2RDtJQUMzREYsR0FBRyxDQUFDRyxtQkFBTyxDQUFDLG1KQUFELENBQVIsQ0FBSCxDQURGLEtBRUssSUFBSyxJQUFMLEVBQStDO0lBQ2xEQyxpQ0FBTyxDQUFDLG1KQUFELENBQUQsb0NBQTJCSixHQUEzQjtBQUFBO0FBQUE7QUFBQSxrR0FBTixDQURHLEtBRUQ7SUFDRkEsRUFBQTtBQUNILENBUEQsRUFPRyxVQUFTTSxVQUFULEVBQXFCO0VBQ3RCOztFQUVBLElBQUlDLFNBQVMsR0FBRztJQUNkQyxNQUFNLEVBQUU7TUFDTixZQUFhLENBQUMsS0FBRCxDQURQO01BRU4sV0FBWSxDQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLGFBQXBCLEVBQW1DLGNBQW5DLENBRk47TUFHTixhQUFjLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsSUFBbEIsRUFBd0IsS0FBeEIsQ0FIUjtNQUlOLGNBQWUsQ0FBQyxPQUFELEVBQVUsT0FBVixFQUFtQixJQUFuQixFQUF5QixLQUF6QixFQUFnQyxXQUFoQyxFQUE2QyxZQUE3QyxFQUEyRCxXQUEzRCxFQUF3RSxZQUF4RSxFQUFzRixhQUF0RixFQUFxRyxjQUFyRyxFQUFxSCxjQUFySCxFQUFxSSxlQUFySSxFQUFzSixjQUF0SixFQUFzSyxlQUF0SyxFQUF1TCxnQkFBdkwsRUFBeU0saUJBQXpNLEVBQTROLFNBQTVOLENBSlQ7TUFLTixZQUFhLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FMUDtNQUt1QjtNQUM3QixhQUFjLENBQUMsTUFBRCxF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T0FBTyxDQUFDWSxVQUF0QyxJQUFvRFgsT0FBTyxDQUFDQyxLQUFSLENBQWMsR0FBZCxFQUFtQixJQUFuQixFQUF5QixJQUF6QixDQUF4RCxFQUF3RjtRQUN0RkYsT0FBTyxDQUFDSCxlQUFSLEdBQTBCLElBQTFCO1FBQ0EsT0FBTyxTQUFQO01BQ0Q7O01BQ0QsSUFBSUcsT0FBTyxDQUFDSCxlQUFaLEVBQTZCO1FBQzNCLElBQUlHLE9BQU8sQ0FBQ1ksVUFBUixLQUF1QixJQUF2QixJQUErQlgsT0FBTyxDQUFDQyxLQUFSLENBQWNaLGtCQUFrQixDQUFDVSxPQUFPLENBQUNZLFVBQVQsQ0FBaEMsRUFBc0QsSUFBdEQsRUFBNEQsSUFBNUQsQ0FBbkMsRUFBc0c7VUFDcEcsT0FBTyxXQUFQO1FBQ0Q7O1FBQ0QsSUFBSVgsT0FBTyxDQUFDQyxLQUFSLENBQWMsR0FBZCxFQUFtQixJQUFuQixFQUF5QixJQUF6QixDQUFKLEVBQW9DO1VBQ2xDRixPQUFPLENBQUNILGVBQVIsR0FBMEIsS0FBMUI7VUFDQSxPQUFPLFNBQVA7UUFDRDtNQUNGOztNQUVESSxPQUFPLENBQUNZLElBQVI7TUFDQSxPQUFPLE1BQVA7SUFDRCxDQXRFRDtFQXVFRDtBQUVGLENBbktEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy92ZW5kb3IvbGlicy9jb2RlbWlycm9yL21vZGUvbXNjZ2VuL21zY2dlbi5qcz9mNWVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbi8vIG1vZGUocykgZm9yIHRoZSBzZXF1ZW5jZSBjaGFydCBkc2wncyBtc2NnZW4sIHjDuSBhbmQgbXNnZW5ueVxuLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gbXNjZ2VuLCBzZWUgdGhlIHNpdGUgb2YgdGhlIG9yaWdpbmFsIGF1dGhvcjpcbi8vIGh0dHA6Ly93d3cubWN0ZXJuYW4ubWUudWsvbXNjZ2VuXG4vL1xuLy8gVGhpcyBtb2RlIGZvciBtc2NnZW4gYW5kIHRoZSB0d28gZGVyaXZhdGl2ZSBsYW5ndWFnZXMgd2VyZVxuLy8gb3JpZ2luYWxseSBtYWRlIGZvciB1c2UgaW4gdGhlIG1zY2dlbl9qcyBpbnRlcnByZXRlclxuLy8gKGh0dHBzOi8vc3ZlcndlaWouZ2l0aHViLmlvL21zY2dlbl9qcylcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAoIHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKS8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSk7XG4gIGVsc2UgaWYgKCB0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKS8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiXSwgbW9kKTtcbiAgZWxzZS8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgbGFuZ3VhZ2VzID0ge1xuICAgIG1zY2dlbjoge1xuICAgICAgXCJrZXl3b3Jkc1wiIDogW1wibXNjXCJdLFxuICAgICAgXCJvcHRpb25zXCIgOiBbXCJoc2NhbGVcIiwgXCJ3aWR0aFwiLCBcImFyY2dyYWRpZW50XCIsIFwid29yZHdyYXBhcmNzXCJdLFxuICAgICAgXCJjb25zdGFudHNcIiA6IFtcInRydWVcIiwgXCJmYWxzZVwiLCBcIm9uXCIsIFwib2ZmXCJdLFxuICAgICAgXCJhdHRyaWJ1dGVzXCIgOiBbXCJsYWJlbFwiLCBcImlkdXJsXCIsIFwiaWRcIiwgXCJ1cmxcIiwgXCJsaW5lY29sb3JcIiwgXCJsaW5lY29sb3VyXCIsIFwidGV4dGNvbG9yXCIsIFwidGV4dGNvbG91clwiLCBcInRleHRiZ2NvbG9yXCIsIFwidGV4dGJnY29sb3VyXCIsIFwiYXJjbGluZWNvbG9yXCIsIFwiYXJjbGluZWNvbG91clwiLCBcImFyY3RleHRjb2xvclwiLCBcImFyY3RleHRjb2xvdXJcIiwgXCJhcmN0ZXh0Ymdjb2xvclwiLCBcImFyY3RleHRiZ2NvbG91clwiLCBcImFyY3NraXBcIl0sXG4gICAgICBcImJyYWNrZXRzXCIgOiBbXCJcXFxce1wiLCBcIlxcXFx9XCJdLCAvLyBbIGFuZCAgXSBhcmUgYnJhY2tldHMgdG9vLCBidXQgdGhlc2UgZ2V0IGhhbmRsZWQgaW4gd2l0aCBsaXN0c1xuICAgICAgXCJhcmNzV29yZHNcIiA6IFtcIm5vdGVcIiwgXCJhYm94XCIsIFwicmJveFwiLCBcImJveFwiXSxcbiAgICAgIFwiYXJjc090aGVyc1wiIDogW1wiXFxcXHxcXFxcfFxcXFx8XCIsIFwiXFxcXC5cXFxcLlxcXFwuXCIsIFwiLS0tXCIsIFwiLS1cIiwgXCI8LT5cIiwgXCI9PVwiLCBcIjw8PT4+XCIsIFwiPD0+XCIsIFwiXFxcXC5cXFxcLlwiLCBcIjw8Pj5cIiwgXCI6OlwiLCBcIjw6PlwiLCBcIi0+XCIsIFwiPT4+XCIsIFwiPT5cIiwgXCI+PlwiLCBcIjo+XCIsIFwiPC1cIiwgXCI8PD1cIiwgXCI8PVwiLCBcIjw8XCIsIFwiPDpcIiwgXCJ4LVwiLCBcIi14XCJdLFxuICAgICAgXCJzaW5nbGVjb21tZW50XCIgOiBbXCIvL1wiLCBcIiNcIl0sXG4gICAgICBcIm9wZXJhdG9yc1wiIDogW1wiPVwiXVxuICAgIH0sXG4gICAgeHU6IHtcbiAgICAgIFwia2V5d29yZHNcIiA6IFtcIm1zY1wiLCBcInh1XCJdLFxuICAgICAgXCJvcHRpb25zXCIgOiBbXCJoc2NhbGVcIiwgXCJ3aWR0aFwiLCBcImFyY2dyYWRpZW50XCIsIFwid29yZHdyYXBhcmNzXCIsIFwid29yZHdyYXBlbnRpdGllc1wiLCBcIndhdGVybWFya1wiXSxcbiAgICAgIFwiY29uc3RhbnRzXCIgOiBbXCJ0cnVlXCIsIFwiZmFsc2VcIiwgXCJvblwiLCBcIm9mZlwiLCBcImF1dG9cIl0sXG4gICAgICBcImF0dHJpYnV0ZXNcIiA6IFtcImxhYmVsXCIsIFwiaWR1cmxcIiwgXCJpZFwiLCBcInVybFwiLCBcImxpbmVjb2xvclwiLCBcImxpbmVjb2xvdXJcIiwgXCJ0ZXh0Y29sb3JcIiwgXCJ0ZXh0Y29sb3VyXCIsIFwidGV4dGJnY29sb3JcIiwgXCJ0ZXh0Ymdjb2xvdXJcIiwgXCJhcmNsaW5lY29sb3JcIiwgXCJhcmNsaW5lY29sb3VyXCIsIFwiYXJjdGV4dGNvbG9yXCIsIFwiYXJjdGV4dGNvbG91clwiLCBcImFyY3RleHRiZ2NvbG9yXCIsIFwiYXJjdGV4dGJnY29sb3VyXCIsIFwiYXJjc2tpcFwiLCBcInRpdGxlXCIsIFwiZGVhY3RpdmF0ZVwiLCBcImFjdGl2YXRlXCIsIFwiYWN0aXZhdGlvblwiXSxcbiAgICAgIFwiYnJhY2tldHNcIiA6IFtcIlxcXFx7XCIsIFwiXFxcXH1cIl0sICAvLyBbIGFuZCAgXSBhcmUgYnJhY2tldHMgdG9vLCBidXQgdGhlc2UgZ2V0IGhhbmRsZWQgaW4gd2l0aCBsaXN0c1xuICAgICAgXCJhcmNzV29yZHNcIiA6IFtcIm5vdGVcIiwgXCJhYm94XCIsIFwicmJveFwiLCBcImJveFwiLCBcImFsdFwiLCBcImVsc2VcIiwgXCJvcHRcIiwgXCJicmVha1wiLCBcInBhclwiLCBcInNlcVwiLCBcInN0cmljdFwiLCBcIm5lZ1wiLCBcImNyaXRpY2FsXCIsIFwiaWdub3JlXCIsIFwiY29uc2lkZXJcIiwgXCJhc3NlcnRcIiwgXCJsb29wXCIsIFwicmVmXCIsIFwiZXhjXCJdLFxuICAgICAgXCJhcmNzT3RoZXJzXCIgOiBbXCJcXFxcfFxcXFx8XFxcXHxcIiwgXCJcXFxcLlxcXFwuXFxcXC5cIiwgXCItLS1cIiwgXCItLVwiLCBcIjwtPlwiLCBcIj09XCIsIFwiPDw9Pj5cIiwgXCI8PT5cIiwgXCJcXFxcLlxcXFwuXCIsIFwiPDw+PlwiLCBcIjo6XCIsIFwiPDo+XCIsIFwiLT5cIiwgXCI9Pj5cIiwgXCI9PlwiLCBcIj4+XCIsIFwiOj5cIiwgXCI8LVwiLCBcIjw8PVwiLCBcIjw9XCIsIFwiPDxcIiwgXCI8OlwiLCBcIngtXCIsIFwiLXhcIl0sXG4gICAgICBcInNpbmdsZWNvbW1lbnRcIiA6IFtcIi8vXCIsIFwiI1wiXSxcbiAgICAgIFwib3BlcmF0b3JzXCIgOiBbXCI9XCJdXG4gICAgfSxcbiAgICBtc2dlbm55OiB7XG4gICAgICBcImtleXdvcmRzXCIgOiBudWxsLFxuICAgICAgXCJvcHRpb25zXCIgOiBbXCJoc2NhbGVcIiwgXCJ3aWR0aFwiLCBcImFyY2dyYWRpZW50XCIsIFwid29yZHdyYXBhcmNzXCIsIFwid29yZHdyYXBlbnRpdGllc1wiLCBcIndhdGVybWFya1wiXSxcbiAgICAgIFwiY29uc3RhbnRzXCIgOiBbXCJ0cnVlXCIsIFwiZmFsc2VcIiwgXCJvblwiLCBcIm9mZlwiLCBcImF1dG9cIl0sXG4gICAgICBcImF0dHJpYnV0ZXNcIiA6IG51bGwsXG4gICAgICBcImJyYWNrZXRzXCIgOiBbXCJcXFxce1wiLCBcIlxcXFx9XCJdLFxuICAgICAgXCJhcmNzV29yZHNcIiA6IFtcIm5vdGVcIiwgXCJhYm94XCIsIFwicmJveFwiLCBcImJveFwiLCBcImFsdFwiLCBcImVsc2VcIiwgXCJvcHRcIiwgXCJicmVha1wiLCBcInBhclwiLCBcInNlcVwiLCBcInN0cmljdFwiLCBcIm5lZ1wiLCBcImNyaXRpY2FsXCIsIFwiaWdub3JlXCIsIFwiY29uc2lkZXJcIiwgXCJhc3NlcnRcIiwgXCJsb29wXCIsIFwicmVmXCIsIFwiZXhjXCJdLFxuICAgICAgXCJhcmNzT3RoZXJzXCIgOiBbXCJcXFxcfFxcXFx8XFxcXHxcIiwgXCJcXFxcLlxcXFwuXFxcXC5cIiwgXCItLS1cIiwgXCItLVwiLCBcIjwtPlwiLCBcIj09XCIsIFwiPDw9Pj5cIiwgXCI8PT5cIiwgXCJcXFxcLlxcXFwuXCIsIFwiPDw+PlwiLCBcIjo6XCIsIFwiPDo+XCIsIFwiLT5cIiwgXCI9Pj5cIiwgXCI9PlwiLCBcIj4+XCIsIFwiOj5cIiwgXCI8LVwiLCBcIjw8PVwiLCBcIjw9XCIsIFwiPDxcIiwgXCI8OlwiLCBcIngtXCIsIFwiLXhcIl0sXG4gICAgICBcInNpbmdsZWNvbW1lbnRcIiA6IFtcIi8vXCIsIFwiI1wiXSxcbiAgICAgIFwib3BlcmF0b3JzXCIgOiBbXCI9XCJdXG4gICAgfVxuICB9XG5cbiAgQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwibXNjZ2VuXCIsIGZ1bmN0aW9uKF8sIG1vZGVDb25maWcpIHtcbiAgICB2YXIgbGFuZ3VhZ2UgPSBsYW5ndWFnZXNbbW9kZUNvbmZpZyAmJiBtb2RlQ29uZmlnLmxhbmd1YWdlIHx8IFwibXNjZ2VuXCJdXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0U3RhdGU6IHN0YXJ0U3RhdGVGbixcbiAgICAgIGNvcHlTdGF0ZTogY29weVN0YXRlRm4sXG4gICAgICB0b2tlbjogcHJvZHVjZVRva2VuRnVuY3Rpb24obGFuZ3VhZ2UpLFxuICAgICAgbGluZUNvbW1lbnQgOiBcIiNcIixcbiAgICAgIGJsb2NrQ29tbWVudFN0YXJ0IDogXCIvKlwiLFxuICAgICAgYmxvY2tDb21tZW50RW5kIDogXCIqL1wiXG4gICAgfTtcbiAgfSk7XG5cbiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC94LW1zY2dlblwiLCBcIm1zY2dlblwiKTtcbiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC94LXh1XCIsIHtuYW1lOiBcIm1zY2dlblwiLCBsYW5ndWFnZTogXCJ4dVwifSk7XG4gIENvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQveC1tc2dlbm55XCIsIHtuYW1lOiBcIm1zY2dlblwiLCBsYW5ndWFnZTogXCJtc2dlbm55XCJ9KTtcblxuICBmdW5jdGlvbiB3b3JkUmVnZXhwQm91bmRhcnkocFdvcmRzKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeXFxcXGIoPzpcIiArIHBXb3Jkcy5qb2luKFwifFwiKSArIFwiKVxcXFxiXCIsIFwiaVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdvcmRSZWdleHAocFdvcmRzKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBwV29yZHMuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnRTdGF0ZUZuKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbkNvbW1lbnQgOiBmYWxzZSxcbiAgICAgIGluU3RyaW5nIDogZmFsc2UsXG4gICAgICBpbkF0dHJpYnV0ZUxpc3QgOiBmYWxzZSxcbiAgICAgIGluU2NyaXB0IDogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29weVN0YXRlRm4ocFN0YXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluQ29tbWVudCA6IHBTdGF0ZS5pbkNvbW1lbnQsXG4gICAgICBpblN0cmluZyA6IHBTdGF0ZS5pblN0cmluZyxcbiAgICAgIGluQXR0cmlidXRlTGlzdCA6IHBTdGF0ZS5pbkF0dHJpYnV0ZUxpc3QsXG4gICAgICBpblNjcmlwdCA6IHBTdGF0ZS5pblNjcmlwdFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9kdWNlVG9rZW5GdW5jdGlvbihwQ29uZmlnKSB7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24ocFN0cmVhbSwgcFN0YXRlKSB7XG4gICAgICBpZiAocFN0cmVhbS5tYXRjaCh3b3JkUmVnZXhwKHBDb25maWcuYnJhY2tldHMpLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICByZXR1cm4gXCJicmFja2V0XCI7XG4gICAgICB9XG4gICAgICAvKiBjb21tZW50cyAqL1xuICAgICAgaWYgKCFwU3RhdGUuaW5Db21tZW50KSB7XG4gICAgICAgIGlmIChwU3RyZWFtLm1hdGNoKC9cXC9cXCpbXlxcKlxcL10qLywgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgICBwU3RhdGUuaW5Db21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBTdHJlYW0ubWF0Y2god29yZFJlZ2V4cChwQ29uZmlnLnNpbmdsZWNvbW1lbnQpLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICAgIHBTdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocFN0YXRlLmluQ29tbWVudCkge1xuICAgICAgICBpZiAocFN0cmVhbS5tYXRjaCgvW15cXCpcXC9dKlxcKlxcLy8sIHRydWUsIHRydWUpKVxuICAgICAgICAgIHBTdGF0ZS5pbkNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHBTdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH1cbiAgICAgIC8qIHN0cmluZ3MgKi9cbiAgICAgIGlmICghcFN0YXRlLmluU3RyaW5nICYmIHBTdHJlYW0ubWF0Y2goL1xcXCIoXFxcXFxcXCJ8W15cXFwiXSkqLywgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgcFN0YXRlLmluU3RyaW5nID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICB9XG4gICAgICBpZiAocFN0YXRlLmluU3RyaW5nKSB7XG4gICAgICAgIGlmIChwU3RyZWFtLm1hdGNoKC9bXlxcXCJdKlxcXCIvLCB0cnVlLCB0cnVlKSlcbiAgICAgICAgICBwU3RhdGUuaW5TdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHBTdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgfVxuICAgICAgLyoga2V5d29yZHMgJiBvcGVyYXRvcnMgKi9cbiAgICAgIGlmICghIXBDb25maWcua2V5d29yZHMgJiYgcFN0cmVhbS5tYXRjaCh3b3JkUmVnZXhwQm91bmRhcnkocENvbmZpZy5rZXl3b3JkcyksIHRydWUsIHRydWUpKVxuICAgICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG5cbiAgICAgIGlmIChwU3RyZWFtLm1hdGNoKHdvcmRSZWdleHBCb3VuZGFyeShwQ29uZmlnLm9wdGlvbnMpLCB0cnVlLCB0cnVlKSlcbiAgICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuXG4gICAgICBpZiAocFN0cmVhbS5tYXRjaCh3b3JkUmVnZXhwQm91bmRhcnkocENvbmZpZy5hcmNzV29yZHMpLCB0cnVlLCB0cnVlKSlcbiAgICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuXG4gICAgICBpZiAocFN0cmVhbS5tYXRjaCh3b3JkUmVnZXhwKHBDb25maWcuYXJjc090aGVycyksIHRydWUsIHRydWUpKVxuICAgICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG5cbiAgICAgIGlmICghIXBDb25maWcub3BlcmF0b3JzICYmIHBTdHJlYW0ubWF0Y2god29yZFJlZ2V4cChwQ29uZmlnLm9wZXJhdG9ycyksIHRydWUsIHRydWUpKVxuICAgICAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuXG4gICAgICBpZiAoISFwQ29uZmlnLmNvbnN0YW50cyAmJiBwU3RyZWFtLm1hdGNoKHdvcmRSZWdleHAocENvbmZpZy5jb25zdGFudHMpLCB0cnVlLCB0cnVlKSlcbiAgICAgICAgcmV0dXJuIFwidmFyaWFibGVcIjtcblxuICAgICAgLyogYXR0cmlidXRlIGxpc3RzICovXG4gICAgICBpZiAoIXBDb25maWcuaW5BdHRyaWJ1dGVMaXN0ICYmICEhcENvbmZpZy5hdHRyaWJ1dGVzICYmIHBTdHJlYW0ubWF0Y2goJ1snLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICBwQ29uZmlnLmluQXR0cmlidXRlTGlzdCA9IHRydWU7XG4gICAgICAgIHJldHVybiBcImJyYWNrZXRcIjtcbiAgICAgIH1cbiAgICAgIGlmIChwQ29uZmlnLmluQXR0cmlidXRlTGlzdCkge1xuICAgICAgICBpZiAocENvbmZpZy5hdHRyaWJ1dGVzICE9PSBudWxsICYmIHBTdHJlYW0ubWF0Y2god29yZFJlZ2V4cEJvdW5kYXJ5KHBDb25maWcuYXR0cmlidXRlcyksIHRydWUsIHRydWUpKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYXR0cmlidXRlXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBTdHJlYW0ubWF0Y2goJ10nLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICAgIHBDb25maWcuaW5BdHRyaWJ1dGVMaXN0ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIFwiYnJhY2tldFwiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBTdHJlYW0ubmV4dCgpO1xuICAgICAgcmV0dXJuIFwiYmFzZVwiO1xuICAgIH07XG4gIH1cblxufSk7XG4iXSwibmFtZXMiOlsibW9kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJDb2RlTWlycm9yIiwibGFuZ3VhZ2VzIiwibXNjZ2VuIiwieHUiLCJtc2dlbm55IiwiZGVmaW5lTW9kZSIsIl8iLCJtb2RlQ29uZmlnIiwibGFuZ3VhZ2UiLCJzdGFydFN0YXRlIiwic3RhcnRTdGF0ZUZuIiwiY29weVN0YXRlIiwiY29weVN0YXRlRm4iLCJ0b2tlbiIsInByb2R1Y2VUb2tlbkZ1bmN0aW9uIiwibGluZUNvbW1lbnQiLCJibG9ja0NvbW1lbnRTdGFydCIsImJsb2NrQ29tbWVudEVuZCIsImRlZmluZU1JTUUiLCJuYW1lIiwid29yZFJlZ2V4cEJvdW5kYXJ5IiwicFdvcmRzIiwiUmVnRXhwIiwiam9pbiIsIndvcmRSZWdleHAiLCJpbkNvbW1lbnQiLCJpblN0cmluZyIsImluQXR0cmlidXRlTGlzdCIsImluU2NyaXB0IiwicFN0YXRlIiwicENvbmZpZyIsInBTdHJlYW0iLCJtYXRjaCIsImJyYWNrZXRzIiwic2luZ2xlY29tbWVudCIsInNraXBUb0VuZCIsImtleXdvcmRzIiwib3B0aW9ucyIsImFyY3NXb3JkcyIsImFyY3NPdGhlcnMiLCJvcGVyYXRvcnMiLCJjb25zdGFudHMiLCJhdHRyaWJ1dGVzIiwibmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/mscgen/mscgen.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/mscgen/mscgen.js");
/******/ 	
/******/ })()
;