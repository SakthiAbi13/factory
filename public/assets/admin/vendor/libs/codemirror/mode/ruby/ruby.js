/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/ruby/ruby.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/ruby/ruby.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordObj(words) {\n    var o = {};\n\n    for (var i = 0, e = words.length; i < e; ++i) {\n      o[words[i]] = true;\n    }\n\n    return o;\n  }\n\n  var keywordList = [\"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\", \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\", \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"],\n      keywords = wordObj(keywordList);\n  var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\", \"catch\", \"loop\", \"proc\", \"begin\"]);\n  var dedentWords = wordObj([\"end\", \"until\"]);\n  var opening = {\n    \"[\": \"]\",\n    \"{\": \"}\",\n    \"(\": \")\"\n  };\n  var closing = {\n    \"]\": \"[\",\n    \"}\": \"{\",\n    \")\": \"(\"\n  };\n  CodeMirror.defineMode(\"ruby\", function (config) {\n    var curPunc;\n\n    function chain(newtok, stream, state) {\n      state.tokenize.push(newtok);\n      return newtok(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n        state.tokenize.push(readBlockComment);\n        return \"comment\";\n      }\n\n      if (stream.eatSpace()) return null;\n      var ch = stream.next(),\n          m;\n\n      if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n        return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n      } else if (ch == \"/\") {\n        if (regexpAhead(stream)) return chain(readQuoted(ch, \"string-2\", true), stream, state);else return \"operator\";\n      } else if (ch == \"%\") {\n        var style = \"string\",\n            embed = true;\n        if (stream.eat(\"s\")) style = \"atom\";else if (stream.eat(/[WQ]/)) style = \"string\";else if (stream.eat(/[r]/)) style = \"string-2\";else if (stream.eat(/[wxq]/)) {\n          style = \"string\";\n          embed = false;\n        }\n        var delim = stream.eat(/[^\\w\\s=]/);\n        if (!delim) return \"operator\";\n        if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n        return chain(readQuoted(delim, style, embed, true), stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n        return chain(readHereDoc(m[2], m[1]), stream, state);\n      } else if (ch == \"0\") {\n        if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);else stream.eatWhile(/[0-7]/);\n        return \"number\";\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n        return \"number\";\n      } else if (ch == \"?\") {\n        while (stream.match(/^\\\\[CM]-/)) {}\n\n        if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);else stream.next();\n        return \"string\";\n      } else if (ch == \":\") {\n        if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n        if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state); // :> :>> :< :<< are valid symbols\n\n        if (stream.eat(/[\\<\\>]/)) {\n          stream.eat(/[\\<\\>]/);\n          return \"atom\";\n        } // :+ :- :/ :* :| :& :! are valid symbols\n\n\n        if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n          return \"atom\";\n        } // Symbols can't start by a digit\n\n\n        if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n          stream.eatWhile(/[\\w$\\xa1-\\uffff]/); // Only one ? ! = is allowed and only as the last character\n\n          stream.eat(/[\\?\\!\\=]/);\n          return \"atom\";\n        }\n\n        return \"operator\";\n      } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n        stream.eat(\"@\");\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        return \"variable-2\";\n      } else if (ch == \"$\") {\n        if (stream.eat(/[a-zA-Z_]/)) {\n          stream.eatWhile(/[\\w]/);\n        } else if (stream.eat(/\\d/)) {\n          stream.eat(/\\d/);\n        } else {\n          stream.next(); // Must be a special global like $: or $!\n        }\n\n        return \"variable-3\";\n      } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        stream.eat(/[\\?\\!]/);\n        if (stream.eat(\":\")) return \"atom\";\n        return \"ident\";\n      } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n        curPunc = \"|\";\n        return null;\n      } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"-\" && stream.eat(\">\")) {\n        return \"arrow\";\n      } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n        var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n        if (ch == \".\" && !more) curPunc = \".\";\n        return \"operator\";\n      } else {\n        return null;\n      }\n    }\n\n    function regexpAhead(stream) {\n      var start = stream.pos,\n          depth = 0,\n          next,\n          found = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (\"[{(\".indexOf(next) > -1) {\n            depth++;\n          } else if (\"]})\".indexOf(next) > -1) {\n            depth--;\n            if (depth < 0) break;\n          } else if (next == \"/\" && depth == 0) {\n            found = true;\n            break;\n          }\n\n          escaped = next == \"\\\\\";\n        } else {\n          escaped = false;\n        }\n      }\n\n      stream.backUp(stream.pos - start);\n      return found;\n    }\n\n    function tokenBaseUntilBrace(depth) {\n      if (!depth) depth = 1;\n      return function (stream, state) {\n        if (stream.peek() == \"}\") {\n          if (depth == 1) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          } else {\n            state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n          }\n        } else if (stream.peek() == \"{\") {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n        }\n\n        return tokenBase(stream, state);\n      };\n    }\n\n    function tokenBaseOnce() {\n      var alreadyCalled = false;\n      return function (stream, state) {\n        if (alreadyCalled) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length - 1](stream, state);\n        }\n\n        alreadyCalled = true;\n        return tokenBase(stream, state);\n      };\n    }\n\n    function readQuoted(quote, style, embed, unescaped) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        if (state.context.type === 'read-quoted-paused') {\n          state.context = state.context.prev;\n          stream.eat(\"}\");\n        }\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && (unescaped || !escaped)) {\n            state.tokenize.pop();\n            break;\n          }\n\n          if (embed && ch == \"#\" && !escaped) {\n            if (stream.eat(\"{\")) {\n              if (quote == \"}\") {\n                state.context = {\n                  prev: state.context,\n                  type: 'read-quoted-paused'\n                };\n              }\n\n              state.tokenize.push(tokenBaseUntilBrace());\n              break;\n            } else if (/[@\\$]/.test(stream.peek())) {\n              state.tokenize.push(tokenBaseOnce());\n              break;\n            }\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return style;\n      };\n    }\n\n    function readHereDoc(phrase, mayIndent) {\n      return function (stream, state) {\n        if (mayIndent) stream.eatSpace();\n        if (stream.match(phrase)) state.tokenize.pop();else stream.skipToEnd();\n        return \"string\";\n      };\n    }\n\n    function readBlockComment(stream, state) {\n      if (stream.sol() && stream.match(\"=end\") && stream.eol()) state.tokenize.pop();\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: [tokenBase],\n          indented: 0,\n          context: {\n            type: \"top\",\n            indented: -config.indentUnit\n          },\n          continuedLine: false,\n          lastTok: null,\n          varList: false\n        };\n      },\n      token: function token(stream, state) {\n        curPunc = null;\n        if (stream.sol()) state.indented = stream.indentation();\n        var style = state.tokenize[state.tokenize.length - 1](stream, state),\n            kwtype;\n        var thisTok = curPunc;\n\n        if (style == \"ident\") {\n          var word = stream.current();\n          style = state.lastTok == \".\" ? \"property\" : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : /^[A-Z]/.test(word) ? \"tag\" : state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList ? \"def\" : \"variable\";\n\n          if (style == \"keyword\") {\n            thisTok = word;\n            if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation()) kwtype = \"indent\";else if (word == \"do\" && state.context.indented < state.indented) kwtype = \"indent\";\n          }\n        }\n\n        if (curPunc || style && style != \"comment\") state.lastTok = thisTok;\n        if (curPunc == \"|\") state.varList = !state.varList;\n        if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc)) state.context = {\n          prev: state.context,\n          type: curPunc || style,\n          indented: state.indented\n        };else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev) state.context = state.context.prev;\n        if (stream.eol()) state.continuedLine = curPunc == \"\\\\\" || style == \"operator\";\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize[state.tokenize.length - 1] != tokenBase) return CodeMirror.Pass;\n        var firstChar = textAfter && textAfter.charAt(0);\n        var ct = state.context;\n        var closed = ct.type == closing[firstChar] || ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n        return ct.indented + (closed ? 0 : config.indentUnit) + (state.continuedLine ? config.indentUnit : 0);\n      },\n      electricInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n  CodeMirror.registerHelper(\"hintWords\", \"ruby\", keywordList);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/ruby/ruby.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/ruby/ruby.js");
/******/ 	
/******/ })()
;