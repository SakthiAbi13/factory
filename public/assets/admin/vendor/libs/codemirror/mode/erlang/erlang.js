/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/erlang/erlang.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/erlang/erlang.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*jshint unused:true, eqnull:true, curly:true, bitwise:true */\n\n/*jshint undef:true, latedef:true, trailing:true */\n\n/*global CodeMirror:true */\n// erlang mode.\n// tokenizer -> token types -> CodeMirror styles\n// tokenizer maintains a parse stack\n// indenter uses the parse stack\n// TODO indenter:\n//   bit syntax\n//   old guard/bif/conversion clashes (e.g. \"float/1\")\n//   type/spec/opaque\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMIME(\"text/x-erlang\", \"erlang\");\n  CodeMirror.defineMode(\"erlang\", function (cmCfg) {\n    \"use strict\"; /////////////////////////////////////////////////////////////////////////////\n    // constants\n\n    var typeWords = [\"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n    var keywordWords = [\"after\", \"begin\", \"catch\", \"case\", \"cond\", \"end\", \"fun\", \"if\", \"let\", \"of\", \"query\", \"receive\", \"try\", \"when\"];\n    var separatorRE = /[\\->,;]/;\n    var separatorWords = [\"->\", \";\", \",\"];\n    var operatorAtomWords = [\"and\", \"andalso\", \"band\", \"bnot\", \"bor\", \"bsl\", \"bsr\", \"bxor\", \"div\", \"not\", \"or\", \"orelse\", \"rem\", \"xor\"];\n    var operatorSymbolRE = /[\\+\\-\\*\\/<>=\\|:!]/;\n    var operatorSymbolWords = [\"=\", \"+\", \"-\", \"*\", \"/\", \">\", \">=\", \"<\", \"=<\", \"=:=\", \"==\", \"=/=\", \"/=\", \"||\", \"<-\", \"!\"];\n    var openParenRE = /[<\\(\\[\\{]/;\n    var openParenWords = [\"<<\", \"(\", \"[\", \"{\"];\n    var closeParenRE = /[>\\)\\]\\}]/;\n    var closeParenWords = [\"}\", \"]\", \")\", \">>\"];\n    var guardWords = [\"is_atom\", \"is_binary\", \"is_bitstring\", \"is_boolean\", \"is_float\", \"is_function\", \"is_integer\", \"is_list\", \"is_number\", \"is_pid\", \"is_port\", \"is_record\", \"is_reference\", \"is_tuple\", \"atom\", \"binary\", \"bitstring\", \"boolean\", \"function\", \"integer\", \"list\", \"number\", \"pid\", \"port\", \"record\", \"reference\", \"tuple\"];\n    var bifWords = [\"abs\", \"adler32\", \"adler32_combine\", \"alive\", \"apply\", \"atom_to_binary\", \"atom_to_list\", \"binary_to_atom\", \"binary_to_existing_atom\", \"binary_to_list\", \"binary_to_term\", \"bit_size\", \"bitstring_to_list\", \"byte_size\", \"check_process_code\", \"contact_binary\", \"crc32\", \"crc32_combine\", \"date\", \"decode_packet\", \"delete_module\", \"disconnect_node\", \"element\", \"erase\", \"exit\", \"float\", \"float_to_list\", \"garbage_collect\", \"get\", \"get_keys\", \"group_leader\", \"halt\", \"hd\", \"integer_to_list\", \"internal_bif\", \"iolist_size\", \"iolist_to_binary\", \"is_alive\", \"is_atom\", \"is_binary\", \"is_bitstring\", \"is_boolean\", \"is_float\", \"is_function\", \"is_integer\", \"is_list\", \"is_number\", \"is_pid\", \"is_port\", \"is_process_alive\", \"is_record\", \"is_reference\", \"is_tuple\", \"length\", \"link\", \"list_to_atom\", \"list_to_binary\", \"list_to_bitstring\", \"list_to_existing_atom\", \"list_to_float\", \"list_to_integer\", \"list_to_pid\", \"list_to_tuple\", \"load_module\", \"make_ref\", \"module_loaded\", \"monitor_node\", \"node\", \"node_link\", \"node_unlink\", \"nodes\", \"notalive\", \"now\", \"open_port\", \"pid_to_list\", \"port_close\", \"port_command\", \"port_connect\", \"port_control\", \"pre_loaded\", \"process_flag\", \"process_info\", \"processes\", \"purge_module\", \"put\", \"register\", \"registered\", \"round\", \"self\", \"setelement\", \"size\", \"spawn\", \"spawn_link\", \"spawn_monitor\", \"spawn_opt\", \"split_binary\", \"statistics\", \"term_to_binary\", \"time\", \"throw\", \"tl\", \"trunc\", \"tuple_size\", \"tuple_to_list\", \"unlink\", \"unregister\", \"whereis\"]; // upper case: [A-Z] [Ø-Þ] [À-Ö]\n    // lower case: [a-z] [ß-ö] [ø-ÿ]\n\n    var anumRE = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\n    var escapesRE = /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/; /////////////////////////////////////////////////////////////////////////////\n    // tokenizer\n\n    function tokenizer(stream, state) {\n      // in multi-line string\n      if (state.in_string) {\n        state.in_string = !doubleQuote(stream);\n        return rval(state, stream, \"string\");\n      } // in multi-line atom\n\n\n      if (state.in_atom) {\n        state.in_atom = !singleQuote(stream);\n        return rval(state, stream, \"atom\");\n      } // whitespace\n\n\n      if (stream.eatSpace()) {\n        return rval(state, stream, \"whitespace\");\n      } // attributes and type specs\n\n\n      if (!peekToken(state) && stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n        if (is_member(stream.current(), typeWords)) {\n          return rval(state, stream, \"type\");\n        } else {\n          return rval(state, stream, \"attribute\");\n        }\n      }\n\n      var ch = stream.next(); // comment\n\n      if (ch == '%') {\n        stream.skipToEnd();\n        return rval(state, stream, \"comment\");\n      } // colon\n\n\n      if (ch == \":\") {\n        return rval(state, stream, \"colon\");\n      } // macro\n\n\n      if (ch == '?') {\n        stream.eatSpace();\n        stream.eatWhile(anumRE);\n        return rval(state, stream, \"macro\");\n      } // record\n\n\n      if (ch == \"#\") {\n        stream.eatSpace();\n        stream.eatWhile(anumRE);\n        return rval(state, stream, \"record\");\n      } // dollar escape\n\n\n      if (ch == \"$\") {\n        if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n          return rval(state, stream, \"error\");\n        }\n\n        return rval(state, stream, \"number\");\n      } // dot\n\n\n      if (ch == \".\") {\n        return rval(state, stream, \"dot\");\n      } // quoted atom\n\n\n      if (ch == '\\'') {\n        if (!(state.in_atom = !singleQuote(stream))) {\n          if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n            stream.match(/\\s*\\/\\s*[0-9]/, true);\n            return rval(state, stream, \"fun\"); // 'f'/0 style fun\n          }\n\n          if (stream.match(/\\s*\\(/, false) || stream.match(/\\s*:/, false)) {\n            return rval(state, stream, \"function\");\n          }\n        }\n\n        return rval(state, stream, \"atom\");\n      } // string\n\n\n      if (ch == '\"') {\n        state.in_string = !doubleQuote(stream);\n        return rval(state, stream, \"string\");\n      } // variable\n\n\n      if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n        stream.eatWhile(anumRE);\n        return rval(state, stream, \"variable\");\n      } // atom/keyword/BIF/function\n\n\n      if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n        stream.eatWhile(anumRE);\n\n        if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n          stream.match(/\\s*\\/\\s*[0-9]/, true);\n          return rval(state, stream, \"fun\"); // f/0 style fun\n        }\n\n        var w = stream.current();\n\n        if (is_member(w, keywordWords)) {\n          return rval(state, stream, \"keyword\");\n        } else if (is_member(w, operatorAtomWords)) {\n          return rval(state, stream, \"operator\");\n        } else if (stream.match(/\\s*\\(/, false)) {\n          // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n          if (is_member(w, bifWords) && (peekToken(state).token != \":\" || peekToken(state, 2).token == \"erlang\")) {\n            return rval(state, stream, \"builtin\");\n          } else if (is_member(w, guardWords)) {\n            return rval(state, stream, \"guard\");\n          } else {\n            return rval(state, stream, \"function\");\n          }\n        } else if (lookahead(stream) == \":\") {\n          if (w == \"erlang\") {\n            return rval(state, stream, \"builtin\");\n          } else {\n            return rval(state, stream, \"function\");\n          }\n        } else if (is_member(w, [\"true\", \"false\"])) {\n          return rval(state, stream, \"boolean\");\n        } else {\n          return rval(state, stream, \"atom\");\n        }\n      } // number\n\n\n      var digitRE = /[0-9]/;\n      var radixRE = /[0-9a-zA-Z]/; // 36#zZ style int\n\n      if (digitRE.test(ch)) {\n        stream.eatWhile(digitRE);\n\n        if (stream.eat('#')) {\n          // 36#aZ  style integer\n          if (!stream.eatWhile(radixRE)) {\n            stream.backUp(1); //\"36#\" - syntax error\n          }\n        } else if (stream.eat('.')) {\n          // float\n          if (!stream.eatWhile(digitRE)) {\n            stream.backUp(1); // \"3.\" - probably end of function\n          } else {\n            if (stream.eat(/[eE]/)) {\n              // float with exponent\n              if (stream.eat(/[-+]/)) {\n                if (!stream.eatWhile(digitRE)) {\n                  stream.backUp(2); // \"2e-\" - syntax error\n                }\n              } else {\n                if (!stream.eatWhile(digitRE)) {\n                  stream.backUp(1); // \"2e\" - syntax error\n                }\n              }\n            }\n          }\n        }\n\n        return rval(state, stream, \"number\"); // normal integer\n      } // open parens\n\n\n      if (nongreedy(stream, openParenRE, openParenWords)) {\n        return rval(state, stream, \"open_paren\");\n      } // close parens\n\n\n      if (nongreedy(stream, closeParenRE, closeParenWords)) {\n        return rval(state, stream, \"close_paren\");\n      } // separators\n\n\n      if (greedy(stream, separatorRE, separatorWords)) {\n        return rval(state, stream, \"separator\");\n      } // operators\n\n\n      if (greedy(stream, operatorSymbolRE, operatorSymbolWords)) {\n        return rval(state, stream, \"operator\");\n      }\n\n      return rval(state, stream, null);\n    } /////////////////////////////////////////////////////////////////////////////\n    // utilities\n\n\n    function nongreedy(stream, re, words) {\n      if (stream.current().length == 1 && re.test(stream.current())) {\n        stream.backUp(1);\n\n        while (re.test(stream.peek())) {\n          stream.next();\n\n          if (is_member(stream.current(), words)) {\n            return true;\n          }\n        }\n\n        stream.backUp(stream.current().length - 1);\n      }\n\n      return false;\n    }\n\n    function greedy(stream, re, words) {\n      if (stream.current().length == 1 && re.test(stream.current())) {\n        while (re.test(stream.peek())) {\n          stream.next();\n        }\n\n        while (0 < stream.current().length) {\n          if (is_member(stream.current(), words)) {\n            return true;\n          } else {\n            stream.backUp(1);\n          }\n        }\n\n        stream.next();\n      }\n\n      return false;\n    }\n\n    function doubleQuote(stream) {\n      return quote(stream, '\"', '\\\\');\n    }\n\n    function singleQuote(stream) {\n      return quote(stream, '\\'', '\\\\');\n    }\n\n    function quote(stream, quoteChar, escapeChar) {\n      while (!stream.eol()) {\n        var ch = stream.next();\n\n        if (ch == quoteChar) {\n          return true;\n        } else if (ch == escapeChar) {\n          stream.next();\n        }\n      }\n\n      return false;\n    }\n\n    function lookahead(stream) {\n      var m = stream.match(/^\\s*([^\\s%])/, false);\n      return m ? m[1] : \"\";\n    }\n\n    function is_member(element, list) {\n      return -1 < list.indexOf(element);\n    }\n\n    function rval(state, stream, type) {\n      // parse stack\n      pushToken(state, realToken(type, stream)); // map erlang token type to CodeMirror style class\n      //     erlang             -> CodeMirror tag\n\n      switch (type) {\n        case \"atom\":\n          return \"atom\";\n\n        case \"attribute\":\n          return \"attribute\";\n\n        case \"boolean\":\n          return \"atom\";\n\n        case \"builtin\":\n          return \"builtin\";\n\n        case \"close_paren\":\n          return null;\n\n        case \"colon\":\n          return null;\n\n        case \"comment\":\n          return \"comment\";\n\n        case \"dot\":\n          return null;\n\n        case \"error\":\n          return \"error\";\n\n        case \"fun\":\n          return \"meta\";\n\n        case \"function\":\n          return \"tag\";\n\n        case \"guard\":\n          return \"property\";\n\n        case \"keyword\":\n          return \"keyword\";\n\n        case \"macro\":\n          return \"variable-2\";\n\n        case \"number\":\n          return \"number\";\n\n        case \"open_paren\":\n          return null;\n\n        case \"operator\":\n          return \"operator\";\n\n        case \"record\":\n          return \"bracket\";\n\n        case \"separator\":\n          return null;\n\n        case \"string\":\n          return \"string\";\n\n        case \"type\":\n          return \"def\";\n\n        case \"variable\":\n          return \"variable\";\n\n        default:\n          return null;\n      }\n    }\n\n    function aToken(tok, col, ind, typ) {\n      return {\n        token: tok,\n        column: col,\n        indent: ind,\n        type: typ\n      };\n    }\n\n    function realToken(type, stream) {\n      return aToken(stream.current(), stream.column(), stream.indentation(), type);\n    }\n\n    function fakeToken(type) {\n      return aToken(type, 0, 0, type);\n    }\n\n    function peekToken(state, depth) {\n      var len = state.tokenStack.length;\n      var dep = depth ? depth : 1;\n\n      if (len < dep) {\n        return false;\n      } else {\n        return state.tokenStack[len - dep];\n      }\n    }\n\n    function pushToken(state, token) {\n      if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n        state.tokenStack = maybe_drop_pre(state.tokenStack, token);\n        state.tokenStack = maybe_drop_post(state.tokenStack);\n      }\n    }\n\n    function maybe_drop_pre(s, token) {\n      var last = s.length - 1;\n\n      if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n        s.pop();\n      } else if (0 < last && s[last].type === \"group\") {\n        s.pop();\n        s.push(token);\n      } else {\n        s.push(token);\n      }\n\n      return s;\n    }\n\n    function maybe_drop_post(s) {\n      if (!s.length) return s;\n      var last = s.length - 1;\n\n      if (s[last].type === \"dot\") {\n        return [];\n      }\n\n      if (last > 1 && s[last].type === \"fun\" && s[last - 1].token === \"fun\") {\n        return s.slice(0, last - 1);\n      }\n\n      switch (s[last].token) {\n        case \"}\":\n          return d(s, {\n            g: [\"{\"]\n          });\n\n        case \"]\":\n          return d(s, {\n            i: [\"[\"]\n          });\n\n        case \")\":\n          return d(s, {\n            i: [\"(\"]\n          });\n\n        case \">>\":\n          return d(s, {\n            i: [\"<<\"]\n          });\n\n        case \"end\":\n          return d(s, {\n            i: [\"begin\", \"case\", \"fun\", \"if\", \"receive\", \"try\"]\n          });\n\n        case \",\":\n          return d(s, {\n            e: [\"begin\", \"try\", \"when\", \"->\", \",\", \"(\", \"[\", \"{\", \"<<\"]\n          });\n\n        case \"->\":\n          return d(s, {\n            r: [\"when\"],\n            m: [\"try\", \"if\", \"case\", \"receive\"]\n          });\n\n        case \";\":\n          return d(s, {\n            E: [\"case\", \"fun\", \"if\", \"receive\", \"try\", \"when\"]\n          });\n\n        case \"catch\":\n          return d(s, {\n            e: [\"try\"]\n          });\n\n        case \"of\":\n          return d(s, {\n            e: [\"case\"]\n          });\n\n        case \"after\":\n          return d(s, {\n            e: [\"receive\", \"try\"]\n          });\n\n        default:\n          return s;\n      }\n    }\n\n    function d(stack, tt) {\n      // stack is a stack of Token objects.\n      // tt is an object; {type:tokens}\n      // type is a char, tokens is a list of token strings.\n      // The function returns (possibly truncated) stack.\n      // It will descend the stack, looking for a Token such that Token.token\n      //  is a member of tokens. If it does not find that, it will normally (but\n      //  see \"E\" below) return stack. If it does find a match, it will remove\n      //  all the Tokens between the top and the matched Token.\n      // If type is \"m\", that is all it does.\n      // If type is \"i\", it will also remove the matched Token and the top Token.\n      // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n      // If type is \"r\", it will remove the matched Token, but not the top Token.\n      // If type is \"e\", it will keep the matched Token but not the top Token.\n      // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n      //  in which case it will return an empty stack.\n      for (var type in tt) {\n        var len = stack.length - 1;\n        var tokens = tt[type];\n\n        for (var i = len - 1; -1 < i; i--) {\n          if (is_member(stack[i].token, tokens)) {\n            var ss = stack.slice(0, i);\n\n            switch (type) {\n              case \"m\":\n                return ss.concat(stack[i]).concat(stack[len]);\n\n              case \"r\":\n                return ss.concat(stack[len]);\n\n              case \"i\":\n                return ss;\n\n              case \"g\":\n                return ss.concat(fakeToken(\"group\"));\n\n              case \"E\":\n                return ss.concat(stack[i]);\n\n              case \"e\":\n                return ss.concat(stack[i]);\n            }\n          }\n        }\n      }\n\n      return type == \"E\" ? [] : stack;\n    } /////////////////////////////////////////////////////////////////////////////\n    // indenter\n\n\n    function indenter(state, textAfter) {\n      var t;\n      var unit = cmCfg.indentUnit;\n      var wordAfter = wordafter(textAfter);\n      var currT = peekToken(state, 1);\n      var prevT = peekToken(state, 2);\n\n      if (state.in_string || state.in_atom) {\n        return CodeMirror.Pass;\n      } else if (!prevT) {\n        return 0;\n      } else if (currT.token == \"when\") {\n        return currT.column + unit;\n      } else if (wordAfter === \"when\" && prevT.type === \"function\") {\n        return prevT.indent + unit;\n      } else if (wordAfter === \"(\" && currT.token === \"fun\") {\n        return currT.column + 3;\n      } else if (wordAfter === \"catch\" && (t = getToken(state, [\"try\"]))) {\n        return t.column;\n      } else if (is_member(wordAfter, [\"end\", \"after\", \"of\"])) {\n        t = getToken(state, [\"begin\", \"case\", \"fun\", \"if\", \"receive\", \"try\"]);\n        return t ? t.column : CodeMirror.Pass;\n      } else if (is_member(wordAfter, closeParenWords)) {\n        t = getToken(state, openParenWords);\n        return t ? t.column : CodeMirror.Pass;\n      } else if (is_member(currT.token, [\",\", \"|\", \"||\"]) || is_member(wordAfter, [\",\", \"|\", \"||\"])) {\n        t = postcommaToken(state);\n        return t ? t.column + t.token.length : unit;\n      } else if (currT.token == \"->\") {\n        if (is_member(prevT.token, [\"receive\", \"case\", \"if\", \"try\"])) {\n          return prevT.column + unit + unit;\n        } else {\n          return prevT.column + unit;\n        }\n      } else if (is_member(currT.token, openParenWords)) {\n        return currT.column + currT.token.length;\n      } else {\n        t = defaultToken(state);\n        return truthy(t) ? t.column + unit : 0;\n      }\n    }\n\n    function wordafter(str) {\n      var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n      return truthy(m) && m.index === 0 ? m[0] : \"\";\n    }\n\n    function postcommaToken(state) {\n      var objs = state.tokenStack.slice(0, -1);\n      var i = getTokenIndex(objs, \"type\", [\"open_paren\"]);\n      return truthy(objs[i]) ? objs[i] : false;\n    }\n\n    function defaultToken(state) {\n      var objs = state.tokenStack;\n      var stop = getTokenIndex(objs, \"type\", [\"open_paren\", \"separator\", \"keyword\"]);\n      var oper = getTokenIndex(objs, \"type\", [\"operator\"]);\n\n      if (truthy(stop) && truthy(oper) && stop < oper) {\n        return objs[stop + 1];\n      } else if (truthy(stop)) {\n        return objs[stop];\n      } else {\n        return false;\n      }\n    }\n\n    function getToken(state, tokens) {\n      var objs = state.tokenStack;\n      var i = getTokenIndex(objs, \"token\", tokens);\n      return truthy(objs[i]) ? objs[i] : false;\n    }\n\n    function getTokenIndex(objs, propname, propvals) {\n      for (var i = objs.length - 1; -1 < i; i--) {\n        if (is_member(objs[i][propname], propvals)) {\n          return i;\n        }\n      }\n\n      return false;\n    }\n\n    function truthy(x) {\n      return x !== false && x != null;\n    } /////////////////////////////////////////////////////////////////////////////\n    // this object defines the mode\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenStack: [],\n          in_string: false,\n          in_atom: false\n        };\n      },\n      token: function token(stream, state) {\n        return tokenizer(stream, state);\n      },\n      indent: function indent(state, textAfter) {\n        return indenter(state, textAfter);\n      },\n      lineComment: \"%\"\n    };\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/erlang/erlang.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/erlang/erlang.js");
/******/ 	
/******/ })()
;