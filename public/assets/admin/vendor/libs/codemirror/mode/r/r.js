/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/r/r.js":
/*!*************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/r/r.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.registerHelper(\"wordChars\", \"r\", /[\\w.]/);\n  CodeMirror.defineMode(\"r\", function (config) {\n    function wordObj(words) {\n      var res = {};\n\n      for (var i = 0; i < words.length; ++i) {\n        res[words[i]] = true;\n      }\n\n      return res;\n    }\n\n    var commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\n    var commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\n    var commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\n    var commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\n    CodeMirror.registerHelper(\"hintWords\", \"r\", commonAtoms.concat(commonBuiltins, commonKeywords));\n    var atoms = wordObj(commonAtoms);\n    var builtins = wordObj(commonBuiltins);\n    var keywords = wordObj(commonKeywords);\n    var blockkeywords = wordObj(commonBlockKeywords);\n    var opChars = /[+\\-*\\/^<>=!&|~$:]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      curPunc = null;\n      var ch = stream.next();\n\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == \"0\" && stream.eat(\"x\")) {\n        stream.eatWhile(/[\\da-f]/i);\n        return \"number\";\n      } else if (ch == \".\" && stream.eat(/\\d/)) {\n        stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n        return \"number\";\n      } else if (/\\d/.test(ch)) {\n        stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n        return \"number\";\n      } else if (ch == \"'\" || ch == '\"') {\n        state.tokenize = tokenString(ch);\n        return \"string\";\n      } else if (ch == \"`\") {\n        stream.match(/[^`]+`/);\n        return \"variable-3\";\n      } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) {\n        return \"keyword\";\n      } else if (/[a-zA-Z\\.]/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        var word = stream.current();\n        if (atoms.propertyIsEnumerable(word)) return \"atom\";\n\n        if (keywords.propertyIsEnumerable(word)) {\n          // Block keywords start new blocks, except 'else if', which only starts\n          // one new block for the 'if', no block for the 'else'.\n          if (blockkeywords.propertyIsEnumerable(word) && !stream.match(/\\s*if(\\s+|$)/, false)) curPunc = \"block\";\n          return \"keyword\";\n        }\n\n        if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n        return \"variable\";\n      } else if (ch == \"%\") {\n        if (stream.skipTo(\"%\")) stream.next();\n        return \"operator variable-2\";\n      } else if (ch == \"<\" && stream.eat(\"-\") || ch == \"<\" && stream.match(\"<-\") || ch == \"-\" && stream.match(/>>?/)) {\n        return \"operator arrow\";\n      } else if (ch == \"=\" && state.ctx.argList) {\n        return \"arg-is\";\n      } else if (opChars.test(ch)) {\n        if (ch == \"$\") return \"operator dollar\";\n        stream.eatWhile(opChars);\n        return \"operator\";\n      } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n        curPunc = ch;\n        if (ch == \";\") return \"semi\";\n        return null;\n      } else {\n        return null;\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        if (stream.eat(\"\\\\\")) {\n          var ch = stream.next();\n          if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n          return \"string-2\";\n        } else {\n          var next;\n\n          while ((next = stream.next()) != null) {\n            if (next == quote) {\n              state.tokenize = tokenBase;\n              break;\n            }\n\n            if (next == \"\\\\\") {\n              stream.backUp(1);\n              break;\n            }\n          }\n\n          return \"string\";\n        }\n      };\n    }\n\n    var ALIGN_YES = 1,\n        ALIGN_NO = 2,\n        BRACELESS = 4;\n\n    function push(state, type, stream) {\n      state.ctx = {\n        type: type,\n        indent: state.indent,\n        flags: 0,\n        column: stream.column(),\n        prev: state.ctx\n      };\n    }\n\n    function setFlag(state, flag) {\n      var ctx = state.ctx;\n      state.ctx = {\n        type: ctx.type,\n        indent: ctx.indent,\n        flags: ctx.flags | flag,\n        column: ctx.column,\n        prev: ctx.prev\n      };\n    }\n\n    function pop(state) {\n      state.indent = state.ctx.indent;\n      state.ctx = state.ctx.prev;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          ctx: {\n            type: \"top\",\n            indent: -config.indentUnit,\n            flags: ALIGN_NO\n          },\n          indent: 0,\n          afterIdent: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO;\n          if (state.ctx.flags & BRACELESS) pop(state);\n          state.indent = stream.indentation();\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES);\n        if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n        if (curPunc == \"{\") push(state, \"}\", stream);else if (curPunc == \"(\") {\n          push(state, \")\", stream);\n          if (state.afterIdent) state.ctx.argList = true;\n        } else if (curPunc == \"[\") push(state, \"]\", stream);else if (curPunc == \"block\") push(state, \"block\", stream);else if (curPunc == state.ctx.type) pop(state);else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS);\n        state.afterIdent = style == \"variable\" || style == \"keyword\";\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            ctx = state.ctx,\n            closing = firstChar == ctx.type;\n        if (ctx.flags & BRACELESS) ctx = ctx.prev;\n        if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : config.indentUnit);else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);else return ctx.indent + (closing ? 0 : config.indentUnit);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-rsrc\", \"r\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/r/r.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/r/r.js");
/******/ 	
/******/ })()
;