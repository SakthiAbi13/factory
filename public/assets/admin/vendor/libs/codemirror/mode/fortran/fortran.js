/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/fortran/fortran.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/fortran/fortran.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"fortran\", function () {\n    function words(array) {\n      var keys = {};\n\n      for (var i = 0; i < array.length; ++i) {\n        keys[array[i]] = true;\n      }\n\n      return keys;\n    }\n\n    var keywords = words([\"abstract\", \"accept\", \"allocatable\", \"allocate\", \"array\", \"assign\", \"asynchronous\", \"backspace\", \"bind\", \"block\", \"byte\", \"call\", \"case\", \"class\", \"close\", \"common\", \"contains\", \"continue\", \"cycle\", \"data\", \"deallocate\", \"decode\", \"deferred\", \"dimension\", \"do\", \"elemental\", \"else\", \"encode\", \"end\", \"endif\", \"entry\", \"enumerator\", \"equivalence\", \"exit\", \"external\", \"extrinsic\", \"final\", \"forall\", \"format\", \"function\", \"generic\", \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\", \"inquire\", \"intent\", \"interface\", \"intrinsic\", \"module\", \"namelist\", \"non_intrinsic\", \"non_overridable\", \"none\", \"nopass\", \"nullify\", \"open\", \"optional\", \"options\", \"parameter\", \"pass\", \"pause\", \"pointer\", \"print\", \"private\", \"program\", \"protected\", \"public\", \"pure\", \"read\", \"recursive\", \"result\", \"return\", \"rewind\", \"save\", \"select\", \"sequence\", \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\", \"use\", \"value\", \"volatile\", \"where\", \"while\", \"write\"]);\n    var builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\", \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\", \"all\", \"allocated\", \"alog\", \"amax\", \"amin\", \"amod\", \"and\", \"anint\", \"any\", \"asin\", \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\", \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\", \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\", \"clog\", \"cmplx\", \"command_argument_count\", \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\", \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\", \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\", \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\", \"c_alert\", \"c_backspace\", \"c_form_feed\", \"c_new_line\", \"c_carriage_return\", \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\", \"dacos\", \"dasin\", \"datan\", \"date_and_time\", \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\", \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\", \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\", \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\", \"dot_product\", \"dprod\", \"dsign\", \"dsinh\", \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\", \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\", \"exit\", \"exp\", \"exponent\", \"extends_type_of\", \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\", \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\", \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\", \"get_command\", \"get_command_argument\", \"get_environment_variable\", \"getcwd\", \"getenv\", \"getgid\", \"getlog\", \"getpid\", \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\", \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\", \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\", \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\", \"imagpart\", \"index\", \"int\", \"ior\", \"irand\", \"isatty\", \"ishft\", \"ishftc\", \"isign\", \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\", \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\", \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\", \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\", \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\", \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\", \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\", \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\", \"perror\", \"precision\", \"present\", \"product\", \"radix\", \"rand\", \"random_number\", \"random_seed\", \"range\", \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\", \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\", \"scan\", \"second\", \"selected_int_kind\", \"selected_real_kind\", \"set_exponent\", \"shape\", \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\", \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\", \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\", \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\", \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\", \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\", \"zlog\", \"zsin\", \"zsqrt\"]);\n    var dataTypes = words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\", \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\", \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\", \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\", \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\", \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\", \"c_intptr_t\", \"c_long\", \"c_long_double\", \"c_long_double_complex\", \"c_long_long\", \"c_ptr\", \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\", \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\n    var isOperatorChar = /[+\\-*&=<>\\/\\:]/;\n    var litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\n\n    function tokenBase(stream, state) {\n      if (stream.match(litOperator)) {\n        return 'operator';\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"!\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\),]/.test(ch)) {\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var word = stream.current().toLowerCase();\n\n      if (keywords.hasOwnProperty(word)) {\n        return 'keyword';\n      }\n\n      if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n        return 'builtin';\n      }\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n      };\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-fortran\", \"fortran\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/fortran/fortran.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/fortran/fortran.js");
/******/ 	
/******/ })()
;