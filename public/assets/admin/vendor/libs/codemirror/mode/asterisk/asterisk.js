/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/asterisk/asterisk.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/asterisk/asterisk.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n * =====================================================================================\n *\n *       Filename:  mode/asterisk/asterisk.js\n *\n *    Description:  CodeMirror mode for Asterisk dialplan\n *\n *        Created:  05/17/2012 09:20:25 PM\n *       Revision:  08/05/2019 AstLinux Project: Support block-comments\n *\n *         Author:  Stas Kobzar (stas@modulis.ca),\n *        Company:  Modulis.ca Inc.\n *\n * =====================================================================================\n */\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asterisk\", function () {\n    var atoms = [\"exten\", \"same\", \"include\", \"ignorepat\", \"switch\"],\n        dpcmd = [\"#include\", \"#exec\"],\n        apps = [\"addqueuemember\", \"adsiprog\", \"aelsub\", \"agentlogin\", \"agentmonitoroutgoing\", \"agi\", \"alarmreceiver\", \"amd\", \"answer\", \"authenticate\", \"background\", \"backgrounddetect\", \"bridge\", \"busy\", \"callcompletioncancel\", \"callcompletionrequest\", \"celgenuserevent\", \"changemonitor\", \"chanisavail\", \"channelredirect\", \"chanspy\", \"clearhash\", \"confbridge\", \"congestion\", \"continuewhile\", \"controlplayback\", \"dahdiacceptr2call\", \"dahdibarge\", \"dahdiras\", \"dahdiscan\", \"dahdisendcallreroutingfacility\", \"dahdisendkeypadfacility\", \"datetime\", \"dbdel\", \"dbdeltree\", \"deadagi\", \"dial\", \"dictate\", \"directory\", \"disa\", \"dumpchan\", \"eagi\", \"echo\", \"endwhile\", \"exec\", \"execif\", \"execiftime\", \"exitwhile\", \"extenspy\", \"externalivr\", \"festival\", \"flash\", \"followme\", \"forkcdr\", \"getcpeid\", \"gosub\", \"gosubif\", \"goto\", \"gotoif\", \"gotoiftime\", \"hangup\", \"iax2provision\", \"ices\", \"importvar\", \"incomplete\", \"ivrdemo\", \"jabberjoin\", \"jabberleave\", \"jabbersend\", \"jabbersendgroup\", \"jabberstatus\", \"jack\", \"log\", \"macro\", \"macroexclusive\", \"macroexit\", \"macroif\", \"mailboxexists\", \"meetme\", \"meetmeadmin\", \"meetmechanneladmin\", \"meetmecount\", \"milliwatt\", \"minivmaccmess\", \"minivmdelete\", \"minivmgreet\", \"minivmmwi\", \"minivmnotify\", \"minivmrecord\", \"mixmonitor\", \"monitor\", \"morsecode\", \"mp3player\", \"mset\", \"musiconhold\", \"nbscat\", \"nocdr\", \"noop\", \"odbc\", \"odbc\", \"odbcfinish\", \"originate\", \"ospauth\", \"ospfinish\", \"osplookup\", \"ospnext\", \"page\", \"park\", \"parkandannounce\", \"parkedcall\", \"pausemonitor\", \"pausequeuemember\", \"pickup\", \"pickupchan\", \"playback\", \"playtones\", \"privacymanager\", \"proceeding\", \"progress\", \"queue\", \"queuelog\", \"raiseexception\", \"read\", \"readexten\", \"readfile\", \"receivefax\", \"receivefax\", \"receivefax\", \"record\", \"removequeuemember\", \"resetcdr\", \"retrydial\", \"return\", \"ringing\", \"sayalpha\", \"saycountedadj\", \"saycountednoun\", \"saycountpl\", \"saydigits\", \"saynumber\", \"sayphonetic\", \"sayunixtime\", \"senddtmf\", \"sendfax\", \"sendfax\", \"sendfax\", \"sendimage\", \"sendtext\", \"sendurl\", \"set\", \"setamaflags\", \"setcallerpres\", \"setmusiconhold\", \"sipaddheader\", \"sipdtmfmode\", \"sipremoveheader\", \"skel\", \"slastation\", \"slatrunk\", \"sms\", \"softhangup\", \"speechactivategrammar\", \"speechbackground\", \"speechcreate\", \"speechdeactivategrammar\", \"speechdestroy\", \"speechloadgrammar\", \"speechprocessingsound\", \"speechstart\", \"speechunloadgrammar\", \"stackpop\", \"startmusiconhold\", \"stopmixmonitor\", \"stopmonitor\", \"stopmusiconhold\", \"stopplaytones\", \"system\", \"testclient\", \"testserver\", \"transfer\", \"tryexec\", \"trysystem\", \"unpausemonitor\", \"unpausequeuemember\", \"userevent\", \"verbose\", \"vmauthenticate\", \"vmsayname\", \"voicemail\", \"voicemailmain\", \"wait\", \"waitexten\", \"waitfornoise\", \"waitforring\", \"waitforsilence\", \"waitmusiconhold\", \"waituntil\", \"while\", \"zapateller\"];\n\n    function basicToken(stream, state) {\n      var cur = '';\n      var ch = stream.next(); // comment\n\n      if (state.blockComment) {\n        if (ch == \"-\" && stream.match(\"-;\", true)) {\n          state.blockComment = false;\n        } else if (stream.skipTo(\"--;\")) {\n          stream.next();\n          stream.next();\n          stream.next();\n          state.blockComment = false;\n        } else {\n          stream.skipToEnd();\n        }\n\n        return \"comment\";\n      }\n\n      if (ch == \";\") {\n        if (stream.match(\"--\", true)) {\n          if (!stream.match(\"-\", false)) {\n            // Except ;--- is not a block comment\n            state.blockComment = true;\n            return \"comment\";\n          }\n        }\n\n        stream.skipToEnd();\n        return \"comment\";\n      } // context\n\n\n      if (ch == '[') {\n        stream.skipTo(']');\n        stream.eat(']');\n        return \"header\";\n      } // string\n\n\n      if (ch == '\"') {\n        stream.skipTo('\"');\n        return \"string\";\n      }\n\n      if (ch == \"'\") {\n        stream.skipTo(\"'\");\n        return \"string-2\";\n      } // dialplan commands\n\n\n      if (ch == '#') {\n        stream.eatWhile(/\\w/);\n        cur = stream.current();\n\n        if (dpcmd.indexOf(cur) !== -1) {\n          stream.skipToEnd();\n          return \"strong\";\n        }\n      } // application args\n\n\n      if (ch == '$') {\n        var ch1 = stream.peek();\n\n        if (ch1 == '{') {\n          stream.skipTo('}');\n          stream.eat('}');\n          return \"variable-3\";\n        }\n      } // extension\n\n\n      stream.eatWhile(/\\w/);\n      cur = stream.current();\n\n      if (atoms.indexOf(cur) !== -1) {\n        state.extenStart = true;\n\n        switch (cur) {\n          case 'same':\n            state.extenSame = true;\n            break;\n\n          case 'include':\n          case 'switch':\n          case 'ignorepat':\n            state.extenInclude = true;\n            break;\n\n          default:\n            break;\n        }\n\n        return \"atom\";\n      }\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          blockComment: false,\n          extenStart: false,\n          extenSame: false,\n          extenInclude: false,\n          extenExten: false,\n          extenPriority: false,\n          extenApplication: false\n        };\n      },\n      token: function token(stream, state) {\n        var cur = '';\n        if (stream.eatSpace()) return null; // extension started\n\n        if (state.extenStart) {\n          stream.eatWhile(/[^\\s]/);\n          cur = stream.current();\n\n          if (/^=>?$/.test(cur)) {\n            state.extenExten = true;\n            state.extenStart = false;\n            return \"strong\";\n          } else {\n            state.extenStart = false;\n            stream.skipToEnd();\n            return \"error\";\n          }\n        } else if (state.extenExten) {\n          // set exten and priority\n          state.extenExten = false;\n          state.extenPriority = true;\n          stream.eatWhile(/[^,]/);\n\n          if (state.extenInclude) {\n            stream.skipToEnd();\n            state.extenPriority = false;\n            state.extenInclude = false;\n          }\n\n          if (state.extenSame) {\n            state.extenPriority = false;\n            state.extenSame = false;\n            state.extenApplication = true;\n          }\n\n          return \"tag\";\n        } else if (state.extenPriority) {\n          state.extenPriority = false;\n          state.extenApplication = true;\n          stream.next(); // get comma\n\n          if (state.extenSame) return null;\n          stream.eatWhile(/[^,]/);\n          return \"number\";\n        } else if (state.extenApplication) {\n          stream.eatWhile(/,/);\n          cur = stream.current();\n          if (cur === ',') return null;\n          stream.eatWhile(/\\w/);\n          cur = stream.current().toLowerCase();\n          state.extenApplication = false;\n\n          if (apps.indexOf(cur) !== -1) {\n            return \"def strong\";\n          }\n        } else {\n          return basicToken(stream, state);\n        }\n\n        return null;\n      },\n      blockCommentStart: \";--\",\n      blockCommentEnd: \"--;\",\n      lineComment: \";\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-asterisk\", \"asterisk\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS9hc3Rlcmlzay9hc3Rlcmlzay5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLENBQUMsVUFBU0EsR0FBVCxFQUFjO0VBQ2IsSUFBSSxzQkFBT0MsT0FBUCxNQUFrQixRQUFsQixJQUE4QixzQkFBT0MsTUFBUCxNQUFpQixRQUFuRCxFQUE2RDtJQUMzREYsR0FBRyxDQUFDRyxtQkFBTyxDQUFDLG1KQUFELENBQVIsQ0FBSCxDQURGLEtBRUssSUFBSSxJQUFKLEVBQStDO0lBQ2xEQyxpQ0FBTyxDQUFDLG1KQUFELENBQUQsb0NBQTJCSixHQUEzQjtBQUFBO0FBQUE7QUFBQSxrR0FBTixDQURHLEtBRUE7SUFDSEEsRUFBQTtBQUNILENBUEQsRUFPRyxVQUFTTSxVQUFULEVBQXFCO0VBQ3hCOztFQUVBQSxVQUFVLENBQUNDLFVBQVgsQ0FBc0IsVUFBdEIsRUFBa0MsWUFBVztJQUMzQyxJQUFJQyxLQUFLLEdBQU0sQ0FBQyxPQUFELEVBQVUsTUFBVixFQUFrQixTQUFsQixFQUE0QixXQUE1QixFQUF3QyxRQUF4QyxDQUFmO0lBQUEsSUFDSUMsS0FBSyxHQUFNLENBQUMsVUFBRCxFQUFZLE9BQVosQ0FEZjtJQUFBLElBRUlDLElBQUksR0FBTyxDQUNDLGdCQURELEVBQ2tCLFVBRGxCLEVBQzZCLFFBRDdCLEVBQ3NDLFlBRHRDLEVBQ21ELHNCQURuRCxFQUMwRSxLQUQxRSxFQUVDLGVBRkQsRUFFaUIsS0FGakIsRUFFdUIsUUFGdkIsRUFFZ0MsY0FGaEMsRUFFK0MsWUFGL0MsRUFFNEQsa0JBRjVELEVBR0MsUUFIRCxFQUdVLE1BSFYsRUFHaUIsc0JBSGpCLEVBR3dDLHVCQUh4QyxFQUdnRSxpQkFIaEUsRUFJQyxlQUpELEVBSWlCLGFB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LENBQUNtQixhQUFOLEdBQXNCLEtBQXRCO1VBQ0FuQixLQUFLLENBQUNvQixnQkFBTixHQUF5QixJQUF6QjtVQUNBckIsTUFBTSxDQUFDSSxJQUFQLEdBSDZCLENBR2Q7O1VBQ2YsSUFBR0gsS0FBSyxDQUFDZSxTQUFULEVBQW9CLE9BQU8sSUFBUDtVQUNwQmhCLE1BQU0sQ0FBQ1UsUUFBUCxDQUFnQixNQUFoQjtVQUNBLE9BQU8sUUFBUDtRQUNELENBUE0sTUFPQSxJQUFHVCxLQUFLLENBQUNvQixnQkFBVCxFQUEyQjtVQUNoQ3JCLE1BQU0sQ0FBQ1UsUUFBUCxDQUFnQixHQUFoQjtVQUNBUixHQUFHLEdBQUdGLE1BQU0sQ0FBQ1csT0FBUCxFQUFOO1VBQ0EsSUFBR1QsR0FBRyxLQUFLLEdBQVgsRUFBZ0IsT0FBTyxJQUFQO1VBQ2hCRixNQUFNLENBQUNVLFFBQVAsQ0FBZ0IsSUFBaEI7VUFDQVIsR0FBRyxHQUFHRixNQUFNLENBQUNXLE9BQVAsR0FBaUJjLFdBQWpCLEVBQU47VUFDQXhCLEtBQUssQ0FBQ29CLGdCQUFOLEdBQXlCLEtBQXpCOztVQUNBLElBQUd2QixJQUFJLENBQUNjLE9BQUwsQ0FBYVYsR0FBYixNQUFzQixDQUFDLENBQTFCLEVBQTRCO1lBQzFCLE9BQU8sWUFBUDtVQUNEO1FBQ0YsQ0FWTSxNQVVEO1VBQ0osT0FBT0gsVUFBVSxDQUFDQyxNQUFELEVBQVFDLEtBQVIsQ0FBakI7UUFDRDs7UUFFRCxPQUFPLElBQVA7TUFDRCxDQW5FSTtNQXFFTHlCLGlCQUFpQixFQUFFLEtBckVkO01Bc0VMQyxlQUFlLEVBQUUsS0F0RVo7TUF1RUxDLFdBQVcsRUFBRTtJQXZFUixDQUFQO0VBeUVELENBMUxEO0VBNExBbEMsVUFBVSxDQUFDbUMsVUFBWCxDQUFzQixpQkFBdEIsRUFBeUMsVUFBekM7QUFFQyxDQXhNRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvdmVuZG9yL2xpYnMvY29kZW1pcnJvci9tb2RlL2FzdGVyaXNrL2FzdGVyaXNrLmpzPzFkMTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnNcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuLypcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiAgICAgICBGaWxlbmFtZTogIG1vZGUvYXN0ZXJpc2svYXN0ZXJpc2suanNcbiAqXG4gKiAgICBEZXNjcmlwdGlvbjogIENvZGVNaXJyb3IgbW9kZSBmb3IgQXN0ZXJpc2sgZGlhbHBsYW5cbiAqXG4gKiAgICAgICAgQ3JlYXRlZDogIDA1LzE3LzIwMTIgMDk6MjA6MjUgUE1cbiAqICAgICAgIFJldmlzaW9uOiAgMDgvMDUvMjAxOSBBc3RMaW51eCBQcm9qZWN0OiBTdXBwb3J0IGJsb2NrLWNvbW1lbnRzXG4gKlxuICogICAgICAgICBBdXRob3I6ICBTdGFzIEtvYnphciAoc3Rhc0Btb2R1bGlzLmNhKSxcbiAqICAgICAgICBDb21wYW55OiAgTW9kdWxpcy5jYSBJbmMuXG4gKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vLi4vbGliL2NvZGVtaXJyb3JcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwiYXN0ZXJpc2tcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciBhdG9tcyAgICA9IFtcImV4dGVuXCIsIFwic2FtZVwiLCBcImluY2x1ZGVcIixcImlnbm9yZXBhdFwiLFwic3dpdGNoXCJdLFxuICAgICAgZHBjbWQgICAgPSBbXCIjaW5jbHVkZVwiLFwiI2V4ZWNcIl0sXG4gICAgICBhcHBzICAgICA9IFtcbiAgICAgICAgICAgICAgICAgIFwiYWRkcXVldWVtZW1iZXJcIixcImFkc2lwcm9nXCIsXCJhZWxzdWJcIixcImFnZW50bG9naW5cIixcImFnZW50bW9uaXRvcm91dGdvaW5nXCIsXCJhZ2lcIixcbiAgICAgICAgICAgICAgICAgIFwiYWxhcm1yZWNlaXZlclwiLFwiYW1kXCIsXCJhbnN3ZXJcIixcImF1dGhlbnRpY2F0ZVwiLFwiYmFja2dyb3VuZFwiLFwiYmFja2dyb3VuZGRldGVjdFwiLFxuICAgICAgICAgICAgICAgICAgXCJicmlkZ2VcIixcImJ1c3lcIixcImNhbGxjb21wbGV0aW9uY2FuY2VsXCIsXCJjYWxsY29tcGxldGlvbnJlcXVlc3RcIixcImNlbGdlbnVzZXJldmVudFwiLFxuICAgICAgICAgICAgICAgICAgXCJjaGFuZ2Vtb25pdG9yXCIsXCJjaGFuaXNhdmFpbFwiLFwiY2hhbm5lbHJlZGlyZWN0XCIsXCJjaGFuc3B5XCIsXCJjbGVhcmhhc2hcIixcImNvbmZicmlkZ2VcIixcbiAgICAgICAgICAgICAgICAgIFwiY29uZ2VzdGlvblwiLFwiY29udGludWV3aGlsZVwiLFwiY29udHJvbHBsYXliYWNrXCIsXCJkYWhkaWFjY2VwdHIyY2FsbFwiLFwiZGFoZGliYXJnZVwiLFxuICAgICAgICAgICAgICAgICAgXCJkYWhkaXJhc1wiLFwiZGFoZGlzY2FuXCIsXCJkYWhkaXNlbmRjYWxscmVyb3V0aW5nZmFjaWxpdHlcIixcImRhaGRpc2VuZGtleXBhZGZhY2lsaXR5XCIsXG4gICAgICAgICAgICAgICAgICBcImRhdGV0aW1lXCIsXCJkYmRlbFwiLFwiZGJkZWx0cmVlXCIsXCJkZWFkYWdpXCIsXCJkaWFsXCIsXCJkaWN0YXRlXCIsXCJkaXJlY3RvcnlcIixcImRpc2FcIixcbiAgICAgICAgICAgICAgICAgIFwiZHVtcGNoYW5cIixcImVhZ2lcIixcImVjaG9cIixcImVuZHdoaWxlXCIsXCJleGVjXCIsXCJleGVjaWZcIixcImV4ZWNpZnRpbWVcIixcImV4aXR3aGlsZVwiLFwiZXh0ZW5zcHlcIixcbiAgICAgICAgICAgICAgICAgIFwiZXh0ZXJuYWxpdnJcIixcImZlc3RpdmFsXCIsXCJmbGFzaFwiLFwiZm9sbG93bWVcIixcImZvcmtjZHJcIixcImdldGNwZWlkXCIsXCJnb3N1YlwiLFwiZ29zdWJpZlwiLFxuICAgICAgICAgICAgICAgICAgXCJnb3RvXCIsXCJnb3RvaWZcIixcImdvdG9pZnRpbWVcIixcImhhbmd1cFwiLFwiaWF4MnByb3Zpc2lvblwiLFwiaWNlc1wiLFwiaW1wb3J0dmFyXCIsXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgICAgICAgICAgICBcIml2cmRlbW9cIixcImphYmJlcmpvaW5cIixcImphYmJlcmxlYXZlXCIsXCJqYWJiZXJzZW5kXCIsXCJqYWJiZXJzZW5kZ3JvdXBcIixcImphYmJlcnN0YXR1c1wiLFxuICAgICAgICAgICAgICAgICAgXCJqYWNrXCIsXCJsb2dcIixcIm1hY3JvXCIsXCJtYWNyb2V4Y2x1c2l2ZVwiLFwibWFjcm9leGl0XCIsXCJtYWNyb2lmXCIsXCJtYWlsYm94ZXhpc3RzXCIsXCJtZWV0bWVcIixcbiAgICAgICAgICAgICAgICAgIFwibWVldG1lYWRtaW5cIixcIm1lZXRtZWNoYW5uZWxhZG1pblwiLFwibWVldG1lY291bnRcIixcIm1pbGxpd2F0dFwiLFwibWluaXZtYWNjbWVzc1wiLFwibWluaXZtZGVsZXRlXCIsXG4gICAgICAgICAgICAgICAgICBcIm1pbml2bWdyZWV0XCIsXCJtaW5pdm1td2lcIixcIm1pbml2bW5vdGlmeVwiLFwibWluaXZtcmVjb3JkXCIsXCJtaXhtb25pdG9yXCIsXCJtb25pdG9yXCIsXCJtb3JzZWNvZGVcIixcbiAgICAgICAgICAgICAgICAgIFwibXAzcGxheWVyXCIsXCJtc2V0XCIsXCJtdXNpY29uaG9sZFwiLFwibmJzY2F0XCIsXCJub2NkclwiLFwibm9vcFwiLFwib2RiY1wiLFwib2RiY1wiLFwib2RiY2ZpbmlzaFwiLFxuICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hdGVcIixcIm9zcGF1dGhcIixcIm9zcGZpbmlzaFwiLFwib3NwbG9va3VwXCIsXCJvc3BuZXh0XCIsXCJwYWdlXCIsXCJwYXJrXCIsXCJwYXJrYW5kYW5ub3VuY2VcIixcbiAgICAgICAgICAgICAgICAgIFwicGFya2VkY2FsbFwiLFwicGF1c2Vtb25pdG9yXCIsXCJwYXVzZXF1ZXVlbWVtYmVyXCIsXCJwaWNrdXBcIixcInBpY2t1cGNoYW5cIixcInBsYXliYWNrXCIsXCJwbGF5dG9uZXNcIixcbiAgICAgICAgICAgICAgICAgIFwicHJpdmFjeW1hbmFnZXJcIixcInByb2NlZWRpbmdcIixcInByb2dyZXNzXCIsXCJxdWV1ZVwiLFwicXVldWVsb2dcIixcInJhaXNlZXhjZXB0aW9uXCIsXCJyZWFkXCIsXCJyZWFkZXh0ZW5cIixcbiAgICAgICAgICAgICAgICAgIFwicmVhZGZpbGVcIixcInJlY2VpdmVmYXhcIixcInJlY2VpdmVmYXhcIixcInJlY2VpdmVmYXhcIixcInJlY29yZFwiLFwicmVtb3ZlcXVldWVtZW1iZXJcIixcbiAgICAgICAgICAgICAgICAgIFwicmVzZXRjZHJcIixcInJldHJ5ZGlhbFwiLFwicmV0dXJuXCIsXCJyaW5naW5nXCIsXCJzYXlhbHBoYVwiLFwic2F5Y291bnRlZGFkalwiLFwic2F5Y291bnRlZG5vdW5cIixcbiAgICAgICAgICAgICAgICAgIFwic2F5Y291bnRwbFwiLFwic2F5ZGlnaXRzXCIsXCJzYXludW1iZXJcIixcInNheXBob25ldGljXCIsXCJzYXl1bml4dGltZVwiLFwic2VuZGR0bWZcIixcInNlbmRmYXhcIixcbiAgICAgICAgICAgICAgICAgIFwic2VuZGZheFwiLFwic2VuZGZheFwiLFwic2VuZGltYWdlXCIsXCJzZW5kdGV4dFwiLFwic2VuZHVybFwiLFwic2V0XCIsXCJzZXRhbWFmbGFnc1wiLFxuICAgICAgICAgICAgICAgICAgXCJzZXRjYWxsZXJwcmVzXCIsXCJzZXRtdXNpY29uaG9sZFwiLFwic2lwYWRkaGVhZGVyXCIsXCJzaXBkdG1mbW9kZVwiLFwic2lwcmVtb3ZlaGVhZGVyXCIsXCJza2VsXCIsXG4gICAgICAgICAgICAgICAgICBcInNsYXN0YXRpb25cIixcInNsYXRydW5rXCIsXCJzbXNcIixcInNvZnRoYW5ndXBcIixcInNwZWVjaGFjdGl2YXRlZ3JhbW1hclwiLFwic3BlZWNoYmFja2dyb3VuZFwiLFxuICAgICAgICAgICAgICAgICAgXCJzcGVlY2hjcmVhdGVcIixcInNwZWVjaGRlYWN0aXZhdGVncmFtbWFyXCIsXCJzcGVlY2hkZXN0cm95XCIsXCJzcGVlY2hsb2FkZ3JhbW1hclwiLFwic3BlZWNocHJvY2Vzc2luZ3NvdW5kXCIsXG4gICAgICAgICAgICAgICAgICBcInNwZWVjaHN0YXJ0XCIsXCJzcGVlY2h1bmxvYWRncmFtbWFyXCIsXCJzdGFja3BvcFwiLFwic3RhcnRtdXNpY29uaG9sZFwiLFwic3RvcG1peG1vbml0b3JcIixcInN0b3Btb25pdG9yXCIsXG4gICAgICAgICAgICAgICAgICBcInN0b3BtdXNpY29uaG9sZFwiLFwic3RvcHBsYXl0b25lc1wiLFwic3lzdGVtXCIsXCJ0ZXN0Y2xpZW50XCIsXCJ0ZXN0c2VydmVyXCIsXCJ0cmFuc2ZlclwiLFwidHJ5ZXhlY1wiLFxuICAgICAgICAgICAgICAgICAgXCJ0cnlzeXN0ZW1cIixcInVucGF1c2Vtb25pdG9yXCIsXCJ1bnBhdXNlcXVldWVtZW1iZXJcIixcInVzZXJldmVudFwiLFwidmVyYm9zZVwiLFwidm1hdXRoZW50aWNhdGVcIixcbiAgICAgICAgICAgICAgICAgIFwidm1zYXluYW1lXCIsXCJ2b2ljZW1haWxcIixcInZvaWNlbWFpbG1haW5cIixcIndhaXRcIixcIndhaXRleHRlblwiLFwid2FpdGZvcm5vaXNlXCIsXCJ3YWl0Zm9ycmluZ1wiLFxuICAgICAgICAgICAgICAgICAgXCJ3YWl0Zm9yc2lsZW5jZVwiLFwid2FpdG11c2ljb25ob2xkXCIsXCJ3YWl0dW50aWxcIixcIndoaWxlXCIsXCJ6YXBhdGVsbGVyXCJcbiAgICAgICAgICAgICAgICAgXTtcblxuICBmdW5jdGlvbiBiYXNpY1Rva2VuKHN0cmVhbSxzdGF0ZSl7XG4gICAgdmFyIGN1ciA9ICcnO1xuICAgIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG4gICAgLy8gY29tbWVudFxuICAgIGlmIChzdGF0ZS5ibG9ja0NvbW1lbnQpIHtcbiAgICAgIGlmIChjaCA9PSBcIi1cIiAmJiBzdHJlYW0ubWF0Y2goXCItO1wiLCB0cnVlKSkge1xuICAgICAgICBzdGF0ZS5ibG9ja0NvbW1lbnQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLnNraXBUbyhcIi0tO1wiKSkge1xuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICBzdGF0ZS5ibG9ja0NvbW1lbnQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICB9XG4gICAgaWYoY2ggPT0gXCI7XCIpIHtcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goXCItLVwiLCB0cnVlKSkge1xuICAgICAgICBpZiAoIXN0cmVhbS5tYXRjaChcIi1cIiwgZmFsc2UpKSB7ICAvLyBFeGNlcHQgOy0tLSBpcyBub3QgYSBibG9jayBjb21tZW50XG4gICAgICAgICAgc3RhdGUuYmxvY2tDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICB9XG4gICAgLy8gY29udGV4dFxuICAgIGlmKGNoID09ICdbJykge1xuICAgICAgc3RyZWFtLnNraXBUbygnXScpO1xuICAgICAgc3RyZWFtLmVhdCgnXScpO1xuICAgICAgcmV0dXJuIFwiaGVhZGVyXCI7XG4gICAgfVxuICAgIC8vIHN0cmluZ1xuICAgIGlmKGNoID09ICdcIicpIHtcbiAgICAgIHN0cmVhbS5za2lwVG8oJ1wiJyk7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICB9XG4gICAgaWYoY2ggPT0gXCInXCIpIHtcbiAgICAgIHN0cmVhbS5za2lwVG8oXCInXCIpO1xuICAgICAgcmV0dXJuIFwic3RyaW5nLTJcIjtcbiAgICB9XG4gICAgLy8gZGlhbHBsYW4gY29tbWFuZHNcbiAgICBpZihjaCA9PSAnIycpIHtcbiAgICAgIHN0cmVhbS5lYXRXaGlsZSgvXFx3Lyk7XG4gICAgICBjdXIgPSBzdHJlYW0uY3VycmVudCgpO1xuICAgICAgaWYoZHBjbWQuaW5kZXhPZihjdXIpICE9PSAtMSkge1xuICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcInN0cm9uZ1wiO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBhcHBsaWNhdGlvbiBhcmdzXG4gICAgaWYoY2ggPT0gJyQnKXtcbiAgICAgIHZhciBjaDEgPSBzdHJlYW0ucGVlaygpO1xuICAgICAgaWYoY2gxID09ICd7Jyl7XG4gICAgICAgIHN0cmVhbS5za2lwVG8oJ30nKTtcbiAgICAgICAgc3RyZWFtLmVhdCgnfScpO1xuICAgICAgICByZXR1cm4gXCJ2YXJpYWJsZS0zXCI7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGV4dGVuc2lvblxuICAgIHN0cmVhbS5lYXRXaGlsZSgvXFx3Lyk7XG4gICAgY3VyID0gc3RyZWFtLmN1cnJlbnQoKTtcbiAgICBpZihhdG9tcy5pbmRleE9mKGN1cikgIT09IC0xKSB7XG4gICAgICBzdGF0ZS5leHRlblN0YXJ0ID0gdHJ1ZTtcbiAgICAgIHN3aXRjaChjdXIpIHtcbiAgICAgICAgY2FzZSAnc2FtZSc6IHN0YXRlLmV4dGVuU2FtZSA9IHRydWU7IGJyZWFrO1xuICAgICAgICBjYXNlICdpbmNsdWRlJzpcbiAgICAgICAgY2FzZSAnc3dpdGNoJzpcbiAgICAgICAgY2FzZSAnaWdub3JlcGF0JzpcbiAgICAgICAgICBzdGF0ZS5leHRlbkluY2x1ZGUgPSB0cnVlO2JyZWFrO1xuICAgICAgICBkZWZhdWx0OmJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBibG9ja0NvbW1lbnQ6IGZhbHNlLFxuICAgICAgICBleHRlblN0YXJ0OiBmYWxzZSxcbiAgICAgICAgZXh0ZW5TYW1lOiAgZmFsc2UsXG4gICAgICAgIGV4dGVuSW5jbHVkZTogZmFsc2UsXG4gICAgICAgIGV4dGVuRXh0ZW46IGZhbHNlLFxuICAgICAgICBleHRlblByaW9yaXR5OiBmYWxzZSxcbiAgICAgICAgZXh0ZW5BcHBsaWNhdGlvbjogZmFsc2VcbiAgICAgIH07XG4gICAgfSxcbiAgICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuXG4gICAgICB2YXIgY3VyID0gJyc7XG4gICAgICBpZihzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7XG4gICAgICAvLyBleHRlbnNpb24gc3RhcnRlZFxuICAgICAgaWYoc3RhdGUuZXh0ZW5TdGFydCl7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW15cXHNdLyk7XG4gICAgICAgIGN1ciA9IHN0cmVhbS5jdXJyZW50KCk7XG4gICAgICAgIGlmKC9ePT4/JC8udGVzdChjdXIpKXtcbiAgICAgICAgICBzdGF0ZS5leHRlbkV4dGVuID0gdHJ1ZTtcbiAgICAgICAgICBzdGF0ZS5leHRlblN0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIFwic3Ryb25nXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUuZXh0ZW5TdGFydCA9IGZhbHNlO1xuICAgICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYoc3RhdGUuZXh0ZW5FeHRlbikge1xuICAgICAgICAvLyBzZXQgZXh0ZW4gYW5kIHByaW9yaXR5XG4gICAgICAgIHN0YXRlLmV4dGVuRXh0ZW4gPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuZXh0ZW5Qcmlvcml0eSA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW14sXS8pO1xuICAgICAgICBpZihzdGF0ZS5leHRlbkluY2x1ZGUpIHtcbiAgICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgICAgc3RhdGUuZXh0ZW5Qcmlvcml0eSA9IGZhbHNlO1xuICAgICAgICAgIHN0YXRlLmV4dGVuSW5jbHVkZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmKHN0YXRlLmV4dGVuU2FtZSkge1xuICAgICAgICAgIHN0YXRlLmV4dGVuUHJpb3JpdHkgPSBmYWxzZTtcbiAgICAgICAgICBzdGF0ZS5leHRlblNhbWUgPSBmYWxzZTtcbiAgICAgICAgICBzdGF0ZS5leHRlbkFwcGxpY2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJ0YWdcIjtcbiAgICAgIH0gZWxzZSBpZihzdGF0ZS5leHRlblByaW9yaXR5KSB7XG4gICAgICAgIHN0YXRlLmV4dGVuUHJpb3JpdHkgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuZXh0ZW5BcHBsaWNhdGlvbiA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7IC8vIGdldCBjb21tYVxuICAgICAgICBpZihzdGF0ZS5leHRlblNhbWUpIHJldHVybiBudWxsO1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1teLF0vKTtcbiAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICB9IGVsc2UgaWYoc3RhdGUuZXh0ZW5BcHBsaWNhdGlvbikge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoLywvKTtcbiAgICAgICAgY3VyID0gc3RyZWFtLmN1cnJlbnQoKTtcbiAgICAgICAgaWYoY3VyID09PSAnLCcpIHJldHVybiBudWxsO1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1xcdy8pO1xuICAgICAgICBjdXIgPSBzdHJlYW0uY3VycmVudCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHN0YXRlLmV4dGVuQXBwbGljYXRpb24gPSBmYWxzZTtcbiAgICAgICAgaWYoYXBwcy5pbmRleE9mKGN1cikgIT09IC0xKXtcbiAgICAgICAgICByZXR1cm4gXCJkZWYgc3Ryb25nXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZXtcbiAgICAgICAgcmV0dXJuIGJhc2ljVG9rZW4oc3RyZWFtLHN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIGJsb2NrQ29tbWVudFN0YXJ0OiBcIjstLVwiLFxuICAgIGJsb2NrQ29tbWVudEVuZDogXCItLTtcIixcbiAgICBsaW5lQ29tbWVudDogXCI7XCJcbiAgfTtcbn0pO1xuXG5Db2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3gtYXN0ZXJpc2tcIiwgXCJhc3Rlcmlza1wiKTtcblxufSk7XG4iXSwibmFtZXMiOlsibW9kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJDb2RlTWlycm9yIiwiZGVmaW5lTW9kZSIsImF0b21zIiwiZHBjbWQiLCJhcHBzIiwiYmFzaWNUb2tlbiIsInN0cmVhbSIsInN0YXRlIiwiY3VyIiwiY2giLCJuZXh0IiwiYmxvY2tDb21tZW50IiwibWF0Y2giLCJza2lwVG8iLCJza2lwVG9FbmQiLCJlYXQiLCJlYXRXaGlsZSIsImN1cnJlbnQiLCJpbmRleE9mIiwiY2gxIiwicGVlayIsImV4dGVuU3RhcnQiLCJleHRlblNhbWUiLCJleHRlbkluY2x1ZGUiLCJzdGFydFN0YXRlIiwiZXh0ZW5FeHRlbiIsImV4dGVuUHJpb3JpdHkiLCJleHRlbkFwcGxpY2F0aW9uIiwidG9rZW4iLCJlYXRTcGFjZSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsImJsb2NrQ29tbWVudFN0YXJ0IiwiYmxvY2tDb21tZW50RW5kIiwibGluZUNvbW1lbnQiLCJkZWZpbmVNSU1FIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/asterisk/asterisk.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/asterisk/asterisk.js");
/******/ 	
/******/ })()
;