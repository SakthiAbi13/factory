/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/mllike/mllike.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/mllike/mllike.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('mllike', function (_config, parserConfig) {\n    var words = {\n      'as': 'keyword',\n      'do': 'keyword',\n      'else': 'keyword',\n      'end': 'keyword',\n      'exception': 'keyword',\n      'fun': 'keyword',\n      'functor': 'keyword',\n      'if': 'keyword',\n      'in': 'keyword',\n      'include': 'keyword',\n      'let': 'keyword',\n      'of': 'keyword',\n      'open': 'keyword',\n      'rec': 'keyword',\n      'struct': 'keyword',\n      'then': 'keyword',\n      'type': 'keyword',\n      'val': 'keyword',\n      'while': 'keyword',\n      'with': 'keyword'\n    };\n    var extraWords = parserConfig.extraWords || {};\n\n    for (var prop in extraWords) {\n      if (extraWords.hasOwnProperty(prop)) {\n        words[prop] = parserConfig.extraWords[prop];\n      }\n    }\n\n    var hintWords = [];\n\n    for (var k in words) {\n      hintWords.push(k);\n    }\n\n    CodeMirror.registerHelper(\"hintWords\", \"mllike\", hintWords);\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      }\n\n      if (ch === '{') {\n        if (stream.eat('|')) {\n          state.longString = true;\n          state.tokenize = tokenLongString;\n          return state.tokenize(stream, state);\n        }\n      }\n\n      if (ch === '(') {\n        if (stream.match(/^\\*(?!\\))/)) {\n          state.commentLevel++;\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n      }\n\n      if (ch === '~' || ch === '?') {\n        stream.eatWhile(/\\w/);\n        return 'variable-2';\n      }\n\n      if (ch === '`') {\n        stream.eatWhile(/\\w/);\n        return 'quote';\n      }\n\n      if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (/\\d/.test(ch)) {\n        if (ch === '0' && stream.eat(/[bB]/)) {\n          stream.eatWhile(/[01]/);\n        }\n\n        if (ch === '0' && stream.eat(/[xX]/)) {\n          stream.eatWhile(/[0-9a-fA-F]/);\n        }\n\n        if (ch === '0' && stream.eat(/[oO]/)) {\n          stream.eatWhile(/[0-7]/);\n        } else {\n          stream.eatWhile(/[\\d_]/);\n\n          if (stream.eat('.')) {\n            stream.eatWhile(/[\\d]/);\n          }\n\n          if (stream.eat(/[eE]/)) {\n            stream.eatWhile(/[\\d\\-+]/);\n          }\n        }\n\n        return 'number';\n      }\n\n      if (/[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\n        return 'operator';\n      }\n\n      if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        var cur = stream.current();\n        return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n      }\n\n      return null;\n    }\n\n    function tokenString(stream, state) {\n      var next,\n          end = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next === '\\\\';\n      }\n\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    ;\n\n    function tokenComment(stream, state) {\n      var prev, next;\n\n      while (state.commentLevel > 0 && (next = stream.next()) != null) {\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n      }\n\n      if (state.commentLevel <= 0) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'comment';\n    }\n\n    function tokenLongString(stream, state) {\n      var prev, next;\n\n      while (state.longString && (next = stream.next()) != null) {\n        if (prev === '|' && next === '}') state.longString = false;\n        prev = next;\n      }\n\n      if (!state.longString) {\n        state.tokenize = tokenBase;\n      }\n\n      return 'string';\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          commentLevel: 0,\n          longString: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\",\n      lineComment: parserConfig.slashComments ? \"//\" : null\n    };\n  });\n  CodeMirror.defineMIME('text/x-ocaml', {\n    name: 'mllike',\n    extraWords: {\n      'and': 'keyword',\n      'assert': 'keyword',\n      'begin': 'keyword',\n      'class': 'keyword',\n      'constraint': 'keyword',\n      'done': 'keyword',\n      'downto': 'keyword',\n      'external': 'keyword',\n      'function': 'keyword',\n      'initializer': 'keyword',\n      'lazy': 'keyword',\n      'match': 'keyword',\n      'method': 'keyword',\n      'module': 'keyword',\n      'mutable': 'keyword',\n      'new': 'keyword',\n      'nonrec': 'keyword',\n      'object': 'keyword',\n      'private': 'keyword',\n      'sig': 'keyword',\n      'to': 'keyword',\n      'try': 'keyword',\n      'value': 'keyword',\n      'virtual': 'keyword',\n      'when': 'keyword',\n      // builtins\n      'raise': 'builtin',\n      'failwith': 'builtin',\n      'true': 'builtin',\n      'false': 'builtin',\n      // Pervasives builtins\n      'asr': 'builtin',\n      'land': 'builtin',\n      'lor': 'builtin',\n      'lsl': 'builtin',\n      'lsr': 'builtin',\n      'lxor': 'builtin',\n      'mod': 'builtin',\n      'or': 'builtin',\n      // More Pervasives\n      'raise_notrace': 'builtin',\n      'trace': 'builtin',\n      'exit': 'builtin',\n      'print_string': 'builtin',\n      'print_endline': 'builtin',\n      'int': 'type',\n      'float': 'type',\n      'bool': 'type',\n      'char': 'type',\n      'string': 'type',\n      'unit': 'type',\n      // Modules\n      'List': 'builtin'\n    }\n  });\n  CodeMirror.defineMIME('text/x-fsharp', {\n    name: 'mllike',\n    extraWords: {\n      'abstract': 'keyword',\n      'assert': 'keyword',\n      'base': 'keyword',\n      'begin': 'keyword',\n      'class': 'keyword',\n      'default': 'keyword',\n      'delegate': 'keyword',\n      'do!': 'keyword',\n      'done': 'keyword',\n      'downcast': 'keyword',\n      'downto': 'keyword',\n      'elif': 'keyword',\n      'extern': 'keyword',\n      'finally': 'keyword',\n      'for': 'keyword',\n      'function': 'keyword',\n      'global': 'keyword',\n      'inherit': 'keyword',\n      'inline': 'keyword',\n      'interface': 'keyword',\n      'internal': 'keyword',\n      'lazy': 'keyword',\n      'let!': 'keyword',\n      'match': 'keyword',\n      'member': 'keyword',\n      'module': 'keyword',\n      'mutable': 'keyword',\n      'namespace': 'keyword',\n      'new': 'keyword',\n      'null': 'keyword',\n      'override': 'keyword',\n      'private': 'keyword',\n      'public': 'keyword',\n      'return!': 'keyword',\n      'return': 'keyword',\n      'select': 'keyword',\n      'static': 'keyword',\n      'to': 'keyword',\n      'try': 'keyword',\n      'upcast': 'keyword',\n      'use!': 'keyword',\n      'use': 'keyword',\n      'void': 'keyword',\n      'when': 'keyword',\n      'yield!': 'keyword',\n      'yield': 'keyword',\n      // Reserved words\n      'atomic': 'keyword',\n      'break': 'keyword',\n      'checked': 'keyword',\n      'component': 'keyword',\n      'const': 'keyword',\n      'constraint': 'keyword',\n      'constructor': 'keyword',\n      'continue': 'keyword',\n      'eager': 'keyword',\n      'event': 'keyword',\n      'external': 'keyword',\n      'fixed': 'keyword',\n      'method': 'keyword',\n      'mixin': 'keyword',\n      'object': 'keyword',\n      'parallel': 'keyword',\n      'process': 'keyword',\n      'protected': 'keyword',\n      'pure': 'keyword',\n      'sealed': 'keyword',\n      'tailcall': 'keyword',\n      'trait': 'keyword',\n      'virtual': 'keyword',\n      'volatile': 'keyword',\n      // builtins\n      'List': 'builtin',\n      'Seq': 'builtin',\n      'Map': 'builtin',\n      'Set': 'builtin',\n      'Option': 'builtin',\n      'int': 'builtin',\n      'string': 'builtin',\n      'not': 'builtin',\n      'true': 'builtin',\n      'false': 'builtin',\n      'raise': 'builtin',\n      'failwith': 'builtin'\n    },\n    slashComments: true\n  });\n  CodeMirror.defineMIME('text/x-sml', {\n    name: 'mllike',\n    extraWords: {\n      'abstype': 'keyword',\n      'and': 'keyword',\n      'andalso': 'keyword',\n      'case': 'keyword',\n      'datatype': 'keyword',\n      'fn': 'keyword',\n      'handle': 'keyword',\n      'infix': 'keyword',\n      'infixr': 'keyword',\n      'local': 'keyword',\n      'nonfix': 'keyword',\n      'op': 'keyword',\n      'orelse': 'keyword',\n      'raise': 'keyword',\n      'withtype': 'keyword',\n      'eqtype': 'keyword',\n      'sharing': 'keyword',\n      'sig': 'keyword',\n      'signature': 'keyword',\n      'structure': 'keyword',\n      'where': 'keyword',\n      'true': 'keyword',\n      'false': 'keyword',\n      // types\n      'int': 'builtin',\n      'real': 'builtin',\n      'string': 'builtin',\n      'char': 'builtin',\n      'bool': 'builtin'\n    },\n    slashComments: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/mllike/mllike.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/mllike/mllike.js");
/******/ 	
/******/ })()
;