/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/nginx/nginx.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/nginx/nginx.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"nginx\", function (config) {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\n    /* ngxDirectiveControl */\n    \"break return rewrite set\" +\n    /* ngxDirective */\n    \" accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23\");\n    var keywords_block = words(\n    /* ngxDirectiveBlock */\n    \"http mail events server types location upstream charset_map limit_except if geo map\");\n    var keywords_important = words(\n    /* ngxDirectiveImportant */\n    \"include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files\");\n    var indentUnit = config.indentUnit,\n        type;\n\n    function ret(style, tp) {\n      type = tp;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) {\n        return \"keyword\";\n      } else if (keywords_block.propertyIsEnumerable(cur)) {\n        return \"variable-2\";\n      } else if (keywords_important.propertyIsEnumerable(cur)) {\n        return \"string-2\";\n      }\n      /**/\n\n\n      var ch = stream.next();\n\n      if (ch == \"@\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"meta\", stream.current());\n      } else if (ch == \"/\" && stream.eat(\"*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      } else if (ch == \"<\" && stream.eat(\"!\")) {\n        state.tokenize = tokenSGMLComment;\n        return tokenSGMLComment(stream, state);\n      } else if (ch == \"=\") ret(null, \"compare\");else if ((ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) return ret(null, \"compare\");else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (ch == \"!\") {\n        stream.match(/^\\s*\\w*/);\n        return ret(\"keyword\", \"important\");\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w.%]/);\n        return ret(\"number\", \"unit\");\n      } else if (/[,.+>*\\/]/.test(ch)) {\n        return ret(null, \"select-op\");\n      } else if (/[;{}:\\[\\]]/.test(ch)) {\n        return ret(null, ch);\n      } else {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"variable\", \"variable\");\n      }\n    }\n\n    function tokenCComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenSGMLComment(stream, state) {\n      var dashes = 0,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (dashes >= 2 && ch == \">\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        dashes = ch == \"-\" ? dashes + 1 : 0;\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) break;\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: tokenBase,\n          baseIndent: base || 0,\n          stack: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n        var context = state.stack[state.stack.length - 1];\n        if (type == \"hash\" && context == \"rule\") style = \"atom\";else if (style == \"variable\") {\n          if (context == \"rule\") style = \"number\";else if (!context || context == \"@media{\") style = \"tag\";\n        }\n        if (context == \"rule\" && /^[\\{\\};]$/.test(type)) state.stack.pop();\n\n        if (type == \"{\") {\n          if (context == \"@media\") state.stack[state.stack.length - 1] = \"@media{\";else state.stack.push(\"{\");\n        } else if (type == \"}\") state.stack.pop();else if (type == \"@media\") state.stack.push(\"@media\");else if (context == \"{\" && type != \"comment\") state.stack.push(\"rule\");\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var n = state.stack.length;\n        if (/^\\}/.test(textAfter)) n -= state.stack[state.stack.length - 1] == \"rule\" ? 2 : 1;\n        return state.baseIndent + n * indentUnit;\n      },\n      electricChars: \"}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-nginx-conf\", \"nginx\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS9uZ2lueC9uZ2lueC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBRUEsQ0FBQyxVQUFTQSxHQUFULEVBQWM7RUFDYixJQUFJLHNCQUFPQyxPQUFQLE1BQWtCLFFBQWxCLElBQThCLHNCQUFPQyxNQUFQLE1BQWlCLFFBQW5ELEVBQTZEO0lBQzNERixHQUFHLENBQUNHLG1CQUFPLENBQUMsbUpBQUQsQ0FBUixDQUFILENBREYsS0FFSyxJQUFJLElBQUosRUFBK0M7SUFDbERDLGlDQUFPLENBQUMsbUpBQUQsQ0FBRCxvQ0FBMkJKLEdBQTNCO0FBQUE7QUFBQTtBQUFBLGtHQUFOLENBREcsS0FFQTtJQUNIQSxFQUFBO0FBQ0gsQ0FQRCxFQU9HLFVBQVNNLFVBQVQsRUFBcUI7RUFDeEI7O0VBRUFBLFVBQVUsQ0FBQ0MsVUFBWCxDQUFzQixPQUF0QixFQUErQixVQUFTQyxNQUFULEVBQWlCO0lBRTlDLFNBQVNDLEtBQVQsQ0FBZUMsR0FBZixFQUFvQjtNQUNsQixJQUFJQyxHQUFHLEdBQUcsRUFBVjtNQUFBLElBQWNGLEtBQUssR0FBR0MsR0FBRyxDQUFDRSxLQUFKLENBQVUsR0FBVixDQUF0Qjs7TUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdKLEtBQUssQ0FBQ0ssTUFBMUIsRUFBa0MsRUFBRUQsQ0FBcEM7UUFBdUNGLEdBQUcsQ0FBQ0YsS0FBSyxDQUFDSSxDQUFELENBQU4sQ0FBSCxHQUFnQixJQUFoQjtNQUF2Qzs7TUFDQSxPQUFPRixHQUFQO0lBQ0Q7O0lBRUQsSUFBSUksUUFBUSxHQUFHTixLQUFLO0lBQ2xCO0lBQTBCO0lBQzFCO0lBQW1CLDgrSkFGRCxDQUFwQjtJQUtBLElBQUlPLGNBQWMsR0FBR1AsS0FBSztJQUN4QjtJQUF3QixxRkFEQSxDQUExQjtJQUlBLElBQUlRLGtCQUFrQixHQUFHUixLQUFLO0lBQzVCO0lBQTRC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QyxHQUFHOUIsS0FBSyxDQUFDc0IsS0FBTixDQUFZakMsTUFBcEI7UUFDQSxJQUFJLE1BQU15QixJQUFOLENBQVdlLFNBQVgsQ0FBSixFQUNFQyxDQUFDLElBQUk5QixLQUFLLENBQUNzQixLQUFOLENBQVl0QixLQUFLLENBQUNzQixLQUFOLENBQVlqQyxNQUFaLEdBQW1CLENBQS9CLEtBQXFDLE1BQXJDLEdBQThDLENBQTlDLEdBQWtELENBQXZEO1FBQ0YsT0FBT1csS0FBSyxDQUFDcUIsVUFBTixHQUFtQlMsQ0FBQyxHQUFHckMsVUFBOUI7TUFDRCxDQXBDSTtNQXNDTHNDLGFBQWEsRUFBRTtJQXRDVixDQUFQO0VBd0NELENBaEtEO0VBa0tBbEQsVUFBVSxDQUFDbUQsVUFBWCxDQUFzQixtQkFBdEIsRUFBMkMsT0FBM0M7QUFFQyxDQTlLRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvdmVuZG9yL2xpYnMvY29kZW1pcnJvci9tb2RlL25naW54L25naW54LmpzP2YwYjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnNcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiXSwgbW9kKTtcbiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudlxuICAgIG1vZChDb2RlTWlycm9yKTtcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcblwidXNlIHN0cmljdFwiO1xuXG5Db2RlTWlycm9yLmRlZmluZU1vZGUoXCJuZ2lueFwiLCBmdW5jdGlvbihjb25maWcpIHtcblxuICBmdW5jdGlvbiB3b3JkcyhzdHIpIHtcbiAgICB2YXIgb2JqID0ge30sIHdvcmRzID0gc3RyLnNwbGl0KFwiIFwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSBvYmpbd29yZHNbaV1dID0gdHJ1ZTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIGtleXdvcmRzID0gd29yZHMoXG4gICAgLyogbmd4RGlyZWN0aXZlQ29udHJvbCAqLyBcImJyZWFrIHJldHVybiByZXdyaXRlIHNldFwiICtcbiAgICAvKiBuZ3hEaXJlY3RpdmUgKi8gXCIgYWNjZXB0X211dGV4IGFjY2VwdF9tdXRleF9kZWxheSBhY2Nlc3NfbG9nIGFkZF9hZnRlcl9ib2R5IGFkZF9iZWZvcmVfYm9keSBhZGRfaGVhZGVyIGFkZGl0aW9uX3R5cGVzIGFpbyBhbGlhcyBhbGxvdyBhbmNpZW50X2Jyb3dzZXIgYW5jaWVudF9icm93c2VyX3ZhbHVlIGF1dGhfYmFzaWMgYXV0aF9iYXNpY191c2VyX2ZpbGUgYXV0aF9odHRwIGF1dGhfaHR0cF9oZWFkZXIgYXV0aF9odHRwX3RpbWVvdXQgYXV0b2luZGV4IGF1dG9pbmRleF9leGFjdF9zaXplIGF1dG9pbmRleF9sb2NhbHRpbWUgY2hhcnNldCBjaGFyc2V0X3R5cGVzIGNsaWVudF9ib2R5X2J1ZmZlcl9zaXplIGNsaWVudF9ib2R5X2luX2ZpbGVfb25seSBjbGllbnRfYm9keV9pbl9zaW5nbGVfYnVmZmVyIGNsaWVudF9ib2R5X3RlbXBfcGF0aCBjbGllbnRfYm9keV90aW1lb3V0IGNsaWVudF9oZWFkZXJfYnVmZmVyX3NpemUgY2xpZW50X2hlYWRlcl90aW1lb3V0IGNsaWVudF9tYXhfYm9keV9zaXplIGNvbm5lY3Rpb25fcG9vbF9zaXplIGNyZWF0ZV9mdWxsX3B1dF9wYXRoIGRhZW1vbiBkYXZfYWNjZXNzIGRhdl9tZXRob2RzIGRlYnVnX2Nvbm5lY3Rpb24gZGVidWdfcG9pbnRzIGRlZmF1bHRfdHlwZSBkZWdyYWRhdGlvbiBkZWdyYWRlIGRlbnkgZGV2cG9sbF9jaGFuZ2VzIGRldnBvbGxfZXZlbnRzIGRpcmVjdGlvIGRpcmVjdGlvX2FsaWdubWVudCBlbXB0eV9naWYgZW52IGVwb2xsX2V2ZW50cyBlcnJvcl9sb2cgZXZlbnRwb3J0X2V2ZW50cyBleHBpcmVzIGZhc3RjZ2lfYmluZCBmYXN0Y2dpX2J1ZmZlcl9zaXplIGZhc3RjZ2lfYnVmZmVycyBmYXN0Y2dpX2J1c3lfYnVmZmVyc19zaXplIGZhc3RjZ2lfY2FjaGUgZmFzdGNnaV9jYWNoZV9rZXkgZmFzdGNnaV9jYWNoZV9tZXRob2RzIGZhc3RjZ2lfY2FjaGVfbWluX3VzZXMgZmFzdGNnaV9jYWNoZV9wYXRoIGZhc3RjZ2lfY2FjaGVfdXNlX3N0YWxlIGZhc3RjZ2lfY2FjaGVfdmFsaWQgZmFzdGNnaV9jYXRjaF9zdGRlcnIgZmFzdGNnaV9jb25uZWN0X3RpbWVvdXQgZmFzdGNnaV9oaWRlX2hlYWRlciBmYXN0Y2dpX2lnbm9yZV9jbGllbnRfYWJvcnQgZmFzdGNnaV9pZ25vcmVfaGVhZGVycyBmYXN0Y2dpX2luZGV4IGZhc3RjZ2lfaW50ZXJjZXB0X2Vycm9ycyBmYXN0Y2dpX21heF90ZW1wX2ZpbGVfc2l6ZSBmYXN0Y2dpX25leHRfdXBzdHJlYW0gZmFzdGNnaV9wYXJhbSBmYXN0Y2dpX3Bhc3NfaGVhZGVyIGZhc3RjZ2lfcGFzc19yZXF1ZXN0X2JvZHkgZmFzdGNnaV9wYXNzX3JlcXVlc3RfaGVhZGVycyBmYXN0Y2dpX3JlYWRfdGltZW91dCBmYXN0Y2dpX3NlbmRfbG93YXQgZmFzdGNnaV9zZW5kX3RpbWVvdXQgZmFzdGNnaV9zcGxpdF9wYXRoX2luZm8gZmFzdGNnaV9zdG9yZSBmYXN0Y2dpX3N0b3JlX2FjY2VzcyBmYXN0Y2dpX3RlbXBfZmlsZV93cml0ZV9zaXplIGZhc3RjZ2lfdGVtcF9wYXRoIGZhc3RjZ2lfdXBzdHJlYW1fZmFpbF90aW1lb3V0IGZhc3RjZ2lfdXBzdHJlYW1fbWF4X2ZhaWxzIGZsdiBnZW9pcF9jaXR5IGdlb2lwX2NvdW50cnkgZ29vZ2xlX3BlcmZ0b29sc19wcm9maWxlcyBnemlwIGd6aXBfYnVmZmVycyBnemlwX2NvbXBfbGV2ZWwgZ3ppcF9kaXNhYmxlIGd6aXBfaGFzaCBnemlwX2h0dHBfdmVyc2lvbiBnemlwX21pbl9sZW5ndGggZ3ppcF9ub19idWZmZXIgZ3ppcF9wcm94aWVkIGd6aXBfc3RhdGljIGd6aXBfdHlwZXMgZ3ppcF92YXJ5IGd6aXBfd2luZG93IGlmX21vZGlmaWVkX3NpbmNlIGlnbm9yZV9pbnZhbGlkX2hlYWRlcnMgaW1hZ2VfZmlsdGVyIGltYWdlX2ZpbHRlcl9idWZmZXIgaW1hZ2VfZmlsdGVyX2pwZWdfcXVhbGl0eSBpbWFnZV9maWx0ZXJfdHJhbnNwYXJlbmN5IGltYXBfYXV0aCBpbWFwX2NhcGFiaWxpdGllcyBpbWFwX2NsaWVudF9idWZmZXIgaW5kZXggaXBfaGFzaCBrZWVwYWxpdmVfcmVxdWVzdHMga2VlcGFsaXZlX3RpbWVvdXQga3F1ZXVlX2NoYW5nZXMga3F1ZXVlX2V2ZW50cyBsYXJnZV9jbGllbnRfaGVhZGVyX2J1ZmZlcnMgbGltaXRfY29ubiBsaW1pdF9jb25uX2xvZ19sZXZlbCBsaW1pdF9yYXRlIGxpbWl0X3JhdGVfYWZ0ZXIgbGltaXRfcmVxIGxpbWl0X3JlcV9sb2dfbGV2ZWwgbGltaXRfcmVxX3pvbmUgbGltaXRfem9uZSBsaW5nZXJpbmdfdGltZSBsaW5nZXJpbmdfdGltZW91dCBsb2NrX2ZpbGUgbG9nX2Zvcm1hdCBsb2dfbm90X2ZvdW5kIGxvZ19zdWJyZXF1ZXN0IG1hcF9oYXNoX2J1Y2tldF9zaXplIG1hcF9oYXNoX21heF9zaXplIG1hc3Rlcl9wcm9jZXNzIG1lbWNhY2hlZF9iaW5kIG1lbWNhY2hlZF9idWZmZXJfc2l6ZSBtZW1jYWNoZWRfY29ubmVjdF90aW1lb3V0IG1lbWNhY2hlZF9uZXh0X3Vwc3RyZWFtIG1lbWNhY2hlZF9yZWFkX3RpbWVvdXQgbWVtY2FjaGVkX3NlbmRfdGltZW91dCBtZW1jYWNoZWRfdXBzdHJlYW1fZmFpbF90aW1lb3V0IG1lbWNhY2hlZF91cHN0cmVhbV9tYXhfZmFpbHMgbWVyZ2Vfc2xhc2hlcyBtaW5fZGVsZXRlX2RlcHRoIG1vZGVybl9icm93c2VyIG1vZGVybl9icm93c2VyX3ZhbHVlIG1zaWVfcGFkZGluZyBtc2llX3JlZnJlc2ggbXVsdGlfYWNjZXB0IG9wZW5fZmlsZV9jYWNoZSBvcGVuX2ZpbGVfY2FjaGVfZXJyb3JzIG9wZW5fZmlsZV9jYWNoZV9ldmVudHMgb3Blbl9maWxlX2NhY2hlX21pbl91c2VzIG9wZW5fZmlsZV9jYWNoZV92YWxpZCBvcGVuX2xvZ19maWxlX2NhY2hlIG91dHB1dF9idWZmZXJzIG92ZXJyaWRlX2NoYXJzZXQgcGVybCBwZXJsX21vZHVsZXMgcGVybF9yZXF1aXJlIHBlcmxfc2V0IHBpZCBwb3AzX2F1dGggcG9wM19jYXBhYmlsaXRpZXMgcG9ydF9pbl9yZWRpcmVjdCBwb3N0cG9uZV9nemlwcGluZyBwb3N0cG9uZV9vdXRwdXQgcHJvdG9jb2wgcHJveHkgcHJveHlfYmluZCBwcm94eV9idWZmZXIgcHJveHlfYnVmZmVyX3NpemUgcHJveHlfYnVmZmVyaW5nIHByb3h5X2J1ZmZlcnMgcHJveHlfYnVzeV9idWZmZXJzX3NpemUgcHJveHlfY2FjaGUgcHJveHlfY2FjaGVfa2V5IHByb3h5X2NhY2hlX21ldGhvZHMgcHJveHlfY2FjaGVfbWluX3VzZXMgcHJveHlfY2FjaGVfcGF0aCBwcm94eV9jYWNoZV91c2Vfc3RhbGUgcHJveHlfY2FjaGVfdmFsaWQgcHJveHlfY29ubmVjdF90aW1lb3V0IHByb3h5X2hlYWRlcnNfaGFzaF9idWNrZXRfc2l6ZSBwcm94eV9oZWFkZXJzX2hhc2hfbWF4X3NpemUgcHJveHlfaGlkZV9oZWFkZXIgcHJveHlfaWdub3JlX2NsaWVudF9hYm9ydCBwcm94eV9pZ25vcmVfaGVhZGVycyBwcm94eV9pbnRlcmNlcHRfZXJyb3JzIHByb3h5X21heF90ZW1wX2ZpbGVfc2l6ZSBwcm94eV9tZXRob2QgcHJveHlfbmV4dF91cHN0cmVhbSBwcm94eV9wYXNzX2Vycm9yX21lc3NhZ2UgcHJveHlfcGFzc19oZWFkZXIgcHJveHlfcGFzc19yZXF1ZXN0X2JvZHkgcHJveHlfcGFzc19yZXF1ZXN0X2hlYWRlcnMgcHJveHlfcmVhZF90aW1lb3V0IHByb3h5X3JlZGlyZWN0IHByb3h5X3NlbmRfbG93YXQgcHJveHlfc2VuZF90aW1lb3V0IHByb3h5X3NldF9ib2R5IHByb3h5X3NldF9oZWFkZXIgcHJveHlfc3NsX3Nlc3Npb25fcmV1c2UgcHJveHlfc3RvcmUgcHJveHlfc3RvcmVfYWNjZXNzIHByb3h5X3RlbXBfZmlsZV93cml0ZV9zaXplIHByb3h5X3RlbXBfcGF0aCBwcm94eV90aW1lb3V0IHByb3h5X3Vwc3RyZWFtX2ZhaWxfdGltZW91dCBwcm94eV91cHN0cmVhbV9tYXhfZmFpbHMgcmFuZG9tX2luZGV4IHJlYWRfYWhlYWQgcmVhbF9pcF9oZWFkZXIgcmVjdXJzaXZlX2Vycm9yX3BhZ2VzIHJlcXVlc3RfcG9vbF9zaXplIHJlc2V0X3RpbWVkb3V0X2Nvbm5lY3Rpb24gcmVzb2x2ZXIgcmVzb2x2ZXJfdGltZW91dCByZXdyaXRlX2xvZyBydHNpZ19vdmVyZmxvd19ldmVudHMgcnRzaWdfb3ZlcmZsb3dfdGVzdCBydHNpZ19vdmVyZmxvd190aHJlc2hvbGQgcnRzaWdfc2lnbm8gc2F0aXNmeSBzZWN1cmVfbGlua19zZWNyZXQgc2VuZF9sb3dhdCBzZW5kX3RpbWVvdXQgc2VuZGZpbGUgc2VuZGZpbGVfbWF4X2NodW5rIHNlcnZlcl9uYW1lX2luX3JlZGlyZWN0IHNlcnZlcl9uYW1lc19oYXNoX2J1Y2tldF9zaXplIHNlcnZlcl9uYW1lc19oYXNoX21heF9zaXplIHNlcnZlcl90b2tlbnMgc2V0X3JlYWxfaXBfZnJvbSBzbXRwX2F1dGggc210cF9jYXBhYmlsaXRpZXMgc210cF9jbGllbnRfYnVmZmVyIHNtdHBfZ3JlZXRpbmdfZGVsYXkgc29fa2VlcGFsaXZlIHNvdXJjZV9jaGFyc2V0IHNzaSBzc2lfaWdub3JlX3JlY3ljbGVkX2J1ZmZlcnMgc3NpX21pbl9maWxlX2NodW5rIHNzaV9zaWxlbnRfZXJyb3JzIHNzaV90eXBlcyBzc2lfdmFsdWVfbGVuZ3RoIHNzbCBzc2xfY2VydGlmaWNhdGUgc3NsX2NlcnRpZmljYXRlX2tleSBzc2xfY2lwaGVycyBzc2xfY2xpZW50X2NlcnRpZmljYXRlIHNzbF9jcmwgc3NsX2RocGFyYW0gc3NsX2VuZ2luZSBzc2xfcHJlZmVyX3NlcnZlcl9jaXBoZXJzIHNzbF9wcm90b2NvbHMgc3NsX3Nlc3Npb25fY2FjaGUgc3NsX3Nlc3Npb25fdGltZW91dCBzc2xfdmVyaWZ5X2NsaWVudCBzc2xfdmVyaWZ5X2RlcHRoIHN0YXJ0dGxzIHN0dWJfc3RhdHVzIHN1Yl9maWx0ZXIgc3ViX2ZpbHRlcl9vbmNlIHN1Yl9maWx0ZXJfdHlwZXMgdGNwX25vZGVsYXkgdGNwX25vcHVzaCB0aHJlYWRfc3RhY2tfc2l6ZSB0aW1lb3V0IHRpbWVyX3Jlc29sdXRpb24gdHlwZXNfaGFzaF9idWNrZXRfc2l6ZSB0eXBlc19oYXNoX21heF9zaXplIHVuZGVyc2NvcmVzX2luX2hlYWRlcnMgdW5pbml0aWFsaXplZF92YXJpYWJsZV93YXJuIHVzZSB1c2VyIHVzZXJpZCB1c2VyaWRfZG9tYWluIHVzZXJpZF9leHBpcmVzIHVzZXJpZF9tYXJrIHVzZXJpZF9uYW1lIHVzZXJpZF9wM3AgdXNlcmlkX3BhdGggdXNlcmlkX3NlcnZpY2UgdmFsaWRfcmVmZXJlcnMgdmFyaWFibGVzX2hhc2hfYnVja2V0X3NpemUgdmFyaWFibGVzX2hhc2hfbWF4X3NpemUgd29ya2VyX2Nvbm5lY3Rpb25zIHdvcmtlcl9jcHVfYWZmaW5pdHkgd29ya2VyX3ByaW9yaXR5IHdvcmtlcl9wcm9jZXNzZXMgd29ya2VyX3JsaW1pdF9jb3JlIHdvcmtlcl9ybGltaXRfbm9maWxlIHdvcmtlcl9ybGltaXRfc2lncGVuZGluZyB3b3JrZXJfdGhyZWFkcyB3b3JraW5nX2RpcmVjdG9yeSB4Y2xpZW50IHhtbF9lbnRpdGllcyB4c2x0X3N0eWxlc2hlZXQgeHNsdF90eXBlc2RyZXdAbGkyMjktMjNcIlxuICAgICk7XG5cbiAgdmFyIGtleXdvcmRzX2Jsb2NrID0gd29yZHMoXG4gICAgLyogbmd4RGlyZWN0aXZlQmxvY2sgKi8gXCJodHRwIG1haWwgZXZlbnRzIHNlcnZlciB0eXBlcyBsb2NhdGlvbiB1cHN0cmVhbSBjaGFyc2V0X21hcCBsaW1pdF9leGNlcHQgaWYgZ2VvIG1hcFwiXG4gICAgKTtcblxuICB2YXIga2V5d29yZHNfaW1wb3J0YW50ID0gd29yZHMoXG4gICAgLyogbmd4RGlyZWN0aXZlSW1wb3J0YW50ICovIFwiaW5jbHVkZSByb290IHNlcnZlciBzZXJ2ZXJfbmFtZSBsaXN0ZW4gaW50ZXJuYWwgcHJveHlfcGFzcyBtZW1jYWNoZWRfcGFzcyBmYXN0Y2dpX3Bhc3MgdHJ5X2ZpbGVzXCJcbiAgICApO1xuXG4gIHZhciBpbmRlbnRVbml0ID0gY29uZmlnLmluZGVudFVuaXQsIHR5cGU7XG4gIGZ1bmN0aW9uIHJldChzdHlsZSwgdHApIHt0eXBlID0gdHA7IHJldHVybiBzdHlsZTt9XG5cbiAgZnVuY3Rpb24gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpIHtcblxuXG4gICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcblxuICAgIHZhciBjdXIgPSBzdHJlYW0uY3VycmVudCgpO1xuXG5cbiAgICBpZiAoa2V5d29yZHMucHJvcGVydHlJc0VudW1lcmFibGUoY3VyKSkge1xuICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXl3b3Jkc19ibG9jay5wcm9wZXJ0eUlzRW51bWVyYWJsZShjdXIpKSB7XG4gICAgICByZXR1cm4gXCJ2YXJpYWJsZS0yXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleXdvcmRzX2ltcG9ydGFudC5wcm9wZXJ0eUlzRW51bWVyYWJsZShjdXIpKSB7XG4gICAgICByZXR1cm4gXCJzdHJpbmctMlwiO1xuICAgIH1cbiAgICAvKiovXG5cbiAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpO1xuICAgIGlmIChjaCA9PSBcIkBcIikge3N0cmVhbS5lYXRXaGlsZSgvW1xcd1xcXFxcXC1dLyk7IHJldHVybiByZXQoXCJtZXRhXCIsIHN0cmVhbS5jdXJyZW50KCkpO31cbiAgICBlbHNlIGlmIChjaCA9PSBcIi9cIiAmJiBzdHJlYW0uZWF0KFwiKlwiKSkge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkNDb21tZW50O1xuICAgICAgcmV0dXJuIHRva2VuQ0NvbW1lbnQoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoID09IFwiPFwiICYmIHN0cmVhbS5lYXQoXCIhXCIpKSB7XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuU0dNTENvbW1lbnQ7XG4gICAgICByZXR1cm4gdG9rZW5TR01MQ29tbWVudChzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2ggPT0gXCI9XCIpIHJldChudWxsLCBcImNvbXBhcmVcIik7XG4gICAgZWxzZSBpZiAoKGNoID09IFwiflwiIHx8IGNoID09IFwifFwiKSAmJiBzdHJlYW0uZWF0KFwiPVwiKSkgcmV0dXJuIHJldChudWxsLCBcImNvbXBhcmVcIik7XG4gICAgZWxzZSBpZiAoY2ggPT0gXCJcXFwiXCIgfHwgY2ggPT0gXCInXCIpIHtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5TdHJpbmcoY2gpO1xuICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaCA9PSBcIiNcIikge1xuICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgcmV0dXJuIHJldChcImNvbW1lbnRcIiwgXCJjb21tZW50XCIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaCA9PSBcIiFcIikge1xuICAgICAgc3RyZWFtLm1hdGNoKC9eXFxzKlxcdyovKTtcbiAgICAgIHJldHVybiByZXQoXCJrZXl3b3JkXCIsIFwiaW1wb3J0YW50XCIpO1xuICAgIH1cbiAgICBlbHNlIGlmICgvXFxkLy50ZXN0KGNoKSkge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3LiVdLyk7XG4gICAgICByZXR1cm4gcmV0KFwibnVtYmVyXCIsIFwidW5pdFwiKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoL1ssLis+KlxcL10vLnRlc3QoY2gpKSB7XG4gICAgICByZXR1cm4gcmV0KG51bGwsIFwic2VsZWN0LW9wXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmICgvWzt7fTpcXFtcXF1dLy50ZXN0KGNoKSkge1xuICAgICAgcmV0dXJuIHJldChudWxsLCBjaCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFxcXFxcLV0vKTtcbiAgICAgIHJldHVybiByZXQoXCJ2YXJpYWJsZVwiLCBcInZhcmlhYmxlXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRva2VuQ0NvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBtYXliZUVuZCA9IGZhbHNlLCBjaDtcbiAgICB3aGlsZSAoKGNoID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgaWYgKG1heWJlRW5kICYmIGNoID09IFwiL1wiKSB7XG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG1heWJlRW5kID0gKGNoID09IFwiKlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldChcImNvbW1lbnRcIiwgXCJjb21tZW50XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5TR01MQ29tbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGRhc2hlcyA9IDAsIGNoO1xuICAgIHdoaWxlICgoY2ggPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICBpZiAoZGFzaGVzID49IDIgJiYgY2ggPT0gXCI+XCIpIHtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGFzaGVzID0gKGNoID09IFwiLVwiKSA/IGRhc2hlcyArIDEgOiAwO1xuICAgIH1cbiAgICByZXR1cm4gcmV0KFwiY29tbWVudFwiLCBcImNvbW1lbnRcIik7XG4gIH1cblxuICBmdW5jdGlvbiB0b2tlblN0cmluZyhxdW90ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBjaDtcbiAgICAgIHdoaWxlICgoY2ggPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChjaCA9PSBxdW90ZSAmJiAhZXNjYXBlZClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIGNoID09IFwiXFxcXFwiO1xuICAgICAgfVxuICAgICAgaWYgKCFlc2NhcGVkKSBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICAgIHJldHVybiByZXQoXCJzdHJpbmdcIiwgXCJzdHJpbmdcIik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oYmFzZSkge1xuICAgICAgcmV0dXJuIHt0b2tlbml6ZTogdG9rZW5CYXNlLFxuICAgICAgICAgICAgICBiYXNlSW5kZW50OiBiYXNlIHx8IDAsXG4gICAgICAgICAgICAgIHN0YWNrOiBbXX07XG4gICAgfSxcblxuICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgICAgdHlwZSA9IG51bGw7XG4gICAgICB2YXIgc3R5bGUgPSBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcblxuICAgICAgdmFyIGNvbnRleHQgPSBzdGF0ZS5zdGFja1tzdGF0ZS5zdGFjay5sZW5ndGgtMV07XG4gICAgICBpZiAodHlwZSA9PSBcImhhc2hcIiAmJiBjb250ZXh0ID09IFwicnVsZVwiKSBzdHlsZSA9IFwiYXRvbVwiO1xuICAgICAgZWxzZSBpZiAoc3R5bGUgPT0gXCJ2YXJpYWJsZVwiKSB7XG4gICAgICAgIGlmIChjb250ZXh0ID09IFwicnVsZVwiKSBzdHlsZSA9IFwibnVtYmVyXCI7XG4gICAgICAgIGVsc2UgaWYgKCFjb250ZXh0IHx8IGNvbnRleHQgPT0gXCJAbWVkaWF7XCIpIHN0eWxlID0gXCJ0YWdcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRleHQgPT0gXCJydWxlXCIgJiYgL15bXFx7XFx9O10kLy50ZXN0KHR5cGUpKVxuICAgICAgICBzdGF0ZS5zdGFjay5wb3AoKTtcbiAgICAgIGlmICh0eXBlID09IFwie1wiKSB7XG4gICAgICAgIGlmIChjb250ZXh0ID09IFwiQG1lZGlhXCIpIHN0YXRlLnN0YWNrW3N0YXRlLnN0YWNrLmxlbmd0aC0xXSA9IFwiQG1lZGlhe1wiO1xuICAgICAgICBlbHNlIHN0YXRlLnN0YWNrLnB1c2goXCJ7XCIpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodHlwZSA9PSBcIn1cIikgc3RhdGUuc3RhY2sucG9wKCk7XG4gICAgICBlbHNlIGlmICh0eXBlID09IFwiQG1lZGlhXCIpIHN0YXRlLnN0YWNrLnB1c2goXCJAbWVkaWFcIik7XG4gICAgICBlbHNlIGlmIChjb250ZXh0ID09IFwie1wiICYmIHR5cGUgIT0gXCJjb21tZW50XCIpIHN0YXRlLnN0YWNrLnB1c2goXCJydWxlXCIpO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG5cbiAgICBpbmRlbnQ6IGZ1bmN0aW9uKHN0YXRlLCB0ZXh0QWZ0ZXIpIHtcbiAgICAgIHZhciBuID0gc3RhdGUuc3RhY2subGVuZ3RoO1xuICAgICAgaWYgKC9eXFx9Ly50ZXN0KHRleHRBZnRlcikpXG4gICAgICAgIG4gLT0gc3RhdGUuc3RhY2tbc3RhdGUuc3RhY2subGVuZ3RoLTFdID09IFwicnVsZVwiID8gMiA6IDE7XG4gICAgICByZXR1cm4gc3RhdGUuYmFzZUluZGVudCArIG4gKiBpbmRlbnRVbml0O1xuICAgIH0sXG5cbiAgICBlbGVjdHJpY0NoYXJzOiBcIn1cIlxuICB9O1xufSk7XG5cbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQveC1uZ2lueC1jb25mXCIsIFwibmdpbnhcIik7XG5cbn0pO1xuIl0sIm5hbWVzIjpbIm1vZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwiQ29kZU1pcnJvciIsImRlZmluZU1vZGUiLCJjb25maWciLCJ3b3JkcyIsInN0ciIsIm9iaiIsInNwbGl0IiwiaSIsImxlbmd0aCIsImtleXdvcmRzIiwia2V5d29yZHNfYmxvY2siLCJrZXl3b3Jkc19pbXBvcnRhbnQiLCJpbmRlbnRVbml0IiwidHlwZSIsInJldCIsInN0eWxlIiwidHAiLCJ0b2tlbkJhc2UiLCJzdHJlYW0iLCJzdGF0ZSIsImVhdFdoaWxlIiwiY3VyIiwiY3VycmVudCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY2giLCJuZXh0IiwiZWF0IiwidG9rZW5pemUiLCJ0b2tlbkNDb21tZW50IiwidG9rZW5TR01MQ29tbWVudCIsInRva2VuU3RyaW5nIiwic2tpcFRvRW5kIiwibWF0Y2giLCJ0ZXN0IiwibWF5YmVFbmQiLCJkYXNoZXMiLCJxdW90ZSIsImVzY2FwZWQiLCJzdGFydFN0YXRlIiwiYmFzZSIsImJhc2VJbmRlbnQiLCJzdGFjayIsInRva2VuIiwiZWF0U3BhY2UiLCJjb250ZXh0IiwicG9wIiwicHVzaCIsImluZGVudCIsInRleHRBZnRlciIsIm4iLCJlbGVjdHJpY0NoYXJzIiwiZGVmaW5lTUlNRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/nginx/nginx.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/nginx/nginx.js");
/******/ 	
/******/ })()
;