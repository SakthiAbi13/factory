/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/textile/textile.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/textile/textile.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") {\n    // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));\n  } else if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var TOKEN_STYLES = {\n    addition: \"positive\",\n    attributes: \"attribute\",\n    bold: \"strong\",\n    cite: \"keyword\",\n    code: \"atom\",\n    definitionList: \"number\",\n    deletion: \"negative\",\n    div: \"punctuation\",\n    em: \"em\",\n    footnote: \"variable\",\n    footCite: \"qualifier\",\n    header: \"header\",\n    html: \"comment\",\n    image: \"string\",\n    italic: \"em\",\n    link: \"link\",\n    linkDefinition: \"link\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    notextile: \"string-2\",\n    pre: \"operator\",\n    p: \"property\",\n    quote: \"bracket\",\n    span: \"quote\",\n    specialChar: \"tag\",\n    strong: \"strong\",\n    sub: \"builtin\",\n    sup: \"builtin\",\n    table: \"variable-3\",\n    tableHeading: \"operator\"\n  };\n\n  function startNewLine(stream, state) {\n    state.mode = Modes.newLayout;\n    state.tableHeading = false;\n    if (state.layoutType === \"definitionList\" && state.spanningLayout && stream.match(RE(\"definitionListEnd\"), false)) state.spanningLayout = false;\n  }\n\n  function handlePhraseModifier(stream, state, ch) {\n    if (ch === \"_\") {\n      if (stream.eat(\"_\")) return togglePhraseModifier(stream, state, \"italic\", /__/, 2);else return togglePhraseModifier(stream, state, \"em\", /_/, 1);\n    }\n\n    if (ch === \"*\") {\n      if (stream.eat(\"*\")) {\n        return togglePhraseModifier(stream, state, \"bold\", /\\*\\*/, 2);\n      }\n\n      return togglePhraseModifier(stream, state, \"strong\", /\\*/, 1);\n    }\n\n    if (ch === \"[\") {\n      if (stream.match(/\\d+\\]/)) state.footCite = true;\n      return tokenStyles(state);\n    }\n\n    if (ch === \"(\") {\n      var spec = stream.match(/^(r|tm|c)\\)/);\n      if (spec) return tokenStylesWith(state, TOKEN_STYLES.specialChar);\n    }\n\n    if (ch === \"<\" && stream.match(/(\\w+)[^>]+>[^<]+<\\/\\1>/)) return tokenStylesWith(state, TOKEN_STYLES.html);\n    if (ch === \"?\" && stream.eat(\"?\")) return togglePhraseModifier(stream, state, \"cite\", /\\?\\?/, 2);\n    if (ch === \"=\" && stream.eat(\"=\")) return togglePhraseModifier(stream, state, \"notextile\", /==/, 2);\n    if (ch === \"-\" && !stream.eat(\"-\")) return togglePhraseModifier(stream, state, \"deletion\", /-/, 1);\n    if (ch === \"+\") return togglePhraseModifier(stream, state, \"addition\", /\\+/, 1);\n    if (ch === \"~\") return togglePhraseModifier(stream, state, \"sub\", /~/, 1);\n    if (ch === \"^\") return togglePhraseModifier(stream, state, \"sup\", /\\^/, 1);\n    if (ch === \"%\") return togglePhraseModifier(stream, state, \"span\", /%/, 1);\n    if (ch === \"@\") return togglePhraseModifier(stream, state, \"code\", /@/, 1);\n\n    if (ch === \"!\") {\n      var type = togglePhraseModifier(stream, state, \"image\", /(?:\\([^\\)]+\\))?!/, 1);\n      stream.match(/^:\\S+/); // optional Url portion\n\n      return type;\n    }\n\n    return tokenStyles(state);\n  }\n\n  function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {\n    var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;\n    var charAfter = stream.peek();\n\n    if (state[phraseModifier]) {\n      if ((!charAfter || /\\W/.test(charAfter)) && charBefore && /\\S/.test(charBefore)) {\n        var type = tokenStyles(state);\n        state[phraseModifier] = false;\n        return type;\n      }\n    } else if ((!charBefore || /\\W/.test(charBefore)) && charAfter && /\\S/.test(charAfter) && stream.match(new RegExp(\"^.*\\\\S\" + closeRE.source + \"(?:\\\\W|$)\"), false)) {\n      state[phraseModifier] = true;\n      state.mode = Modes.attributes;\n    }\n\n    return tokenStyles(state);\n  }\n\n  ;\n\n  function tokenStyles(state) {\n    var disabled = textileDisabled(state);\n    if (disabled) return disabled;\n    var styles = [];\n    if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);\n    styles = styles.concat(activeStyles(state, \"addition\", \"bold\", \"cite\", \"code\", \"deletion\", \"em\", \"footCite\", \"image\", \"italic\", \"link\", \"span\", \"strong\", \"sub\", \"sup\", \"table\", \"tableHeading\"));\n    if (state.layoutType === \"header\") styles.push(TOKEN_STYLES.header + \"-\" + state.header);\n    return styles.length ? styles.join(\" \") : null;\n  }\n\n  function textileDisabled(state) {\n    var type = state.layoutType;\n\n    switch (type) {\n      case \"notextile\":\n      case \"code\":\n      case \"pre\":\n        return TOKEN_STYLES[type];\n\n      default:\n        if (state.notextile) return TOKEN_STYLES.notextile + (type ? \" \" + TOKEN_STYLES[type] : \"\");\n        return null;\n    }\n  }\n\n  function tokenStylesWith(state, extraStyles) {\n    var disabled = textileDisabled(state);\n    if (disabled) return disabled;\n    var type = tokenStyles(state);\n    if (extraStyles) return type ? type + \" \" + extraStyles : extraStyles;else return type;\n  }\n\n  function activeStyles(state) {\n    var styles = [];\n\n    for (var i = 1; i < arguments.length; ++i) {\n      if (state[arguments[i]]) styles.push(TOKEN_STYLES[arguments[i]]);\n    }\n\n    return styles;\n  }\n\n  function blankLine(state) {\n    var spanningLayout = state.spanningLayout,\n        type = state.layoutType;\n\n    for (var key in state) {\n      if (state.hasOwnProperty(key)) delete state[key];\n    }\n\n    state.mode = Modes.newLayout;\n\n    if (spanningLayout) {\n      state.layoutType = type;\n      state.spanningLayout = true;\n    }\n  }\n\n  var REs = {\n    cache: {},\n    single: {\n      bc: \"bc\",\n      bq: \"bq\",\n      definitionList: /- .*?:=+/,\n      definitionListEnd: /.*=:\\s*$/,\n      div: \"div\",\n      drawTable: /\\|.*\\|/,\n      foot: /fn\\d+/,\n      header: /h[1-6]/,\n      html: /\\s*<(?:\\/)?(\\w+)(?:[^>]+)?>(?:[^<]+<\\/\\1>)?/,\n      link: /[^\"]+\":\\S/,\n      linkDefinition: /\\[[^\\s\\]]+\\]\\S+/,\n      list: /(?:#+|\\*+)/,\n      notextile: \"notextile\",\n      para: \"p\",\n      pre: \"pre\",\n      table: \"table\",\n      tableCellAttributes: /[\\/\\\\]\\d+/,\n      tableHeading: /\\|_\\./,\n      tableText: /[^\"_\\*\\[\\(\\?\\+~\\^%@|-]+/,\n      text: /[^!\"_=\\*\\[\\(<\\?\\+~\\^%@-]+/\n    },\n    attributes: {\n      align: /(?:<>|<|>|=)/,\n      selector: /\\([^\\(][^\\)]+\\)/,\n      lang: /\\[[^\\[\\]]+\\]/,\n      pad: /(?:\\(+|\\)+){1,2}/,\n      css: /\\{[^\\}]+\\}/\n    },\n    createRe: function createRe(name) {\n      switch (name) {\n        case \"drawTable\":\n          return REs.makeRe(\"^\", REs.single.drawTable, \"$\");\n\n        case \"html\":\n          return REs.makeRe(\"^\", REs.single.html, \"(?:\", REs.single.html, \")*\", \"$\");\n\n        case \"linkDefinition\":\n          return REs.makeRe(\"^\", REs.single.linkDefinition, \"$\");\n\n        case \"listLayout\":\n          return REs.makeRe(\"^\", REs.single.list, RE(\"allAttributes\"), \"*\\\\s+\");\n\n        case \"tableCellAttributes\":\n          return REs.makeRe(\"^\", REs.choiceRe(REs.single.tableCellAttributes, RE(\"allAttributes\")), \"+\\\\.\");\n\n        case \"type\":\n          return REs.makeRe(\"^\", RE(\"allTypes\"));\n\n        case \"typeLayout\":\n          return REs.makeRe(\"^\", RE(\"allTypes\"), RE(\"allAttributes\"), \"*\\\\.\\\\.?\", \"(\\\\s+|$)\");\n\n        case \"attributes\":\n          return REs.makeRe(\"^\", RE(\"allAttributes\"), \"+\");\n\n        case \"allTypes\":\n          return REs.choiceRe(REs.single.div, REs.single.foot, REs.single.header, REs.single.bc, REs.single.bq, REs.single.notextile, REs.single.pre, REs.single.table, REs.single.para);\n\n        case \"allAttributes\":\n          return REs.choiceRe(REs.attributes.selector, REs.attributes.css, REs.attributes.lang, REs.attributes.align, REs.attributes.pad);\n\n        default:\n          return REs.makeRe(\"^\", REs.single[name]);\n      }\n    },\n    makeRe: function makeRe() {\n      var pattern = \"\";\n\n      for (var i = 0; i < arguments.length; ++i) {\n        var arg = arguments[i];\n        pattern += typeof arg === \"string\" ? arg : arg.source;\n      }\n\n      return new RegExp(pattern);\n    },\n    choiceRe: function choiceRe() {\n      var parts = [arguments[0]];\n\n      for (var i = 1; i < arguments.length; ++i) {\n        parts[i * 2 - 1] = \"|\";\n        parts[i * 2] = arguments[i];\n      }\n\n      parts.unshift(\"(?:\");\n      parts.push(\")\");\n      return REs.makeRe.apply(null, parts);\n    }\n  };\n\n  function RE(name) {\n    return REs.cache[name] || (REs.cache[name] = REs.createRe(name));\n  }\n\n  var Modes = {\n    newLayout: function newLayout(stream, state) {\n      if (stream.match(RE(\"typeLayout\"), false)) {\n        state.spanningLayout = false;\n        return (state.mode = Modes.blockType)(stream, state);\n      }\n\n      var newMode;\n\n      if (!textileDisabled(state)) {\n        if (stream.match(RE(\"listLayout\"), false)) newMode = Modes.list;else if (stream.match(RE(\"drawTable\"), false)) newMode = Modes.table;else if (stream.match(RE(\"linkDefinition\"), false)) newMode = Modes.linkDefinition;else if (stream.match(RE(\"definitionList\"))) newMode = Modes.definitionList;else if (stream.match(RE(\"html\"), false)) newMode = Modes.html;\n      }\n\n      return (state.mode = newMode || Modes.text)(stream, state);\n    },\n    blockType: function blockType(stream, state) {\n      var match, type;\n      state.layoutType = null;\n      if (match = stream.match(RE(\"type\"))) type = match[0];else return (state.mode = Modes.text)(stream, state);\n\n      if (match = type.match(RE(\"header\"))) {\n        state.layoutType = \"header\";\n        state.header = parseInt(match[0][1]);\n      } else if (type.match(RE(\"bq\"))) {\n        state.layoutType = \"quote\";\n      } else if (type.match(RE(\"bc\"))) {\n        state.layoutType = \"code\";\n      } else if (type.match(RE(\"foot\"))) {\n        state.layoutType = \"footnote\";\n      } else if (type.match(RE(\"notextile\"))) {\n        state.layoutType = \"notextile\";\n      } else if (type.match(RE(\"pre\"))) {\n        state.layoutType = \"pre\";\n      } else if (type.match(RE(\"div\"))) {\n        state.layoutType = \"div\";\n      } else if (type.match(RE(\"table\"))) {\n        state.layoutType = \"table\";\n      }\n\n      state.mode = Modes.attributes;\n      return tokenStyles(state);\n    },\n    text: function text(stream, state) {\n      if (stream.match(RE(\"text\"))) return tokenStyles(state);\n      var ch = stream.next();\n      if (ch === '\"') return (state.mode = Modes.link)(stream, state);\n      return handlePhraseModifier(stream, state, ch);\n    },\n    attributes: function attributes(stream, state) {\n      state.mode = Modes.layoutLength;\n      if (stream.match(RE(\"attributes\"))) return tokenStylesWith(state, TOKEN_STYLES.attributes);else return tokenStyles(state);\n    },\n    layoutLength: function layoutLength(stream, state) {\n      if (stream.eat(\".\") && stream.eat(\".\")) state.spanningLayout = true;\n      state.mode = Modes.text;\n      return tokenStyles(state);\n    },\n    list: function list(stream, state) {\n      var match = stream.match(RE(\"list\"));\n      state.listDepth = match[0].length;\n      var listMod = (state.listDepth - 1) % 3;\n      if (!listMod) state.layoutType = \"list1\";else if (listMod === 1) state.layoutType = \"list2\";else state.layoutType = \"list3\";\n      state.mode = Modes.attributes;\n      return tokenStyles(state);\n    },\n    link: function link(stream, state) {\n      state.mode = Modes.text;\n\n      if (stream.match(RE(\"link\"))) {\n        stream.match(/\\S+/);\n        return tokenStylesWith(state, TOKEN_STYLES.link);\n      }\n\n      return tokenStyles(state);\n    },\n    linkDefinition: function linkDefinition(stream, state) {\n      stream.skipToEnd();\n      return tokenStylesWith(state, TOKEN_STYLES.linkDefinition);\n    },\n    definitionList: function definitionList(stream, state) {\n      stream.match(RE(\"definitionList\"));\n      state.layoutType = \"definitionList\";\n      if (stream.match(/\\s*$/)) state.spanningLayout = true;else state.mode = Modes.attributes;\n      return tokenStyles(state);\n    },\n    html: function html(stream, state) {\n      stream.skipToEnd();\n      return tokenStylesWith(state, TOKEN_STYLES.html);\n    },\n    table: function table(stream, state) {\n      state.layoutType = \"table\";\n      return (state.mode = Modes.tableCell)(stream, state);\n    },\n    tableCell: function tableCell(stream, state) {\n      if (stream.match(RE(\"tableHeading\"))) state.tableHeading = true;else stream.eat(\"|\");\n      state.mode = Modes.tableCellAttributes;\n      return tokenStyles(state);\n    },\n    tableCellAttributes: function tableCellAttributes(stream, state) {\n      state.mode = Modes.tableText;\n      if (stream.match(RE(\"tableCellAttributes\"))) return tokenStylesWith(state, TOKEN_STYLES.attributes);else return tokenStyles(state);\n    },\n    tableText: function tableText(stream, state) {\n      if (stream.match(RE(\"tableText\"))) return tokenStyles(state);\n\n      if (stream.peek() === \"|\") {\n        // end of cell\n        state.mode = Modes.tableCell;\n        return tokenStyles(state);\n      }\n\n      return handlePhraseModifier(stream, state, stream.next());\n    }\n  };\n  CodeMirror.defineMode(\"textile\", function () {\n    return {\n      startState: function startState() {\n        return {\n          mode: Modes.newLayout\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) startNewLine(stream, state);\n        return state.mode(stream, state);\n      },\n      blankLine: blankLine\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-textile\", \"textile\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/textile/textile.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/textile/textile.js");
/******/ 	
/******/ })()
;