/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/mode/multiplex.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/mode/multiplex.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.multiplexingMode = function (outer\n  /*, others */\n  ) {\n    // Others should be {open, close, mode [, delimStyle] [, innerStyle] [, parseDelimiters]} objects\n    var others = Array.prototype.slice.call(arguments, 1);\n\n    function indexOf(string, pattern, from, returnEnd) {\n      if (typeof pattern == \"string\") {\n        var found = string.indexOf(pattern, from);\n        return returnEnd && found > -1 ? found + pattern.length : found;\n      }\n\n      var m = pattern.exec(from ? string.slice(from) : string);\n      return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          outer: CodeMirror.startState(outer),\n          innerActive: null,\n          inner: null,\n          startingInner: false\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          outer: CodeMirror.copyState(outer, state.outer),\n          innerActive: state.innerActive,\n          inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner),\n          startingInner: state.startingInner\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.innerActive) {\n          var cutOff = Infinity,\n              oldContent = stream.string;\n\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n            var found = indexOf(oldContent, other.open, stream.pos);\n\n            if (found == stream.pos) {\n              if (!other.parseDelimiters) stream.match(other.open);\n              state.startingInner = !!other.parseDelimiters;\n              state.innerActive = other; // Get the outer indent, making sure to handle CodeMirror.Pass\n\n              var outerIndent = 0;\n\n              if (outer.indent) {\n                var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n                if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n              }\n\n              state.inner = CodeMirror.startState(other.mode, outerIndent);\n              return other.delimStyle && other.delimStyle + \" \" + other.delimStyle + \"-open\";\n            } else if (found != -1 && found < cutOff) {\n              cutOff = found;\n            }\n          }\n\n          if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n          var outerToken = outer.token(stream, state.outer);\n          if (cutOff != Infinity) stream.string = oldContent;\n          return outerToken;\n        } else {\n          var curInner = state.innerActive,\n              oldContent = stream.string;\n\n          if (!curInner.close && stream.sol()) {\n            state.innerActive = state.inner = null;\n            return this.token(stream, state);\n          }\n\n          var found = curInner.close && !state.startingInner ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n\n          if (found == stream.pos && !curInner.parseDelimiters) {\n            stream.match(curInner.close);\n            state.innerActive = state.inner = null;\n            return curInner.delimStyle && curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\";\n          }\n\n          if (found > -1) stream.string = oldContent.slice(0, found);\n          var innerToken = curInner.mode.token(stream, state.inner);\n          if (found > -1) stream.string = oldContent;else if (stream.pos > stream.start) state.startingInner = false;\n          if (found == stream.pos && curInner.parseDelimiters) state.innerActive = state.inner = null;\n\n          if (curInner.innerStyle) {\n            if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;else innerToken = curInner.innerStyle;\n          }\n\n          return innerToken;\n        }\n      },\n      indent: function indent(state, textAfter, line) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n        if (!mode.indent) return CodeMirror.Pass;\n        return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n      },\n      blankLine: function blankLine(state) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n\n        if (mode.blankLine) {\n          mode.blankLine(state.innerActive ? state.inner : state.outer);\n        }\n\n        if (!state.innerActive) {\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n\n            if (other.open === \"\\n\") {\n              state.innerActive = other;\n              state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n            }\n          }\n        } else if (state.innerActive.close === \"\\n\") {\n          state.innerActive = state.inner = null;\n        }\n      },\n      electricChars: outer.electricChars,\n      innerMode: function innerMode(state) {\n        return state.inner ? {\n          state: state.inner,\n          mode: state.innerActive.mode\n        } : {\n          state: state.outer,\n          mode: outer\n        };\n      }\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/mode/multiplex.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.overlayMode = function (base, overlay, combine) {\n    return {\n      startState: function startState() {\n        return {\n          base: CodeMirror.startState(base),\n          overlay: CodeMirror.startState(overlay),\n          basePos: 0,\n          baseCur: null,\n          overlayPos: 0,\n          overlayCur: null,\n          streamSeen: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          base: CodeMirror.copyState(base, state.base),\n          overlay: CodeMirror.copyState(overlay, state.overlay),\n          basePos: state.basePos,\n          baseCur: null,\n          overlayPos: state.overlayPos,\n          overlayCur: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream != state.streamSeen || Math.min(state.basePos, state.overlayPos) < stream.start) {\n          state.streamSeen = stream;\n          state.basePos = state.overlayPos = stream.start;\n        }\n\n        if (stream.start == state.basePos) {\n          state.baseCur = base.token(stream, state.base);\n          state.basePos = stream.pos;\n        }\n\n        if (stream.start == state.overlayPos) {\n          stream.pos = stream.start;\n          state.overlayCur = overlay.token(stream, state.overlay);\n          state.overlayPos = stream.pos;\n        }\n\n        stream.pos = Math.min(state.basePos, state.overlayPos); // state.overlay.combineTokens always takes precedence over combine,\n        // unless set to null\n\n        if (state.overlayCur == null) return state.baseCur;else if (state.baseCur != null && state.overlay.combineTokens || combine && state.overlay.combineTokens == null) return state.baseCur + \" \" + state.overlayCur;else return state.overlayCur;\n      },\n      indent: base.indent && function (state, textAfter, line) {\n        return base.indent(state.base, textAfter, line);\n      },\n      electricChars: base.electricChars,\n      innerMode: function innerMode(state) {\n        return {\n          state: state.base,\n          mode: base\n        };\n      },\n      blankLine: function blankLine(state) {\n        var baseToken, overlayToken;\n        if (base.blankLine) baseToken = base.blankLine(state.base);\n        if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n        return overlayToken == null ? baseToken : combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken;\n      }\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/addon/mode/simple.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/mode/simple.js ***!
  \**********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      if (val.unicode) flags += \"u\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) (state.pending || (state.pending = [])).push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || _typeof(a) != \"object\" || !b || _typeof(b) != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/mode/simple.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/coffeescript/coffeescript.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/coffeescript/coffeescript.js ***!
  \***********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"coffeescript\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n    }\n\n    var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n    var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n    var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n    var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n    var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\", \"isnt\", \"in\", \"instanceof\", \"typeof\"]);\n    var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\", \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n    var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\", \"do\", \"in\", \"of\", \"new\", \"return\", \"then\", \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n    var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n    indentKeywords = wordRegexp(indentKeywords);\n    var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n    var regexPrefixes = /^(\\/{3}|\\/)/;\n    var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n    var constants = wordRegexp(commonConstants); // Tokenizers\n\n    function tokenBase(stream, state) {\n      // Handle scope changes\n      if (stream.sol()) {\n        if (state.scope.align === null) state.scope.align = false;\n        var scopeOffset = state.scope.offset;\n\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n\n          if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n            return \"indent\";\n          } else if (lineOffset < scopeOffset) {\n            return \"dedent\";\n          }\n\n          return null;\n        } else {\n          if (scopeOffset > 0) {\n            dedent(stream, state);\n          }\n        }\n      }\n\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.peek(); // Handle docco title comment (single line)\n\n      if (stream.match(\"####\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Handle multi line comments\n\n\n      if (stream.match(\"###\")) {\n        state.tokenize = longComment;\n        return state.tokenize(stream, state);\n      } // Single line comment\n\n\n      if (ch === \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Handle number literals\n\n\n      if (stream.match(/^-?[0-9\\.]/, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^-?\\d+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^-?\\.\\d+/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // prevent from getting extra . on 1..\n          if (stream.peek() == \".\") {\n            stream.backUp(1);\n          }\n\n          return \"number\";\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^-?0x[0-9a-f]+/i)) {\n          intLiteral = true;\n        } // Decimal\n\n\n        if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n\n\n        if (stream.match(/^-?0(?![\\dx])/i)) {\n          intLiteral = true;\n        }\n\n        if (intLiteral) {\n          return \"number\";\n        }\n      } // Handle strings\n\n\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenFactory(stream.current(), false, \"string\");\n        return state.tokenize(stream, state);\n      } // Handle regex literals\n\n\n      if (stream.match(regexPrefixes)) {\n        if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) {\n          // prevent highlight of division\n          state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n          return state.tokenize(stream, state);\n        } else {\n          stream.backUp(1);\n        }\n      } // Handle operators and delimiters\n\n\n      if (stream.match(operators) || stream.match(wordOperators)) {\n        return \"operator\";\n      }\n\n      if (stream.match(delimiters)) {\n        return \"punctuation\";\n      }\n\n      if (stream.match(constants)) {\n        return \"atom\";\n      }\n\n      if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n        return \"property\";\n      }\n\n      if (stream.match(keywords)) {\n        return \"keyword\";\n      }\n\n      if (stream.match(identifiers)) {\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function tokenFactory(delimiter, singleline, outclass) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\/\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n\n            if (singleline && stream.eol()) {\n              return outclass;\n            }\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return outclass;\n          } else {\n            stream.eat(/['\"\\/]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) {\n            outclass = ERRORCLASS;\n          } else {\n            state.tokenize = tokenBase;\n          }\n        }\n\n        return outclass;\n      };\n    }\n\n    function longComment(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^#]/);\n\n        if (stream.match(\"###\")) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        stream.eatWhile(\"#\");\n      }\n\n      return \"comment\";\n    }\n\n    function indent(stream, state, type) {\n      type = type || \"coffee\";\n      var offset = 0,\n          align = false,\n          alignOffset = null;\n\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (scope.type === \"coffee\" || scope.type == \"}\") {\n          offset = scope.offset + conf.indentUnit;\n          break;\n        }\n      }\n\n      if (type !== \"coffee\") {\n        align = null;\n        alignOffset = stream.column() + stream.current().length;\n      } else if (state.scope.align) {\n        state.scope.align = false;\n      }\n\n      state.scope = {\n        offset: offset,\n        type: type,\n        prev: state.scope,\n        align: align,\n        alignOffset: alignOffset\n      };\n    }\n\n    function dedent(stream, state) {\n      if (!state.scope.prev) return;\n\n      if (state.scope.type === \"coffee\") {\n        var _indent = stream.indentation();\n\n        var matched = false;\n\n        for (var scope = state.scope; scope; scope = scope.prev) {\n          if (_indent === scope.offset) {\n            matched = true;\n            break;\n          }\n        }\n\n        if (!matched) {\n          return true;\n        }\n\n        while (state.scope.prev && state.scope.offset !== _indent) {\n          state.scope = state.scope.prev;\n        }\n\n        return false;\n      } else {\n        state.scope = state.scope.prev;\n        return false;\n      }\n    }\n\n    function tokenLexer(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle scope changes.\n\n      if (current === \"return\") {\n        state.dedent = true;\n      }\n\n      if ((current === \"->\" || current === \"=>\") && stream.eol() || style === \"indent\") {\n        indent(stream, state);\n      }\n\n      var delimiter_index = \"[({\".indexOf(current);\n\n      if (delimiter_index !== -1) {\n        indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n      }\n\n      if (indentKeywords.exec(current)) {\n        indent(stream, state);\n      }\n\n      if (current == \"then\") {\n        dedent(stream, state);\n      }\n\n      if (style === \"dedent\") {\n        if (dedent(stream, state)) {\n          return ERRORCLASS;\n        }\n      }\n\n      delimiter_index = \"])}\".indexOf(current);\n\n      if (delimiter_index !== -1) {\n        while (state.scope.type == \"coffee\" && state.scope.prev) {\n          state.scope = state.scope.prev;\n        }\n\n        if (state.scope.type == current) state.scope = state.scope.prev;\n      }\n\n      if (state.dedent && stream.eol()) {\n        if (state.scope.type == \"coffee\" && state.scope.prev) state.scope = state.scope.prev;\n        state.dedent = false;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scope: {\n            offset: basecolumn || 0,\n            type: \"coffee\",\n            prev: null,\n            align: false\n          },\n          prop: false,\n          dedent: 0\n        };\n      },\n      token: function token(stream, state) {\n        var fillAlign = state.scope.align === null && state.scope;\n        if (fillAlign && stream.sol()) fillAlign.align = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\") {\n          if (fillAlign) fillAlign.align = true;\n          state.prop = style == \"punctuation\" && stream.current() == \".\";\n        }\n\n        return style;\n      },\n      indent: function indent(state, text) {\n        if (state.tokenize != tokenBase) return 0;\n        var scope = state.scope;\n        var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n        if (closer) while (scope.type == \"coffee\" && scope.prev) {\n          scope = scope.prev;\n        }\n        var closes = closer && scope.type === text.charAt(0);\n        if (scope.align) return scope.alignOffset - (closes ? 1 : 0);else return (closes ? scope.prev : scope).offset;\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  }); // IANA registered media type\n  // https://www.iana.org/assignments/media-types/\n\n  CodeMirror.defineMIME(\"application/vnd.coffeescript\", \"coffeescript\");\n  CodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\n  CodeMirror.defineMIME(\"text/coffeescript\", \"coffeescript\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/coffeescript/coffeescript.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/css/css.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/css/css.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"css\", function (config, parserConfig) {\n    var inline = parserConfig.inline;\n    if (!parserConfig.propertyKeywords) parserConfig = CodeMirror.resolveMode(\"text/css\");\n    var indentUnit = config.indentUnit,\n        tokenHooks = parserConfig.tokenHooks,\n        documentTypes = parserConfig.documentTypes || {},\n        mediaTypes = parserConfig.mediaTypes || {},\n        mediaFeatures = parserConfig.mediaFeatures || {},\n        mediaValueKeywords = parserConfig.mediaValueKeywords || {},\n        propertyKeywords = parserConfig.propertyKeywords || {},\n        nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\n        fontProperties = parserConfig.fontProperties || {},\n        counterDescriptors = parserConfig.counterDescriptors || {},\n        colorKeywords = parserConfig.colorKeywords || {},\n        valueKeywords = parserConfig.valueKeywords || {},\n        allowNested = parserConfig.allowNested,\n        lineComment = parserConfig.lineComment,\n        supportsAtComponent = parserConfig.supportsAtComponent === true,\n        highlightNonStandardPropertyKeywords = config.highlightNonStandardPropertyKeywords !== false;\n    var type, override;\n\n    function ret(style, tp) {\n      type = tp;\n      return style;\n    } // Tokenizers\n\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (tokenHooks[ch]) {\n        var result = tokenHooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == \"@\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"def\", stream.current());\n      } else if (ch == \"=\" || (ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) {\n        return ret(null, \"compare\");\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \"#\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"atom\", \"hash\");\n      } else if (ch == \"!\") {\n        stream.match(/^\\s*\\w*/);\n        return ret(\"keyword\", \"important\");\n      } else if (/\\d/.test(ch) || ch == \".\" && stream.eat(/\\d/)) {\n        stream.eatWhile(/[\\w.%]/);\n        return ret(\"number\", \"unit\");\n      } else if (ch === \"-\") {\n        if (/[\\d.]/.test(stream.peek())) {\n          stream.eatWhile(/[\\w.%]/);\n          return ret(\"number\", \"unit\");\n        } else if (stream.match(/^-[\\w\\\\\\-]*/)) {\n          stream.eatWhile(/[\\w\\\\\\-]/);\n          if (stream.match(/^\\s*:/, false)) return ret(\"variable-2\", \"variable-definition\");\n          return ret(\"variable-2\", \"variable\");\n        } else if (stream.match(/^\\w+-/)) {\n          return ret(\"meta\", \"meta\");\n        }\n      } else if (/[,+>*\\/]/.test(ch)) {\n        return ret(null, \"select-op\");\n      } else if (ch == \".\" && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\n        return ret(\"qualifier\", \"qualifier\");\n      } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\n        return ret(null, ch);\n      } else if (stream.match(/^[\\w-.]+(?=\\()/)) {\n        if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {\n          state.tokenize = tokenParenthesized;\n        }\n\n        return ret(\"variable callee\", \"variable\");\n      } else if (/[\\w\\\\\\-]/.test(ch)) {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"property\", \"word\");\n      } else {\n        return ret(null, null);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            if (quote == \")\") stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenParenthesized(stream, state) {\n      stream.next(); // Must be '('\n\n      if (!stream.match(/^\\s*[\\\"\\')]/, false)) state.tokenize = tokenString(\")\");else state.tokenize = null;\n      return ret(null, \"(\");\n    } // Context management\n\n\n    function Context(type, indent, prev) {\n      this.type = type;\n      this.indent = indent;\n      this.prev = prev;\n    }\n\n    function pushContext(state, stream, type, indent) {\n      state.context = new Context(type, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);\n      return type;\n    }\n\n    function popContext(state) {\n      if (state.context.prev) state.context = state.context.prev;\n      return state.context.type;\n    }\n\n    function pass(type, stream, state) {\n      return states[state.context.type](type, stream, state);\n    }\n\n    function popAndPass(type, stream, state, n) {\n      for (var i = n || 1; i > 0; i--) {\n        state.context = state.context.prev;\n      }\n\n      return pass(type, stream, state);\n    } // Parser\n\n\n    function wordAsValue(stream) {\n      var word = stream.current().toLowerCase();\n      if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"variable\";\n    }\n\n    var states = {};\n\n    states.top = function (type, stream, state) {\n      if (type == \"{\") {\n        return pushContext(state, stream, \"block\");\n      } else if (type == \"}\" && state.context.prev) {\n        return popContext(state);\n      } else if (supportsAtComponent && /@component/i.test(type)) {\n        return pushContext(state, stream, \"atComponentBlock\");\n      } else if (/^@(-moz-)?document$/i.test(type)) {\n        return pushContext(state, stream, \"documentTypes\");\n      } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {\n        return pushContext(state, stream, \"atBlock\");\n      } else if (/^@(font-face|counter-style)/i.test(type)) {\n        state.stateArg = type;\n        return \"restricted_atBlock_before\";\n      } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {\n        return \"keyframes\";\n      } else if (type && type.charAt(0) == \"@\") {\n        return pushContext(state, stream, \"at\");\n      } else if (type == \"hash\") {\n        override = \"builtin\";\n      } else if (type == \"word\") {\n        override = \"tag\";\n      } else if (type == \"variable-definition\") {\n        return \"maybeprop\";\n      } else if (type == \"interpolation\") {\n        return pushContext(state, stream, \"interpolation\");\n      } else if (type == \":\") {\n        return \"pseudo\";\n      } else if (allowNested && type == \"(\") {\n        return pushContext(state, stream, \"parens\");\n      }\n\n      return state.context.type;\n    };\n\n    states.block = function (type, stream, state) {\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n\n        if (propertyKeywords.hasOwnProperty(word)) {\n          override = \"property\";\n          return \"maybeprop\";\n        } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\n          override = highlightNonStandardPropertyKeywords ? \"string-2\" : \"property\";\n          return \"maybeprop\";\n        } else if (allowNested) {\n          override = stream.match(/^\\s*:(?:\\s|$)/, false) ? \"property\" : \"tag\";\n          return \"block\";\n        } else {\n          override += \" error\";\n          return \"maybeprop\";\n        }\n      } else if (type == \"meta\") {\n        return \"block\";\n      } else if (!allowNested && (type == \"hash\" || type == \"qualifier\")) {\n        override = \"error\";\n        return \"block\";\n      } else {\n        return states.top(type, stream, state);\n      }\n    };\n\n    states.maybeprop = function (type, stream, state) {\n      if (type == \":\") return pushContext(state, stream, \"prop\");\n      return pass(type, stream, state);\n    };\n\n    states.prop = function (type, stream, state) {\n      if (type == \";\") return popContext(state);\n      if (type == \"{\" && allowNested) return pushContext(state, stream, \"propBlock\");\n      if (type == \"}\" || type == \"{\") return popAndPass(type, stream, state);\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n\n      if (type == \"hash\" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {\n        override += \" error\";\n      } else if (type == \"word\") {\n        wordAsValue(stream);\n      } else if (type == \"interpolation\") {\n        return pushContext(state, stream, \"interpolation\");\n      }\n\n      return \"prop\";\n    };\n\n    states.propBlock = function (type, _stream, state) {\n      if (type == \"}\") return popContext(state);\n\n      if (type == \"word\") {\n        override = \"property\";\n        return \"maybeprop\";\n      }\n\n      return state.context.type;\n    };\n\n    states.parens = function (type, stream, state) {\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n      if (type == \")\") return popContext(state);\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n      if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n      if (type == \"word\") wordAsValue(stream);\n      return \"parens\";\n    };\n\n    states.pseudo = function (type, stream, state) {\n      if (type == \"meta\") return \"pseudo\";\n\n      if (type == \"word\") {\n        override = \"variable-3\";\n        return state.context.type;\n      }\n\n      return pass(type, stream, state);\n    };\n\n    states.documentTypes = function (type, stream, state) {\n      if (type == \"word\" && documentTypes.hasOwnProperty(stream.current())) {\n        override = \"tag\";\n        return state.context.type;\n      } else {\n        return states.atBlock(type, stream, state);\n      }\n    };\n\n    states.atBlock = function (type, stream, state) {\n      if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n      if (type == \"}\" || type == \";\") return popAndPass(type, stream, state);\n      if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\");\n      if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n        if (word == \"only\" || word == \"not\" || word == \"and\" || word == \"or\") override = \"keyword\";else if (mediaTypes.hasOwnProperty(word)) override = \"attribute\";else if (mediaFeatures.hasOwnProperty(word)) override = \"property\";else if (mediaValueKeywords.hasOwnProperty(word)) override = \"keyword\";else if (propertyKeywords.hasOwnProperty(word)) override = \"property\";else if (nonStandardPropertyKeywords.hasOwnProperty(word)) override = highlightNonStandardPropertyKeywords ? \"string-2\" : \"property\";else if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"error\";\n      }\n\n      return state.context.type;\n    };\n\n    states.atComponentBlock = function (type, stream, state) {\n      if (type == \"}\") return popAndPass(type, stream, state);\n      if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\", false);\n      if (type == \"word\") override = \"error\";\n      return state.context.type;\n    };\n\n    states.atBlock_parens = function (type, stream, state) {\n      if (type == \")\") return popContext(state);\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state, 2);\n      return states.atBlock(type, stream, state);\n    };\n\n    states.restricted_atBlock_before = function (type, stream, state) {\n      if (type == \"{\") return pushContext(state, stream, \"restricted_atBlock\");\n\n      if (type == \"word\" && state.stateArg == \"@counter-style\") {\n        override = \"variable\";\n        return \"restricted_atBlock_before\";\n      }\n\n      return pass(type, stream, state);\n    };\n\n    states.restricted_atBlock = function (type, stream, state) {\n      if (type == \"}\") {\n        state.stateArg = null;\n        return popContext(state);\n      }\n\n      if (type == \"word\") {\n        if (state.stateArg == \"@font-face\" && !fontProperties.hasOwnProperty(stream.current().toLowerCase()) || state.stateArg == \"@counter-style\" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())) override = \"error\";else override = \"property\";\n        return \"maybeprop\";\n      }\n\n      return \"restricted_atBlock\";\n    };\n\n    states.keyframes = function (type, stream, state) {\n      if (type == \"word\") {\n        override = \"variable\";\n        return \"keyframes\";\n      }\n\n      if (type == \"{\") return pushContext(state, stream, \"top\");\n      return pass(type, stream, state);\n    };\n\n    states.at = function (type, stream, state) {\n      if (type == \";\") return popContext(state);\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n      if (type == \"word\") override = \"tag\";else if (type == \"hash\") override = \"builtin\";\n      return \"at\";\n    };\n\n    states.interpolation = function (type, stream, state) {\n      if (type == \"}\") return popContext(state);\n      if (type == \"{\" || type == \";\") return popAndPass(type, stream, state);\n      if (type == \"word\") override = \"variable\";else if (type != \"variable\" && type != \"(\" && type != \")\") override = \"error\";\n      return \"interpolation\";\n    };\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: null,\n          state: inline ? \"block\" : \"top\",\n          stateArg: null,\n          context: new Context(inline ? \"block\" : \"top\", base || 0, null)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.tokenize && stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n\n        if (style && _typeof(style) == \"object\") {\n          type = style[1];\n          style = style[0];\n        }\n\n        override = style;\n        if (type != \"comment\") state.state = states[state.state](type, stream, state);\n        return override;\n      },\n      indent: function indent(state, textAfter) {\n        var cx = state.context,\n            ch = textAfter && textAfter.charAt(0);\n        var indent = cx.indent;\n        if (cx.type == \"prop\" && (ch == \"}\" || ch == \")\")) cx = cx.prev;\n\n        if (cx.prev) {\n          if (ch == \"}\" && (cx.type == \"block\" || cx.type == \"top\" || cx.type == \"interpolation\" || cx.type == \"restricted_atBlock\")) {\n            // Resume indentation from parent context.\n            cx = cx.prev;\n            indent = cx.indent;\n          } else if (ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") || ch == \"{\" && (cx.type == \"at\" || cx.type == \"atBlock\")) {\n            // Dedent relative to current context.\n            indent = Math.max(0, cx.indent - indentUnit);\n          }\n        }\n\n        return indent;\n      },\n      electricChars: \"}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: lineComment,\n      fold: \"brace\"\n    };\n  });\n\n  function keySet(array) {\n    var keys = {};\n\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i].toLowerCase()] = true;\n    }\n\n    return keys;\n  }\n\n  var documentTypes_ = [\"domain\", \"regexp\", \"url\", \"url-prefix\"],\n      documentTypes = keySet(documentTypes_);\n  var mediaTypes_ = [\"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\", \"tty\", \"tv\", \"embossed\"],\n      mediaTypes = keySet(mediaTypes_);\n  var mediaFeatures_ = [\"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\", \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\", \"min-device-height\", \"max-device-height\", \"aspect-ratio\", \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\", \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\", \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\", \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\", \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"orientation\", \"device-pixel-ratio\", \"min-device-pixel-ratio\", \"max-device-pixel-ratio\", \"pointer\", \"any-pointer\", \"hover\", \"any-hover\", \"prefers-color-scheme\", \"dynamic-range\", \"video-dynamic-range\"],\n      mediaFeatures = keySet(mediaFeatures_);\n  var mediaValueKeywords_ = [\"landscape\", \"portrait\", \"none\", \"coarse\", \"fine\", \"on-demand\", \"hover\", \"interlace\", \"progressive\", \"dark\", \"light\", \"standard\", \"high\"],\n      mediaValueKeywords = keySet(mediaValueKeywords_);\n  var propertyKeywords_ = [\"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\", \"alignment-baseline\", \"all\", \"anchor-point\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"appearance\", \"azimuth\", \"backdrop-filter\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-position-x\", \"background-position-y\", \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\", \"bleed\", \"block-size\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\", \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"caret-color\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"contain\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"dominant-baseline\", \"drop-initial-after-adjust\", \"drop-initial-after-align\", \"drop-initial-before-adjust\", \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\", \"elevation\", \"empty-cells\", \"fit\", \"fit-content\", \"fit-position\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-family\", \"font-feature-settings\", \"font-kerning\", \"font-language-override\", \"font-optical-sizing\", \"font-size\", \"font-size-adjust\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-variation-settings\", \"font-weight\", \"gap\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-gap\", \"grid-column-start\", \"grid-gap\", \"grid-row\", \"grid-row-end\", \"grid-row-gap\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"inline-box-align\", \"inset\", \"inset-block\", \"inset-block-end\", \"inset-block-start\", \"inset-inline\", \"inset-inline-end\", \"inset-inline-start\", \"isolation\", \"justify-content\", \"justify-items\", \"justify-self\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"line-height-step\", \"line-stacking\", \"line-stacking-ruby\", \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"marks\", \"marquee-direction\", \"marquee-loop\", \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"mask-clip\", \"mask-composite\", \"mask-image\", \"mask-mode\", \"mask-origin\", \"mask-position\", \"mask-repeat\", \"mask-size\", \"mask-type\", \"max-block-size\", \"max-height\", \"max-inline-size\", \"max-width\", \"min-block-size\", \"min-height\", \"min-inline-size\", \"min-width\", \"mix-blend-mode\", \"move-to\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\", \"offset\", \"offset-anchor\", \"offset-distance\", \"offset-path\", \"offset-position\", \"offset-rotate\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\", \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pitch\", \"pitch-range\", \"place-content\", \"place-items\", \"place-self\", \"play-during\", \"position\", \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\", \"region-break-before\", \"region-break-inside\", \"region-fragment\", \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\", \"right\", \"rotate\", \"rotation\", \"rotation-point\", \"row-gap\", \"ruby-align\", \"ruby-overhang\", \"ruby-position\", \"ruby-span\", \"scale\", \"scroll-behavior\", \"scroll-margin\", \"scroll-margin-block\", \"scroll-margin-block-end\", \"scroll-margin-block-start\", \"scroll-margin-bottom\", \"scroll-margin-inline\", \"scroll-margin-inline-end\", \"scroll-margin-inline-start\", \"scroll-margin-left\", \"scroll-margin-right\", \"scroll-margin-top\", \"scroll-padding\", \"scroll-padding-block\", \"scroll-padding-block-end\", \"scroll-padding-block-start\", \"scroll-padding-bottom\", \"scroll-padding-inline\", \"scroll-padding-inline-end\", \"scroll-padding-inline-start\", \"scroll-padding-left\", \"scroll-padding-right\", \"scroll-padding-top\", \"scroll-snap-align\", \"scroll-snap-type\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\", \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\", \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\", \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\", \"target-position\", \"text-align\", \"text-align-last\", \"text-combine-upright\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\", \"text-decoration-skip-ink\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\", \"text-indent\", \"text-justify\", \"text-orientation\", \"text-outline\", \"text-overflow\", \"text-rendering\", \"text-shadow\", \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\", \"text-wrap\", \"top\", \"touch-action\", \"transform\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"translate\", \"unicode-bidi\", \"user-select\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"writing-mode\", \"z-index\", // SVG-specific\n  \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\", \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\", \"color-interpolation\", \"color-interpolation-filters\", \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\", \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"paint-order\", \"shape-rendering\", \"stroke\", \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\", \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\", \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\"],\n      propertyKeywords = keySet(propertyKeywords_);\n  var nonStandardPropertyKeywords_ = [\"accent-color\", \"aspect-ratio\", \"border-block\", \"border-block-color\", \"border-block-end\", \"border-block-end-color\", \"border-block-end-style\", \"border-block-end-width\", \"border-block-start\", \"border-block-start-color\", \"border-block-start-style\", \"border-block-start-width\", \"border-block-style\", \"border-block-width\", \"border-inline\", \"border-inline-color\", \"border-inline-end\", \"border-inline-end-color\", \"border-inline-end-style\", \"border-inline-end-width\", \"border-inline-start\", \"border-inline-start-color\", \"border-inline-start-style\", \"border-inline-start-width\", \"border-inline-style\", \"border-inline-width\", \"content-visibility\", \"margin-block\", \"margin-block-end\", \"margin-block-start\", \"margin-inline\", \"margin-inline-end\", \"margin-inline-start\", \"overflow-anchor\", \"overscroll-behavior\", \"padding-block\", \"padding-block-end\", \"padding-block-start\", \"padding-inline\", \"padding-inline-end\", \"padding-inline-start\", \"scroll-snap-stop\", \"scrollbar-3d-light-color\", \"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\", \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\", \"scrollbar-track-color\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"shape-inside\", \"zoom\"],\n      nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\n  var fontProperties_ = [\"font-display\", \"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\", \"font-stretch\", \"font-weight\", \"font-style\"],\n      fontProperties = keySet(fontProperties_);\n  var counterDescriptors_ = [\"additive-symbols\", \"fallback\", \"negative\", \"pad\", \"prefix\", \"range\", \"speak-as\", \"suffix\", \"symbols\", \"system\"],\n      counterDescriptors = keySet(counterDescriptors_);\n  var colorKeywords_ = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkgrey\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkslategrey\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dimgrey\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightgrey\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightslategrey\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"slategrey\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"],\n      colorKeywords = keySet(colorKeywords_);\n  var valueKeywords_ = [\"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\", \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\", \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"auto-flow\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"axis-pan\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\", \"bengali\", \"blink\", \"block\", \"block-axis\", \"blur\", \"bold\", \"bolder\", \"border\", \"border-box\", \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"brightness\", \"bullets\", \"button\", \"button-bevel\", \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\", \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\", \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"color\", \"color-burn\", \"color-dodge\", \"column\", \"column-reverse\", \"compact\", \"condensed\", \"conic-gradient\", \"contain\", \"content\", \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"contrast\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\", \"cross\", \"crosshair\", \"cubic-bezier\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\", \"decimal-leading-zero\", \"default\", \"default-button\", \"dense\", \"destination-atop\", \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"difference\", \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"drop-shadow\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\", \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\", \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\", \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\", \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\", \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\", \"ethiopic-numeric\", \"ew-resize\", \"exclusion\", \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fill-box\", \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\", \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"grayscale\", \"graytext\", \"grid\", \"groove\", \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hard-light\", \"hebrew\", \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\", \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"hue-rotate\", \"icon\", \"ignore\", \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-grid\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\", \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\", \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\", \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\", \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\", \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lower-roman\", \"lowercase\", \"ltr\", \"luminosity\", \"malayalam\", \"manipulation\", \"match\", \"matrix\", \"matrix3d\", \"media-controls-background\", \"media-current-time-display\", \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\", \"media-return-to-realtime-button\", \"media-rewind-button\", \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\", \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\", \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\", \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\", \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\", \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"multiple_mask_images\", \"multiply\", \"myanmar\", \"n-resize\", \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"opacity\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\", \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"pinch-zoom\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeating-conic-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\", \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\", \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"saturate\", \"saturation\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\", \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"self-start\", \"self-end\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"sepia\", \"serif\", \"show\", \"sidama\", \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\", \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"somali\", \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"space-around\", \"space-between\", \"space-evenly\", \"spell-out\", \"square\", \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"stroke-box\", \"sub\", \"subpixel-antialiased\", \"svg_masks\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"system-ui\", \"table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\", \"tamil\", \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\", \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\", \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\", \"trad-chinese-formal\", \"trad-chinese-informal\", \"transform\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"unidirectional-pan\", \"unset\", \"up\", \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\", \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"view-box\", \"visible\", \"visibleFill\", \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\", \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\"],\n      valueKeywords = keySet(valueKeywords_);\n  var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_).concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_).concat(valueKeywords_);\n  CodeMirror.registerHelper(\"hintWords\", \"css\", allWords);\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = null;\n        break;\n      }\n\n      maybeEnd = ch == \"*\";\n    }\n\n    return [\"comment\", \"comment\"];\n  }\n\n  CodeMirror.defineMIME(\"text/css\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\"\n  });\n  CodeMirror.defineMIME(\"text/x-scss\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    lineComment: \"//\",\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \":\": function _(stream) {\n        if (stream.match(/^\\s*\\{/, false)) return [null, null];\n        return false;\n      },\n      \"$\": function $(stream) {\n        stream.match(/^[\\w-]+/);\n        if (stream.match(/^\\s*:/, false)) return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"#\": function _(stream) {\n        if (!stream.eat(\"{\")) return false;\n        return [null, \"interpolation\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"scss\"\n  });\n  CodeMirror.defineMIME(\"text/x-less\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    lineComment: \"//\",\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \"@\": function _(stream) {\n        if (stream.eat(\"{\")) return [null, \"interpolation\"];\n        if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/i, false)) return false;\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        if (stream.match(/^\\s*:/, false)) return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"&\": function _() {\n        return [\"atom\", \"atom\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"less\"\n  });\n  CodeMirror.defineMIME(\"text/x-gss\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    supportsAtComponent: true,\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\",\n    helperType: \"gss\"\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/css/css.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/handlebars/handlebars.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/handlebars/handlebars.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../../addon/mode/simple */ \"./resources/assets/vendor/libs/codemirror/addon/mode/simple.js\"), __webpack_require__(/*! ../../addon/mode/multiplex */ \"./resources/assets/vendor/libs/codemirror/addon/mode/multiplex.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../../addon/mode/simple */ \"./resources/assets/vendor/libs/codemirror/addon/mode/simple.js\"), __webpack_require__(/*! ../../addon/mode/multiplex */ \"./resources/assets/vendor/libs/codemirror/addon/mode/multiplex.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [{\n      regex: /\\{\\{\\{/,\n      push: \"handlebars_raw\",\n      token: \"tag\"\n    }, {\n      regex: /\\{\\{!--/,\n      push: \"dash_comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{!/,\n      push: \"comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{/,\n      push: \"handlebars\",\n      token: \"tag\"\n    }],\n    handlebars_raw: [{\n      regex: /\\}\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }],\n    handlebars: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }, // Double and single quotes\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?/,\n      token: \"string\"\n    }, // Handlebars keywords\n    {\n      regex: />|[#\\/]([A-Za-z_]\\w*)/,\n      token: \"keyword\"\n    }, {\n      regex: /(?:else|this)\\b/,\n      token: \"keyword\"\n    }, // Numeral\n    {\n      regex: /\\d+/i,\n      token: \"number\"\n    }, // Atoms like = and .\n    {\n      regex: /=|~|@|true|false/,\n      token: \"atom\"\n    }, // Paths\n    {\n      regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/,\n      token: \"variable-2\"\n    }],\n    dash_comment: [{\n      regex: /--\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, // Commented code\n    {\n      regex: /./,\n      token: \"comment\"\n    }],\n    comment: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, {\n      regex: /./,\n      token: \"comment\"\n    }],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n  CodeMirror.defineMode(\"handlebars\", function (config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: \"{{\",\n      close: /\\}\\}\\}?/,\n      mode: handlebars,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS9oYW5kbGViYXJzL2hhbmRsZWJhcnMuanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUVBLENBQUMsVUFBU0EsR0FBVCxFQUFjO0VBQ2IsSUFBSSxzQkFBT0MsT0FBUCxNQUFrQixRQUFsQixJQUE4QixzQkFBT0MsTUFBUCxNQUFpQixRQUFuRCxFQUE2RDtJQUMzREYsR0FBRyxDQUFDRyxtQkFBTyxDQUFDLG1KQUFELENBQVIsRUFBa0NBLG1CQUFPLENBQUMsK0ZBQUQsQ0FBekMsRUFBc0VBLG1CQUFPLENBQUMscUdBQUQsQ0FBN0UsQ0FBSCxDQURGLEtBRUssSUFBSSxJQUFKLEVBQStDO0lBQ2xEQyxpQ0FBTyxDQUFDLG1KQUFELEVBQXlCLG9IQUF6QixFQUFvRCwwSEFBcEQsQ0FBRCxvQ0FBb0ZKLEdBQXBGO0FBQUE7QUFBQTtBQUFBLGtHQUFOLENBREcsS0FFQTtJQUNIQSxFQUFBO0FBQ0gsQ0FQRCxFQU9HLFVBQVNNLFVBQVQsRUFBcUI7RUFDdEI7O0VBRUFBLFVBQVUsQ0FBQ0MsZ0JBQVgsQ0FBNEIsaUJBQTVCLEVBQStDO0lBQzdDQyxLQUFLLEVBQUUsQ0FDTDtNQUFFQyxLQUFLLEVBQUUsUUFBVDtNQUFtQkMsSUFBSSxFQUFFLGdCQUF6QjtNQUEyQ0MsS0FBSyxFQUFFO0lBQWxELENBREssRUFFTDtNQUFFRixLQUFLLEVBQUUsU0FBVDtNQUFvQkMsSUFBSSxFQUFFLGNBQTFCO01BQTBDQyxLQUFLLEVBQUU7SUFBakQsQ0FGSyxFQUdMO01BQUVGLEtBQUssRUFBRSxPQUFUO01BQW9CQyxJQUFJLEVBQUUsU0FBMUI7TUFBcUNDLEtBQUssRUFBRTtJQUE1QyxDQUhLLEVBSUw7TUFBRUYsS0FBSyxFQUFFLE1BQVQ7TUFBb0JDLElBQUksRUFBRSxZQUExQjtNQUF3Q0MsS0FBSyxFQUFFO0lBQS9DLENBSkssQ0FEc0M7SUFPN0NDLGNBQWMsRUFBRSxDQUNkO01BQUVILEtBQUssRUFBRSxRQUFUO01BQW1CSSxHQUFHLEVBQUUsSUFBeEI7TUFBOEJGLEtBQUssRUFBRTtJQUFyQyxDQURjLENBUDZCO0lBVTdDRyxVQUFVLEVBQUUsQ0FDVjtNQUFFTCxLQUFLLEVBQUUsTUFBVDtNQUFpQkksR0FBRyxFQUFFLElBQXRCO01BQTRCRixLQUFLLEVBQUU7SUFBbkMsQ0FEVSxFQUdWO0lBQ0E7TUFBRUYsS0FBSyxFQUFFLG9CQUFUO01BQStCRSxLQUFLLEVBQUU7SUFBdEMsQ0FKVSxFQUtWO01BQUVGLEtBQUssRUFBRSxvQkFBVDtNQUErQkUsS0FBSyxFQUFFO0lBQXRDLENBTFUsRUFPVjtJQUNBO01BQUVGLEtBQUssRUFBRSx1QkFBVDtNQUFrQ0UsS0FBSyxFQUFFO0lBQXpDLENBUlUsRUFTVjtNQUFFRixLQUFLLEVBQUUsaUJBQVQ7TUFBNEJFLEtBQUssRUFBRTtJQUFuQyxDQVRVLEVBV1Y7SUFDQTtNQUFFRixLQUFLLEVBQUUsTUFBVDtNQUFpQkUsS0FBSyxFQUFFO0lBQXhCLENBWlUsRUFjVjtJQUNBO01BQUVGLEtBQUssRUFBRSxrQkFBVDtNQUE2QkUsS0FBSyxFQUFFO0lBQXBDLENBZlUsRUFpQlY7SUFDQTtNQUFFRixLQUFLLEVBQUUsa0NBQVQ7TUFBNkNFLEtBQUssRUFBRTtJQUFwRCxDQWxCVSxDQVZpQztJQThCN0NJLFlBQVksRUFBRSxDQUNaO01BQUVOLEtBQUssRUFBRSxRQUFUO01BQW1CSSxHQUFHLEVBQUUsSUFBeEI7TUFBOEJGLEtBQUssRUFBRTtJQUFyQyxDQURZLEVBR1o7SUFDQTtNQUFFRixLQUFLLEVBQUUsR0FBVDtNQUFjRSxLQUFLLEVBQUU7SUFBckIsQ0FKWSxDQTlCK0I7SUFvQzdDSyxPQUFPLEVBQUUsQ0FDUDtNQUFFUCxLQUFLLEVBQUUsTUFBVDtNQUFpQkksR0FBRyxFQUFFLElBQXRCO01BQTRCRixLQUFLLEVBQUU7SUFBbkMsQ0FETyxFQUVQO01BQUVGLEtBQUssRUFBRSxHQUFUO01BQWNFLEtBQUssRUFBRTtJQUFyQixDQUZPLENBcENvQztJQXdDN0NNLElBQUksRUFBRTtNQUNKQyxpQkFBaUIsRUFBRSxNQURmO01BRUpDLGVBQWUsRUFBRTtJQUZiO0VBeEN1QyxDQUEvQztFQThDQWIsVUFBVSxDQUFDYyxVQUFYLENBQXNCLFlBQXRCLEVBQW9DLFVBQVNDLE1BQVQsRUFBaUJDLFlBQWpCLEVBQStCO0lBQ2pFLElBQUlSLFVBQVUsR0FBR1IsVUFBVSxDQUFDaUIsT0FBWCxDQUFtQkYsTUFBbkIsRUFBMkIsaUJBQTNCLENBQWpCO0lBQ0EsSUFBSSxDQUFDQyxZQUFELElBQWlCLENBQUNBLFlBQVksQ0FBQ0UsSUFBbkMsRUFBeUMsT0FBT1YsVUFBUDtJQUN6QyxPQUFPUixVQUFVLENBQUNtQixnQkFBWCxDQUNMbkIsVUFBVSxDQUFDaUIsT0FBWCxDQUFtQkYsTUFBbkIsRUFBMkJDLFlBQVksQ0FBQ0UsSUFBeEMsQ0FESyxFQUVMO01BQUNFLElBQUksRUFBRSxJQUFQO01BQWFDLEtBQUssRUFBRSxTQUFwQjtNQUErQkMsSUFBSSxFQUFFZCxVQUFyQztNQUFpRGUsZUFBZSxFQUFFO0lBQWxFLENBRkssQ0FBUDtFQUlELENBUEQ7RUFTQXZCLFVBQVUsQ0FBQ3dCLFVBQVgsQ0FBc0IsNEJBQXRCLEVBQW9ELFlBQXBEO0FBQ0QsQ0FsRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS9oYW5kbGViYXJzL2hhbmRsZWJhcnMuanM/OWU0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRVxuXG4oZnVuY3Rpb24obW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgLy8gQ29tbW9uSlNcbiAgICBtb2QocmVxdWlyZShcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIpLCByZXF1aXJlKFwiLi4vLi4vYWRkb24vbW9kZS9zaW1wbGVcIiksIHJlcXVpcmUoXCIuLi8uLi9hZGRvbi9tb2RlL211bHRpcGxleFwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiLCBcIi4uLy4uL2FkZG9uL21vZGUvc2ltcGxlXCIsIFwiLi4vLi4vYWRkb24vbW9kZS9tdWx0aXBsZXhcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIENvZGVNaXJyb3IuZGVmaW5lU2ltcGxlTW9kZShcImhhbmRsZWJhcnMtdGFnc1wiLCB7XG4gICAgc3RhcnQ6IFtcbiAgICAgIHsgcmVnZXg6IC9cXHtcXHtcXHsvLCBwdXNoOiBcImhhbmRsZWJhcnNfcmF3XCIsIHRva2VuOiBcInRhZ1wiIH0sXG4gICAgICB7IHJlZ2V4OiAvXFx7XFx7IS0tLywgcHVzaDogXCJkYXNoX2NvbW1lbnRcIiwgdG9rZW46IFwiY29tbWVudFwiIH0sXG4gICAgICB7IHJlZ2V4OiAvXFx7XFx7IS8sICAgcHVzaDogXCJjb21tZW50XCIsIHRva2VuOiBcImNvbW1lbnRcIiB9LFxuICAgICAgeyByZWdleDogL1xce1xcey8sICAgIHB1c2g6IFwiaGFuZGxlYmFyc1wiLCB0b2tlbjogXCJ0YWdcIiB9XG4gICAgXSxcbiAgICBoYW5kbGViYXJzX3JhdzogW1xuICAgICAgeyByZWdleDogL1xcfVxcfVxcfS8sIHBvcDogdHJ1ZSwgdG9rZW46IFwidGFnXCIgfSxcbiAgICBdLFxuICAgIGhhbmRsZWJhcnM6IFtcbiAgICAgIHsgcmVnZXg6IC9cXH1cXH0vLCBwb3A6IHRydWUsIHRva2VuOiBcInRhZ1wiIH0sXG5cbiAgICAgIC8vIERvdWJsZSBhbmQgc2luZ2xlIHF1b3Rlc1xuICAgICAgeyByZWdleDogL1wiKD86W15cXFxcXCJdfFxcXFwuKSpcIj8vLCB0b2tlbjogXCJzdHJpbmdcIiB9LFxuICAgICAgeyByZWdleDogLycoPzpbXlxcXFwnXXxcXFxcLikqJz8vLCB0b2tlbjogXCJzdHJpbmdcIiB9LFxuXG4gICAgICAvLyBIYW5kbGViYXJzIGtleXdvcmRzXG4gICAgICB7IHJlZ2V4OiAvPnxbI1xcL10oW0EtWmEtel9dXFx3KikvLCB0b2tlbjogXCJrZXl3b3JkXCIgfSxcbiAgICAgIHsgcmVnZXg6IC8oPzplbHNlfHRoaXMpXFxiLywgdG9rZW46IFwia2V5d29yZFwiIH0sXG5cbiAgICAgIC8vIE51bWVyYWxcbiAgICAgIHsgcmVnZXg6IC9cXGQrL2ksIHRva2VuOiBcIm51bWJlclwiIH0sXG5cbiAgICAgIC8vIEF0b21zIGxpa2UgPSBhbmQgLlxuICAgICAgeyByZWdleDogLz18fnxAfHRydWV8ZmFsc2UvLCB0b2tlbjogXCJhdG9tXCIgfSxcblxuICAgICAgLy8gUGF0aHNcbiAgICAgIHsgcmVnZXg6IC8oPzpcXC5cXC5cXC8pKig/OltBLVphLXpfXVtcXHdcXC5dKikrLywgdG9rZW46IFwidmFyaWFibGUtMlwiIH1cbiAgICBdLFxuICAgIGRhc2hfY29tbWVudDogW1xuICAgICAgeyByZWdleDogLy0tXFx9XFx9LywgcG9wOiB0cnVlLCB0b2tlbjogXCJjb21tZW50XCIgfSxcblxuICAgICAgLy8gQ29tbWVudGVkIGNvZGVcbiAgICAgIHsgcmVnZXg6IC8uLywgdG9rZW46IFwiY29tbWVudFwifVxuICAgIF0sXG4gICAgY29tbWVudDogW1xuICAgICAgeyByZWdleDogL1xcfVxcfS8sIHBvcDogdHJ1ZSwgdG9rZW46IFwiY29tbWVudFwiIH0sXG4gICAgICB7IHJlZ2V4OiAvLi8sIHRva2VuOiBcImNvbW1lbnRcIiB9XG4gICAgXSxcbiAgICBtZXRhOiB7XG4gICAgICBibG9ja0NvbW1lbnRTdGFydDogXCJ7ey0tXCIsXG4gICAgICBibG9ja0NvbW1lbnRFbmQ6IFwiLS19fVwiXG4gICAgfVxuICB9KTtcblxuICBDb2RlTWlycm9yLmRlZmluZU1vZGUoXCJoYW5kbGViYXJzXCIsIGZ1bmN0aW9uKGNvbmZpZywgcGFyc2VyQ29uZmlnKSB7XG4gICAgdmFyIGhhbmRsZWJhcnMgPSBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCBcImhhbmRsZWJhcnMtdGFnc1wiKTtcbiAgICBpZiAoIXBhcnNlckNvbmZpZyB8fCAhcGFyc2VyQ29uZmlnLmJhc2UpIHJldHVybiBoYW5kbGViYXJzO1xuICAgIHJldHVybiBDb2RlTWlycm9yLm11bHRpcGxleGluZ01vZGUoXG4gICAgICBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCBwYXJzZXJDb25maWcuYmFzZSksXG4gICAgICB7b3BlbjogXCJ7e1wiLCBjbG9zZTogL1xcfVxcfVxcfT8vLCBtb2RlOiBoYW5kbGViYXJzLCBwYXJzZURlbGltaXRlcnM6IHRydWV9XG4gICAgKTtcbiAgfSk7XG5cbiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC94LWhhbmRsZWJhcnMtdGVtcGxhdGVcIiwgXCJoYW5kbGViYXJzXCIpO1xufSk7XG4iXSwibmFtZXMiOlsibW9kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJDb2RlTWlycm9yIiwiZGVmaW5lU2ltcGxlTW9kZSIsInN0YXJ0IiwicmVnZXgiLCJwdXNoIiwidG9rZW4iLCJoYW5kbGViYXJzX3JhdyIsInBvcCIsImhhbmRsZWJhcnMiLCJkYXNoX2NvbW1lbnQiLCJjb21tZW50IiwibWV0YSIsImJsb2NrQ29tbWVudFN0YXJ0IiwiYmxvY2tDb21tZW50RW5kIiwiZGVmaW5lTW9kZSIsImNvbmZpZyIsInBhcnNlckNvbmZpZyIsImdldE1vZGUiLCJiYXNlIiwibXVsdGlwbGV4aW5nTW9kZSIsIm9wZW4iLCJjbG9zZSIsIm1vZGUiLCJwYXJzZURlbGltaXRlcnMiLCJkZWZpbmVNSU1FIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/handlebars/handlebars.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag,\n      allowMissingTagName: parserConfig.allowMissingTagName\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter, line);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var trackScope = parserConfig.trackScope !== false;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\" && stream.peek() == \"!\") {\n        stream.skipToEnd();\n        return ret(\"meta\", \"meta\");\n      } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n        return ret(\"variable\", \"property\");\n      } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-|&?]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/`]/.test(ch)) {\n          for (;; --pos) {\n            if (pos == 0) return;\n            var next = stream.string.charAt(pos - 1);\n\n            if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n              pos--;\n              break;\n            }\n          }\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"import\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      if (!trackScope) return false;\n\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) {\n          if (v.name == varname) return true;\n        }\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n      if (!trackScope) return;\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    pushcontext.lex = pushblockcontext.lex = true;\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n          indent = outer.indented;\n        }\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, statement, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(maybeexpression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(maybeexpression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        if (sep && sep.indexOf(\";\") > -1) return pass(what);\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) {\n        cx.cc.push(arguments[i]);\n      }\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function maybetypeOrIn(type, value) {\n      if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (value == \"|\" || value == \"&\") return cont(typeexpr);\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n\n      if (type == \"quasi\") {\n        return pass(quasiType, afterType);\n      }\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprops(type) {\n      if (type.match(/[\\}\\)\\]]/)) return cont();\n      if (type == \",\" || type == \";\") return cont(typeprops);\n      return pass(typeprop, typeprops);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n      } else if (type == \"(\") {\n        return pass(functiondecl, typeprop);\n      } else if (!type.match(/[;\\}\\)\\],]/)) {\n        return cont();\n      }\n    }\n\n    function quasiType(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n      return cont(typeexpr, continueQuasiType);\n    }\n\n    function continueQuasiType(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasiType);\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      if (type == \"spread\") return cont(typearg);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n\n      if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, forspec2);\n      if (type == \"variable\") return cont(forspec2);\n      return pass(forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \")\") return cont();\n      if (type == \";\") return cont(forspec2);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression, forspec2);\n      }\n\n      return pass(expression, forspec2);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function functiondecl(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondecl);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondecl);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n\n    function typename(type, value) {\n      if (type == \"keyword\" || type == \"variable\") {\n        cx.marked = \"type\";\n        return cont(typename);\n      } else if (value == \"<\") {\n        return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n      }\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(classfield, classBody);\n      }\n\n      if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (isTS && type == \"(\") return pass(functiondecl, classBody);\n      if (type == \";\" || type == \",\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"!\") return cont(classfield);\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      var context = cx.state.lexical.prev,\n          isInterface = context && context.info == \"interface\";\n      return pass(isInterface ? functiondecl : functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      if (type == \".\") return pass(maybeoperatorComma);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && _typeof(parserConfig.globalVars) == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n          lexical = lexical.prev;\n        }\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function skipExpression(state) {\n        parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null));\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/manifest+json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/pug/pug.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/pug/pug.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\"), __webpack_require__(/*! ../htmlmixed/htmlmixed */ \"./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\"), __webpack_require__(/*! ../htmlmixed/htmlmixed */ \"./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pug\", function (config) {\n    // token types\n    var KEYWORD = 'keyword';\n    var DOCTYPE = 'meta';\n    var ID = 'builtin';\n    var CLASS = 'qualifier';\n    var ATTRS_NEST = {\n      '{': '}',\n      '(': ')',\n      '[': ']'\n    };\n    var jsMode = CodeMirror.getMode(config, 'javascript');\n\n    function State() {\n      this.javaScriptLine = false;\n      this.javaScriptLineExcludesColon = false;\n      this.javaScriptArguments = false;\n      this.javaScriptArgumentsDepth = 0;\n      this.isInterpolating = false;\n      this.interpolationNesting = 0;\n      this.jsState = CodeMirror.startState(jsMode);\n      this.restOfLine = '';\n      this.isIncludeFiltered = false;\n      this.isEach = false;\n      this.lastTag = '';\n      this.scriptType = ''; // Attributes Mode\n\n      this.isAttrs = false;\n      this.attrsNest = [];\n      this.inAttributeName = true;\n      this.attributeIsType = false;\n      this.attrValue = ''; // Indented Mode\n\n      this.indentOf = Infinity;\n      this.indentToken = '';\n      this.innerMode = null;\n      this.innerState = null;\n      this.innerModeForLine = false;\n    }\n    /**\n     * Safely copy a state\n     *\n     * @return {State}\n     */\n\n\n    State.prototype.copy = function () {\n      var res = new State();\n      res.javaScriptLine = this.javaScriptLine;\n      res.javaScriptLineExcludesColon = this.javaScriptLineExcludesColon;\n      res.javaScriptArguments = this.javaScriptArguments;\n      res.javaScriptArgumentsDepth = this.javaScriptArgumentsDepth;\n      res.isInterpolating = this.isInterpolating;\n      res.interpolationNesting = this.interpolationNesting;\n      res.jsState = CodeMirror.copyState(jsMode, this.jsState);\n      res.innerMode = this.innerMode;\n\n      if (this.innerMode && this.innerState) {\n        res.innerState = CodeMirror.copyState(this.innerMode, this.innerState);\n      }\n\n      res.restOfLine = this.restOfLine;\n      res.isIncludeFiltered = this.isIncludeFiltered;\n      res.isEach = this.isEach;\n      res.lastTag = this.lastTag;\n      res.scriptType = this.scriptType;\n      res.isAttrs = this.isAttrs;\n      res.attrsNest = this.attrsNest.slice();\n      res.inAttributeName = this.inAttributeName;\n      res.attributeIsType = this.attributeIsType;\n      res.attrValue = this.attrValue;\n      res.indentOf = this.indentOf;\n      res.indentToken = this.indentToken;\n      res.innerModeForLine = this.innerModeForLine;\n      return res;\n    };\n\n    function javaScript(stream, state) {\n      if (stream.sol()) {\n        // if javaScriptLine was set at end of line, ignore it\n        state.javaScriptLine = false;\n        state.javaScriptLineExcludesColon = false;\n      }\n\n      if (state.javaScriptLine) {\n        if (state.javaScriptLineExcludesColon && stream.peek() === ':') {\n          state.javaScriptLine = false;\n          state.javaScriptLineExcludesColon = false;\n          return;\n        }\n\n        var tok = jsMode.token(stream, state.jsState);\n        if (stream.eol()) state.javaScriptLine = false;\n        return tok || true;\n      }\n    }\n\n    function javaScriptArguments(stream, state) {\n      if (state.javaScriptArguments) {\n        if (state.javaScriptArgumentsDepth === 0 && stream.peek() !== '(') {\n          state.javaScriptArguments = false;\n          return;\n        }\n\n        if (stream.peek() === '(') {\n          state.javaScriptArgumentsDepth++;\n        } else if (stream.peek() === ')') {\n          state.javaScriptArgumentsDepth--;\n        }\n\n        if (state.javaScriptArgumentsDepth === 0) {\n          state.javaScriptArguments = false;\n          return;\n        }\n\n        var tok = jsMode.token(stream, state.jsState);\n        return tok || true;\n      }\n    }\n\n    function yieldStatement(stream) {\n      if (stream.match(/^yield\\b/)) {\n        return 'keyword';\n      }\n    }\n\n    function doctype(stream) {\n      if (stream.match(/^(?:doctype) *([^\\n]+)?/)) {\n        return DOCTYPE;\n      }\n    }\n\n    function interpolation(stream, state) {\n      if (stream.match('#{')) {\n        state.isInterpolating = true;\n        state.interpolationNesting = 0;\n        return 'punctuation';\n      }\n    }\n\n    function interpolationContinued(stream, state) {\n      if (state.isInterpolating) {\n        if (stream.peek() === '}') {\n          state.interpolationNesting--;\n\n          if (state.interpolationNesting < 0) {\n            stream.next();\n            state.isInterpolating = false;\n            return 'punctuation';\n          }\n        } else if (stream.peek() === '{') {\n          state.interpolationNesting++;\n        }\n\n        return jsMode.token(stream, state.jsState) || true;\n      }\n    }\n\n    function caseStatement(stream, state) {\n      if (stream.match(/^case\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function when(stream, state) {\n      if (stream.match(/^when\\b/)) {\n        state.javaScriptLine = true;\n        state.javaScriptLineExcludesColon = true;\n        return KEYWORD;\n      }\n    }\n\n    function defaultStatement(stream) {\n      if (stream.match(/^default\\b/)) {\n        return KEYWORD;\n      }\n    }\n\n    function extendsStatement(stream, state) {\n      if (stream.match(/^extends?\\b/)) {\n        state.restOfLine = 'string';\n        return KEYWORD;\n      }\n    }\n\n    function append(stream, state) {\n      if (stream.match(/^append\\b/)) {\n        state.restOfLine = 'variable';\n        return KEYWORD;\n      }\n    }\n\n    function prepend(stream, state) {\n      if (stream.match(/^prepend\\b/)) {\n        state.restOfLine = 'variable';\n        return KEYWORD;\n      }\n    }\n\n    function block(stream, state) {\n      if (stream.match(/^block\\b *(?:(prepend|append)\\b)?/)) {\n        state.restOfLine = 'variable';\n        return KEYWORD;\n      }\n    }\n\n    function include(stream, state) {\n      if (stream.match(/^include\\b/)) {\n        state.restOfLine = 'string';\n        return KEYWORD;\n      }\n    }\n\n    function includeFiltered(stream, state) {\n      if (stream.match(/^include:([a-zA-Z0-9\\-]+)/, false) && stream.match('include')) {\n        state.isIncludeFiltered = true;\n        return KEYWORD;\n      }\n    }\n\n    function includeFilteredContinued(stream, state) {\n      if (state.isIncludeFiltered) {\n        var tok = filter(stream, state);\n        state.isIncludeFiltered = false;\n        state.restOfLine = 'string';\n        return tok;\n      }\n    }\n\n    function mixin(stream, state) {\n      if (stream.match(/^mixin\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function call(stream, state) {\n      if (stream.match(/^\\+([-\\w]+)/)) {\n        if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n          state.javaScriptArguments = true;\n          state.javaScriptArgumentsDepth = 0;\n        }\n\n        return 'variable';\n      }\n\n      if (stream.match('+#{', false)) {\n        stream.next();\n        state.mixinCallAfter = true;\n        return interpolation(stream, state);\n      }\n    }\n\n    function callArguments(stream, state) {\n      if (state.mixinCallAfter) {\n        state.mixinCallAfter = false;\n\n        if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n          state.javaScriptArguments = true;\n          state.javaScriptArgumentsDepth = 0;\n        }\n\n        return true;\n      }\n    }\n\n    function conditional(stream, state) {\n      if (stream.match(/^(if|unless|else if|else)\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function each(stream, state) {\n      if (stream.match(/^(- *)?(each|for)\\b/)) {\n        state.isEach = true;\n        return KEYWORD;\n      }\n    }\n\n    function eachContinued(stream, state) {\n      if (state.isEach) {\n        if (stream.match(/^ in\\b/)) {\n          state.javaScriptLine = true;\n          state.isEach = false;\n          return KEYWORD;\n        } else if (stream.sol() || stream.eol()) {\n          state.isEach = false;\n        } else if (stream.next()) {\n          while (!stream.match(/^ in\\b/, false) && stream.next()) {\n            ;\n          }\n\n          return 'variable';\n        }\n      }\n    }\n\n    function whileStatement(stream, state) {\n      if (stream.match(/^while\\b/)) {\n        state.javaScriptLine = true;\n        return KEYWORD;\n      }\n    }\n\n    function tag(stream, state) {\n      var captures;\n\n      if (captures = stream.match(/^(\\w(?:[-:\\w]*\\w)?)\\/?/)) {\n        state.lastTag = captures[1].toLowerCase();\n\n        if (state.lastTag === 'script') {\n          state.scriptType = 'application/javascript';\n        }\n\n        return 'tag';\n      }\n    }\n\n    function filter(stream, state) {\n      if (stream.match(/^:([\\w\\-]+)/)) {\n        var innerMode;\n\n        if (config && config.innerModes) {\n          innerMode = config.innerModes(stream.current().substring(1));\n        }\n\n        if (!innerMode) {\n          innerMode = stream.current().substring(1);\n        }\n\n        if (typeof innerMode === 'string') {\n          innerMode = CodeMirror.getMode(config, innerMode);\n        }\n\n        setInnerMode(stream, state, innerMode);\n        return 'atom';\n      }\n    }\n\n    function code(stream, state) {\n      if (stream.match(/^(!?=|-)/)) {\n        state.javaScriptLine = true;\n        return 'punctuation';\n      }\n    }\n\n    function id(stream) {\n      if (stream.match(/^#([\\w-]+)/)) {\n        return ID;\n      }\n    }\n\n    function className(stream) {\n      if (stream.match(/^\\.([\\w-]+)/)) {\n        return CLASS;\n      }\n    }\n\n    function attrs(stream, state) {\n      if (stream.peek() == '(') {\n        stream.next();\n        state.isAttrs = true;\n        state.attrsNest = [];\n        state.inAttributeName = true;\n        state.attrValue = '';\n        state.attributeIsType = false;\n        return 'punctuation';\n      }\n    }\n\n    function attrsContinued(stream, state) {\n      if (state.isAttrs) {\n        if (ATTRS_NEST[stream.peek()]) {\n          state.attrsNest.push(ATTRS_NEST[stream.peek()]);\n        }\n\n        if (state.attrsNest[state.attrsNest.length - 1] === stream.peek()) {\n          state.attrsNest.pop();\n        } else if (stream.eat(')')) {\n          state.isAttrs = false;\n          return 'punctuation';\n        }\n\n        if (state.inAttributeName && stream.match(/^[^=,\\)!]+/)) {\n          if (stream.peek() === '=' || stream.peek() === '!') {\n            state.inAttributeName = false;\n            state.jsState = CodeMirror.startState(jsMode);\n\n            if (state.lastTag === 'script' && stream.current().trim().toLowerCase() === 'type') {\n              state.attributeIsType = true;\n            } else {\n              state.attributeIsType = false;\n            }\n          }\n\n          return 'attribute';\n        }\n\n        var tok = jsMode.token(stream, state.jsState);\n\n        if (state.attributeIsType && tok === 'string') {\n          state.scriptType = stream.current().toString();\n        }\n\n        if (state.attrsNest.length === 0 && (tok === 'string' || tok === 'variable' || tok === 'keyword')) {\n          try {\n            Function('', 'var x ' + state.attrValue.replace(/,\\s*$/, '').replace(/^!/, ''));\n            state.inAttributeName = true;\n            state.attrValue = '';\n            stream.backUp(stream.current().length);\n            return attrsContinued(stream, state);\n          } catch (ex) {//not the end of an attribute\n          }\n        }\n\n        state.attrValue += stream.current();\n        return tok || true;\n      }\n    }\n\n    function attributesBlock(stream, state) {\n      if (stream.match(/^&attributes\\b/)) {\n        state.javaScriptArguments = true;\n        state.javaScriptArgumentsDepth = 0;\n        return 'keyword';\n      }\n    }\n\n    function indent(stream) {\n      if (stream.sol() && stream.eatSpace()) {\n        return 'indent';\n      }\n    }\n\n    function comment(stream, state) {\n      if (stream.match(/^ *\\/\\/(-)?([^\\n]*)/)) {\n        state.indentOf = stream.indentation();\n        state.indentToken = 'comment';\n        return 'comment';\n      }\n    }\n\n    function colon(stream) {\n      if (stream.match(/^: */)) {\n        return 'colon';\n      }\n    }\n\n    function text(stream, state) {\n      if (stream.match(/^(?:\\| ?| )([^\\n]+)/)) {\n        return 'string';\n      }\n\n      if (stream.match(/^(<[^\\n]*)/, false)) {\n        // html string\n        setInnerMode(stream, state, 'htmlmixed');\n        state.innerModeForLine = true;\n        return innerMode(stream, state, true);\n      }\n    }\n\n    function dot(stream, state) {\n      if (stream.eat('.')) {\n        var innerMode = null;\n\n        if (state.lastTag === 'script' && state.scriptType.toLowerCase().indexOf('javascript') != -1) {\n          innerMode = state.scriptType.toLowerCase().replace(/\"|'/g, '');\n        } else if (state.lastTag === 'style') {\n          innerMode = 'css';\n        }\n\n        setInnerMode(stream, state, innerMode);\n        return 'dot';\n      }\n    }\n\n    function fail(stream) {\n      stream.next();\n      return null;\n    }\n\n    function setInnerMode(stream, state, mode) {\n      mode = CodeMirror.mimeModes[mode] || mode;\n      mode = config.innerModes ? config.innerModes(mode) || mode : mode;\n      mode = CodeMirror.mimeModes[mode] || mode;\n      mode = CodeMirror.getMode(config, mode);\n      state.indentOf = stream.indentation();\n\n      if (mode && mode.name !== 'null') {\n        state.innerMode = mode;\n      } else {\n        state.indentToken = 'string';\n      }\n    }\n\n    function innerMode(stream, state, force) {\n      if (stream.indentation() > state.indentOf || state.innerModeForLine && !stream.sol() || force) {\n        if (state.innerMode) {\n          if (!state.innerState) {\n            state.innerState = state.innerMode.startState ? CodeMirror.startState(state.innerMode, stream.indentation()) : {};\n          }\n\n          return stream.hideFirstChars(state.indentOf + 2, function () {\n            return state.innerMode.token(stream, state.innerState) || true;\n          });\n        } else {\n          stream.skipToEnd();\n          return state.indentToken;\n        }\n      } else if (stream.sol()) {\n        state.indentOf = Infinity;\n        state.indentToken = null;\n        state.innerMode = null;\n        state.innerState = null;\n      }\n    }\n\n    function restOfLine(stream, state) {\n      if (stream.sol()) {\n        // if restOfLine was set at end of line, ignore it\n        state.restOfLine = '';\n      }\n\n      if (state.restOfLine) {\n        stream.skipToEnd();\n        var tok = state.restOfLine;\n        state.restOfLine = '';\n        return tok;\n      }\n    }\n\n    function startState() {\n      return new State();\n    }\n\n    function copyState(state) {\n      return state.copy();\n    }\n    /**\n     * Get the next token in the stream\n     *\n     * @param {Stream} stream\n     * @param {State} state\n     */\n\n\n    function nextToken(stream, state) {\n      var tok = innerMode(stream, state) || restOfLine(stream, state) || interpolationContinued(stream, state) || includeFilteredContinued(stream, state) || eachContinued(stream, state) || attrsContinued(stream, state) || javaScript(stream, state) || javaScriptArguments(stream, state) || callArguments(stream, state) || yieldStatement(stream) || doctype(stream) || interpolation(stream, state) || caseStatement(stream, state) || when(stream, state) || defaultStatement(stream) || extendsStatement(stream, state) || append(stream, state) || prepend(stream, state) || block(stream, state) || include(stream, state) || includeFiltered(stream, state) || mixin(stream, state) || call(stream, state) || conditional(stream, state) || each(stream, state) || whileStatement(stream, state) || tag(stream, state) || filter(stream, state) || code(stream, state) || id(stream) || className(stream) || attrs(stream, state) || attributesBlock(stream, state) || indent(stream) || text(stream, state) || comment(stream, state) || colon(stream) || dot(stream, state) || fail(stream);\n      return tok === true ? null : tok;\n    }\n\n    return {\n      startState: startState,\n      copyState: copyState,\n      token: nextToken\n    };\n  }, 'javascript', 'css', 'htmlmixed');\n  CodeMirror.defineMIME('text/x-pug', 'pug');\n  CodeMirror.defineMIME('text/x-jade', 'pug');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS9wdWcvcHVnLmpzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFFQSxDQUFDLFVBQVNBLEdBQVQsRUFBYztFQUNiLElBQUksc0JBQU9DLE9BQVAsTUFBa0IsUUFBbEIsSUFBOEIsc0JBQU9DLE1BQVAsTUFBaUIsUUFBbkQsRUFBNkQ7SUFDM0RGLEdBQUcsQ0FBQ0csbUJBQU8sQ0FBQyxtSkFBRCxDQUFSLEVBQWtDQSxtQkFBTyxDQUFDLHlHQUFELENBQXpDLEVBQXVFQSxtQkFBTyxDQUFDLDZFQUFELENBQTlFLEVBQThGQSxtQkFBTyxDQUFDLHFHQUFELENBQXJHLENBQUgsQ0FERixLQUVLLElBQUksSUFBSixFQUErQztJQUNsREMsaUNBQU8sQ0FBQyxtSkFBRCxFQUF5Qiw4SEFBekIsRUFBcUQsa0dBQXJELEVBQW1FLDBIQUFuRSxDQUFELG9DQUErRkosR0FBL0Y7QUFBQTtBQUFBO0FBQUEsa0dBQU4sQ0FERyxLQUVBO0lBQ0hBLEVBQUE7QUFDSCxDQVBELEVBT0csVUFBU00sVUFBVCxFQUFxQjtFQUN4Qjs7RUFFQUEsVUFBVSxDQUFDQyxVQUFYLENBQXNCLEtBQXRCLEVBQTZCLFVBQVVDLE1BQVYsRUFBa0I7SUFDN0M7SUFDQSxJQUFJQyxPQUFPLEdBQUcsU0FBZDtJQUNBLElBQUlDLE9BQU8sR0FBRyxNQUFkO0lBQ0EsSUFBSUMsRUFBRSxHQUFHLFNBQVQ7SUFDQSxJQUFJQyxLQUFLLEdBQUcsV0FBWjtJQUVBLElBQUlDLFVBQVUsR0FBRztNQUNmLEtBQUssR0FEVTtNQUVmLEtBQUssR0FGVTtNQUdmLEtBQUs7SUFIVSxDQUFqQjtJQU1BLElBQUlDLE1BQU0sR0FBR1IsVUFBVSxDQUFDUyxPQUFYLENBQW1CUCxNQUFuQixFQUEyQixZQUEzQixDQUFiOztJQUVBLFNBQVNRLEtBQVQsR0FBaUI7TUFDZixLQUFLQyxjQUFMLEdBQXNCLEtBQXRCO01BQ0EsS0FBS0MsMkJB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QixFQUFvQyxLQUFwQztFQUNBaEgsVUFBVSxDQUFDZ0gsVUFBWCxDQUFzQixhQUF0QixFQUFxQyxLQUFyQztBQUVDLENBM2tCRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvdmVuZG9yL2xpYnMvY29kZW1pcnJvci9tb2RlL3B1Zy9wdWcuanM/ZGY0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRVxuXG4oZnVuY3Rpb24obW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgLy8gQ29tbW9uSlNcbiAgICBtb2QocmVxdWlyZShcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIpLCByZXF1aXJlKFwiLi4vamF2YXNjcmlwdC9qYXZhc2NyaXB0XCIpLCByZXF1aXJlKFwiLi4vY3NzL2Nzc1wiKSwgcmVxdWlyZShcIi4uL2h0bWxtaXhlZC9odG1sbWl4ZWRcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vLi4vbGliL2NvZGVtaXJyb3JcIiwgXCIuLi9qYXZhc2NyaXB0L2phdmFzY3JpcHRcIiwgXCIuLi9jc3MvY3NzXCIsIFwiLi4vaHRtbG1peGVkL2h0bWxtaXhlZFwiXSwgbW9kKTtcbiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudlxuICAgIG1vZChDb2RlTWlycm9yKTtcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcblwidXNlIHN0cmljdFwiO1xuXG5Db2RlTWlycm9yLmRlZmluZU1vZGUoXCJwdWdcIiwgZnVuY3Rpb24gKGNvbmZpZykge1xuICAvLyB0b2tlbiB0eXBlc1xuICB2YXIgS0VZV09SRCA9ICdrZXl3b3JkJztcbiAgdmFyIERPQ1RZUEUgPSAnbWV0YSc7XG4gIHZhciBJRCA9ICdidWlsdGluJztcbiAgdmFyIENMQVNTID0gJ3F1YWxpZmllcic7XG5cbiAgdmFyIEFUVFJTX05FU1QgPSB7XG4gICAgJ3snOiAnfScsXG4gICAgJygnOiAnKScsXG4gICAgJ1snOiAnXSdcbiAgfTtcblxuICB2YXIganNNb2RlID0gQ29kZU1pcnJvci5nZXRNb2RlKGNvbmZpZywgJ2phdmFzY3JpcHQnKTtcblxuICBmdW5jdGlvbiBTdGF0ZSgpIHtcbiAgICB0aGlzLmphdmFTY3JpcHRMaW5lID0gZmFsc2U7XG4gICAgdGhpcy5qYXZhU2NyaXB0TGluZUV4Y2x1ZGVzQ29sb24gPSBmYWxzZTtcblxuICAgIHRoaXMuamF2YVNjcmlwdEFyZ3VtZW50cyA9IGZhbHNlO1xuICAgIHRoaXMuamF2YVNjcmlwdEFyZ3VtZW50c0RlcHRoID0gMDtcblxuICAgIHRoaXMuaXNJbnRlcnBvbGF0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5pbnRlcnBvbGF0aW9uTmVzdGluZyA9IDA7XG5cbiAgICB0aGlzLmpzU3RhdGUgPSBDb2RlTWlycm9yLnN0YXJ0U3RhdGUoanNNb2RlKTtcblxuICAgIHRoaXMucmVzdE9mTGluZSA9ICcnO1xuXG4gICAgdGhpcy5pc0luY2x1ZGVGaWx0ZXJlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNFYWNoID0gZmFsc2U7XG5cbiAgICB0aGlzLmxhc3RUYWcgPSAnJztcbiAgICB0aGlzLnNjcmlwdFR5cGUgPSAnJztcblxuICAgIC8vIEF0dHJpYnV0ZXMgTW9kZVxuICAgIHRoaXMuaXNBdHRycyA9IGZhbHNlO1xuICAgIHRoaXMuYXR0cnNOZXN0ID0gW107XG4gICAgdGhpcy5pbkF0dHJpYnV0ZU5hbWUgPSB0cnVlO1xuICAgIHRoaXMuYXR0cmlidXRlSXNUeXBlID0gZmFsc2U7XG4gICAgdGhpcy5hdHRyVmFsdWUgPSAnJztcblxuICAgIC8vIEluZGVudGVkIE1vZGVcbiAgICB0aGlzLmluZGVudE9mID0gSW5maW5pdHk7XG4gICAgdGhpcy5pbmRlbnRUb2tlbiA9ICcnO1xuXG4gICAgdGhpcy5pbm5lck1vZGUgPSBudWxsO1xuICAgIHRoaXMuaW5uZXJTdGF0ZSA9IG51bGw7XG5cbiAgICB0aGlzLmlubmVyTW9kZUZvckxpbmUgPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogU2FmZWx5IGNvcHkgYSBzdGF0ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtTdGF0ZX1cbiAgICovXG4gIFN0YXRlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBuZXcgU3RhdGUoKTtcbiAgICByZXMuamF2YVNjcmlwdExpbmUgPSB0aGlzLmphdmFTY3JpcHRMaW5lO1xuICAgIHJlcy5qYXZhU2NyaXB0TGluZUV4Y2x1ZGVzQ29sb24gPSB0aGlzLmphdmFTY3JpcHRMaW5lRXhjbHVkZXNDb2xvbjtcbiAgICByZXMuamF2YVNjcmlwdEFyZ3VtZW50cyA9IHRoaXMuamF2YVNjcmlwdEFyZ3VtZW50cztcbiAgICByZXMuamF2YVNjcmlwdEFyZ3VtZW50c0RlcHRoID0gdGhpcy5qYXZhU2NyaXB0QXJndW1lbnRzRGVwdGg7XG4gICAgcmVzLmlzSW50ZXJwb2xhdGluZyA9IHRoaXMuaXNJbnRlcnBvbGF0aW5nO1xuICAgIHJlcy5pbnRlcnBvbGF0aW9uTmVzdGluZyA9IHRoaXMuaW50ZXJwb2xhdGlvbk5lc3Rpbmc7XG5cbiAgICByZXMuanNTdGF0ZSA9IENvZGVNaXJyb3IuY29weVN0YXRlKGpzTW9kZSwgdGhpcy5qc1N0YXRlKTtcblxuICAgIHJlcy5pbm5lck1vZGUgPSB0aGlzLmlubmVyTW9kZTtcbiAgICBpZiAodGhpcy5pbm5lck1vZGUgJiYgdGhpcy5pbm5lclN0YXRlKSB7XG4gICAgICByZXMuaW5uZXJTdGF0ZSA9IENvZGVNaXJyb3IuY29weVN0YXRlKHRoaXMuaW5uZXJNb2RlLCB0aGlzLmlubmVyU3RhdGUpO1xuICAgIH1cblxuICAgIHJlcy5yZXN0T2ZMaW5lID0gdGhpcy5yZXN0T2ZMaW5lO1xuXG4gICAgcmVzLmlzSW5jbHVkZUZpbHRlcmVkID0gdGhpcy5pc0luY2x1ZGVGaWx0ZXJlZDtcbiAgICByZXMuaXNFYWNoID0gdGhpcy5pc0VhY2g7XG4gICAgcmVzLmxhc3RUYWcgPSB0aGlzLmxhc3RUYWc7XG4gICAgcmVzLnNjcmlwdFR5cGUgPSB0aGlzLnNjcmlwdFR5cGU7XG4gICAgcmVzLmlzQXR0cnMgPSB0aGlzLmlzQXR0cnM7XG4gICAgcmVzLmF0dHJzTmVzdCA9IHRoaXMuYXR0cnNOZXN0LnNsaWNlKCk7XG4gICAgcmVzLmluQXR0cmlidXRlTmFtZSA9IHRoaXMuaW5BdHRyaWJ1dGVOYW1lO1xuICAgIHJlcy5hdHRyaWJ1dGVJc1R5cGUgPSB0aGlzLmF0dHJpYnV0ZUlzVHlwZTtcbiAgICByZXMuYXR0clZhbHVlID0gdGhpcy5hdHRyVmFsdWU7XG4gICAgcmVzLmluZGVudE9mID0gdGhpcy5pbmRlbnRPZjtcbiAgICByZXMuaW5kZW50VG9rZW4gPSB0aGlzLmluZGVudFRva2VuO1xuXG4gICAgcmVzLmlubmVyTW9kZUZvckxpbmUgPSB0aGlzLmlubmVyTW9kZUZvckxpbmU7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGphdmFTY3JpcHQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAgIC8vIGlmIGphdmFTY3JpcHRMaW5lIHdhcyBzZXQgYXQgZW5kIG9mIGxpbmUsIGlnbm9yZSBpdFxuICAgICAgc3RhdGUuamF2YVNjcmlwdExpbmUgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmphdmFTY3JpcHRMaW5lRXhjbHVkZXNDb2xvbiA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuamF2YVNjcmlwdExpbmUpIHtcbiAgICAgIGlmIChzdGF0ZS5qYXZhU2NyaXB0TGluZUV4Y2x1ZGVzQ29sb24gJiYgc3RyZWFtLnBlZWsoKSA9PT0gJzonKSB7XG4gICAgICAgIHN0YXRlLmphdmFTY3JpcHRMaW5lID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmphdmFTY3JpcHRMaW5lRXhjbHVkZXNDb2xvbiA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdG9rID0ganNNb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUuanNTdGF0ZSk7XG4gICAgICBpZiAoc3RyZWFtLmVvbCgpKSBzdGF0ZS5qYXZhU2NyaXB0TGluZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRvayB8fCB0cnVlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBqYXZhU2NyaXB0QXJndW1lbnRzKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuamF2YVNjcmlwdEFyZ3VtZW50cykge1xuICAgICAgaWYgKHN0YXRlLmphdmFTY3JpcHRBcmd1bWVudHNEZXB0aCA9PT0gMCAmJiBzdHJlYW0ucGVlaygpICE9PSAnKCcpIHtcbiAgICAgICAgc3RhdGUuamF2YVNjcmlwdEFyZ3VtZW50cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtLnBlZWsoKSA9PT0gJygnKSB7XG4gICAgICAgIHN0YXRlLmphdmFTY3JpcHRBcmd1bWVudHNEZXB0aCsrO1xuICAgICAgfSBlbHNlIGlmIChzdHJlYW0ucGVlaygpID09PSAnKScpIHtcbiAgICAgICAgc3RhdGUuamF2YVNjcmlwdEFyZ3VtZW50c0RlcHRoLS07XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuamF2YVNjcmlwdEFyZ3VtZW50c0RlcHRoID09PSAwKSB7XG4gICAgICAgIHN0YXRlLmphdmFTY3JpcHRBcmd1bWVudHMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG9rID0ganNNb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUuanNTdGF0ZSk7XG4gICAgICByZXR1cm4gdG9rIHx8IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24geWllbGRTdGF0ZW1lbnQoc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXnlpZWxkXFxiLykpIHtcbiAgICAgICAgcmV0dXJuICdrZXl3b3JkJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkb2N0eXBlKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL14oPzpkb2N0eXBlKSAqKFteXFxuXSspPy8pKSB7XG4gICAgICAgIHJldHVybiBET0NUWVBFO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goJyN7JykpIHtcbiAgICAgIHN0YXRlLmlzSW50ZXJwb2xhdGluZyA9IHRydWU7XG4gICAgICBzdGF0ZS5pbnRlcnBvbGF0aW9uTmVzdGluZyA9IDA7XG4gICAgICByZXR1cm4gJ3B1bmN0dWF0aW9uJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0aW9uQ29udGludWVkKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuaXNJbnRlcnBvbGF0aW5nKSB7XG4gICAgICBpZiAoc3RyZWFtLnBlZWsoKSA9PT0gJ30nKSB7XG4gICAgICAgIHN0YXRlLmludGVycG9sYXRpb25OZXN0aW5nLS07XG4gICAgICAgIGlmIChzdGF0ZS5pbnRlcnBvbGF0aW9uTmVzdGluZyA8IDApIHtcbiAgICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICAgIHN0YXRlLmlzSW50ZXJwb2xhdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiAncHVuY3R1YXRpb24nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmVhbS5wZWVrKCkgPT09ICd7Jykge1xuICAgICAgICBzdGF0ZS5pbnRlcnBvbGF0aW9uTmVzdGluZysrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGpzTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmpzU3RhdGUpIHx8IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FzZVN0YXRlbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXmNhc2VcXGIvKSkge1xuICAgICAgc3RhdGUuamF2YVNjcmlwdExpbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIEtFWVdPUkQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gd2hlbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXndoZW5cXGIvKSkge1xuICAgICAgc3RhdGUuamF2YVNjcmlwdExpbmUgPSB0cnVlO1xuICAgICAgc3RhdGUuamF2YVNjcmlwdExpbmVFeGNsdWRlc0NvbG9uID0gdHJ1ZTtcbiAgICAgIHJldHVybiBLRVlXT1JEO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTdGF0ZW1lbnQoc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXmRlZmF1bHRcXGIvKSkge1xuICAgICAgcmV0dXJuIEtFWVdPUkQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kc1N0YXRlbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXmV4dGVuZHM/XFxiLykpIHtcbiAgICAgIHN0YXRlLnJlc3RPZkxpbmUgPSAnc3RyaW5nJztcbiAgICAgIHJldHVybiBLRVlXT1JEO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGVuZChzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXmFwcGVuZFxcYi8pKSB7XG4gICAgICBzdGF0ZS5yZXN0T2ZMaW5lID0gJ3ZhcmlhYmxlJztcbiAgICAgIHJldHVybiBLRVlXT1JEO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwcmVwZW5kKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9ecHJlcGVuZFxcYi8pKSB7XG4gICAgICBzdGF0ZS5yZXN0T2ZMaW5lID0gJ3ZhcmlhYmxlJztcbiAgICAgIHJldHVybiBLRVlXT1JEO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBibG9jayhzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXmJsb2NrXFxiICooPzoocHJlcGVuZHxhcHBlbmQpXFxiKT8vKSkge1xuICAgICAgc3RhdGUucmVzdE9mTGluZSA9ICd2YXJpYWJsZSc7XG4gICAgICByZXR1cm4gS0VZV09SRDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbmNsdWRlKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eaW5jbHVkZVxcYi8pKSB7XG4gICAgICBzdGF0ZS5yZXN0T2ZMaW5lID0gJ3N0cmluZyc7XG4gICAgICByZXR1cm4gS0VZV09SRDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbmNsdWRlRmlsdGVyZWQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL15pbmNsdWRlOihbYS16QS1aMC05XFwtXSspLywgZmFsc2UpICYmIHN0cmVhbS5tYXRjaCgnaW5jbHVkZScpKSB7XG4gICAgICBzdGF0ZS5pc0luY2x1ZGVGaWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gS0VZV09SRDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbmNsdWRlRmlsdGVyZWRDb250aW51ZWQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5pc0luY2x1ZGVGaWx0ZXJlZCkge1xuICAgICAgdmFyIHRvayA9IGZpbHRlcihzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHN0YXRlLmlzSW5jbHVkZUZpbHRlcmVkID0gZmFsc2U7XG4gICAgICBzdGF0ZS5yZXN0T2ZMaW5lID0gJ3N0cmluZyc7XG4gICAgICByZXR1cm4gdG9rO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1peGluKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9ebWl4aW5cXGIvKSkge1xuICAgICAgc3RhdGUuamF2YVNjcmlwdExpbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIEtFWVdPUkQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbChzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXlxcKyhbLVxcd10rKS8pKSB7XG4gICAgICBpZiAoIXN0cmVhbS5tYXRjaCgvXlxcKCAqWy1cXHddKyAqPS8sIGZhbHNlKSkge1xuICAgICAgICBzdGF0ZS5qYXZhU2NyaXB0QXJndW1lbnRzID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUuamF2YVNjcmlwdEFyZ3VtZW50c0RlcHRoID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAndmFyaWFibGUnO1xuICAgIH1cbiAgICBpZiAoc3RyZWFtLm1hdGNoKCcrI3snLCBmYWxzZSkpIHtcbiAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICBzdGF0ZS5taXhpbkNhbGxBZnRlciA9IHRydWU7XG4gICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FsbEFyZ3VtZW50cyhzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLm1peGluQ2FsbEFmdGVyKSB7XG4gICAgICBzdGF0ZS5taXhpbkNhbGxBZnRlciA9IGZhbHNlO1xuICAgICAgaWYgKCFzdHJlYW0ubWF0Y2goL15cXCggKlstXFx3XSsgKj0vLCBmYWxzZSkpIHtcbiAgICAgICAgc3RhdGUuamF2YVNjcmlwdEFyZ3VtZW50cyA9IHRydWU7XG4gICAgICAgIHN0YXRlLmphdmFTY3JpcHRBcmd1bWVudHNEZXB0aCA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb25kaXRpb25hbChzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXihpZnx1bmxlc3N8ZWxzZSBpZnxlbHNlKVxcYi8pKSB7XG4gICAgICBzdGF0ZS5qYXZhU2NyaXB0TGluZSA9IHRydWU7XG4gICAgICByZXR1cm4gS0VZV09SRDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlYWNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eKC0gKik/KGVhY2h8Zm9yKVxcYi8pKSB7XG4gICAgICBzdGF0ZS5pc0VhY2ggPSB0cnVlO1xuICAgICAgcmV0dXJuIEtFWVdPUkQ7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGVhY2hDb250aW51ZWQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5pc0VhY2gpIHtcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2goL14gaW5cXGIvKSkge1xuICAgICAgICBzdGF0ZS5qYXZhU2NyaXB0TGluZSA9IHRydWU7XG4gICAgICAgIHN0YXRlLmlzRWFjaCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gS0VZV09SRDtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLnNvbCgpIHx8IHN0cmVhbS5lb2woKSkge1xuICAgICAgICBzdGF0ZS5pc0VhY2ggPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm5leHQoKSkge1xuICAgICAgICB3aGlsZSAoIXN0cmVhbS5tYXRjaCgvXiBpblxcYi8sIGZhbHNlKSAmJiBzdHJlYW0ubmV4dCgpKTtcbiAgICAgICAgcmV0dXJuICd2YXJpYWJsZSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gd2hpbGVTdGF0ZW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL153aGlsZVxcYi8pKSB7XG4gICAgICBzdGF0ZS5qYXZhU2NyaXB0TGluZSA9IHRydWU7XG4gICAgICByZXR1cm4gS0VZV09SRDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0YWcoc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBjYXB0dXJlcztcbiAgICBpZiAoY2FwdHVyZXMgPSBzdHJlYW0ubWF0Y2goL14oXFx3KD86Wy06XFx3XSpcXHcpPylcXC8/LykpIHtcbiAgICAgIHN0YXRlLmxhc3RUYWcgPSBjYXB0dXJlc1sxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHN0YXRlLmxhc3RUYWcgPT09ICdzY3JpcHQnKSB7XG4gICAgICAgIHN0YXRlLnNjcmlwdFR5cGUgPSAnYXBwbGljYXRpb24vamF2YXNjcmlwdCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3RhZyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eOihbXFx3XFwtXSspLykpIHtcbiAgICAgIHZhciBpbm5lck1vZGU7XG4gICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5pbm5lck1vZGVzKSB7XG4gICAgICAgIGlubmVyTW9kZSA9IGNvbmZpZy5pbm5lck1vZGVzKHN0cmVhbS5jdXJyZW50KCkuc3Vic3RyaW5nKDEpKTtcbiAgICAgIH1cbiAgICAgIGlmICghaW5uZXJNb2RlKSB7XG4gICAgICAgIGlubmVyTW9kZSA9IHN0cmVhbS5jdXJyZW50KCkuc3Vic3RyaW5nKDEpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbm5lck1vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlubmVyTW9kZSA9IENvZGVNaXJyb3IuZ2V0TW9kZShjb25maWcsIGlubmVyTW9kZSk7XG4gICAgICB9XG4gICAgICBzZXRJbm5lck1vZGUoc3RyZWFtLCBzdGF0ZSwgaW5uZXJNb2RlKTtcbiAgICAgIHJldHVybiAnYXRvbSc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29kZShzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXighPz18LSkvKSkge1xuICAgICAgc3RhdGUuamF2YVNjcmlwdExpbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuICdwdW5jdHVhdGlvbic7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaWQoc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvXiMoW1xcdy1dKykvKSkge1xuICAgICAgcmV0dXJuIElEO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzTmFtZShzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eXFwuKFtcXHctXSspLykpIHtcbiAgICAgIHJldHVybiBDTEFTUztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdHRycyhzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5wZWVrKCkgPT0gJygnKSB7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgc3RhdGUuaXNBdHRycyA9IHRydWU7XG4gICAgICBzdGF0ZS5hdHRyc05lc3QgPSBbXTtcbiAgICAgIHN0YXRlLmluQXR0cmlidXRlTmFtZSA9IHRydWU7XG4gICAgICBzdGF0ZS5hdHRyVmFsdWUgPSAnJztcbiAgICAgIHN0YXRlLmF0dHJpYnV0ZUlzVHlwZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICdwdW5jdHVhdGlvbic7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0cnNDb250aW51ZWQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5pc0F0dHJzKSB7XG4gICAgICBpZiAoQVRUUlNfTkVTVFtzdHJlYW0ucGVlaygpXSkge1xuICAgICAgICBzdGF0ZS5hdHRyc05lc3QucHVzaChBVFRSU19ORVNUW3N0cmVhbS5wZWVrKCldKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5hdHRyc05lc3Rbc3RhdGUuYXR0cnNOZXN0Lmxlbmd0aCAtIDFdID09PSBzdHJlYW0ucGVlaygpKSB7XG4gICAgICAgIHN0YXRlLmF0dHJzTmVzdC5wb3AoKTtcbiAgICAgIH0gZWxzZSAgaWYgKHN0cmVhbS5lYXQoJyknKSkge1xuICAgICAgICBzdGF0ZS5pc0F0dHJzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAncHVuY3R1YXRpb24nO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmluQXR0cmlidXRlTmFtZSAmJiBzdHJlYW0ubWF0Y2goL15bXj0sXFwpIV0rLykpIHtcbiAgICAgICAgaWYgKHN0cmVhbS5wZWVrKCkgPT09ICc9JyB8fCBzdHJlYW0ucGVlaygpID09PSAnIScpIHtcbiAgICAgICAgICBzdGF0ZS5pbkF0dHJpYnV0ZU5hbWUgPSBmYWxzZTtcbiAgICAgICAgICBzdGF0ZS5qc1N0YXRlID0gQ29kZU1pcnJvci5zdGFydFN0YXRlKGpzTW9kZSk7XG4gICAgICAgICAgaWYgKHN0YXRlLmxhc3RUYWcgPT09ICdzY3JpcHQnICYmIHN0cmVhbS5jdXJyZW50KCkudHJpbSgpLnRvTG93ZXJDYXNlKCkgPT09ICd0eXBlJykge1xuICAgICAgICAgICAgc3RhdGUuYXR0cmlidXRlSXNUeXBlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUuYXR0cmlidXRlSXNUeXBlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnYXR0cmlidXRlJztcbiAgICAgIH1cblxuICAgICAgdmFyIHRvayA9IGpzTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmpzU3RhdGUpO1xuICAgICAgaWYgKHN0YXRlLmF0dHJpYnV0ZUlzVHlwZSAmJiB0b2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0YXRlLnNjcmlwdFR5cGUgPSBzdHJlYW0uY3VycmVudCgpLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuYXR0cnNOZXN0Lmxlbmd0aCA9PT0gMCAmJiAodG9rID09PSAnc3RyaW5nJyB8fCB0b2sgPT09ICd2YXJpYWJsZScgfHwgdG9rID09PSAna2V5d29yZCcpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgRnVuY3Rpb24oJycsICd2YXIgeCAnICsgc3RhdGUuYXR0clZhbHVlLnJlcGxhY2UoLyxcXHMqJC8sICcnKS5yZXBsYWNlKC9eIS8sICcnKSk7XG4gICAgICAgICAgc3RhdGUuaW5BdHRyaWJ1dGVOYW1lID0gdHJ1ZTtcbiAgICAgICAgICBzdGF0ZS5hdHRyVmFsdWUgPSAnJztcbiAgICAgICAgICBzdHJlYW0uYmFja1VwKHN0cmVhbS5jdXJyZW50KCkubGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gYXR0cnNDb250aW51ZWQoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgLy9ub3QgdGhlIGVuZCBvZiBhbiBhdHRyaWJ1dGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhdGUuYXR0clZhbHVlICs9IHN0cmVhbS5jdXJyZW50KCk7XG4gICAgICByZXR1cm4gdG9rIHx8IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0cmlidXRlc0Jsb2NrKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eJmF0dHJpYnV0ZXNcXGIvKSkge1xuICAgICAgc3RhdGUuamF2YVNjcmlwdEFyZ3VtZW50cyA9IHRydWU7XG4gICAgICBzdGF0ZS5qYXZhU2NyaXB0QXJndW1lbnRzRGVwdGggPSAwO1xuICAgICAgcmV0dXJuICdrZXl3b3JkJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbmRlbnQoc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbS5zb2woKSAmJiBzdHJlYW0uZWF0U3BhY2UoKSkge1xuICAgICAgcmV0dXJuICdpbmRlbnQnO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL14gKlxcL1xcLygtKT8oW15cXG5dKikvKSkge1xuICAgICAgc3RhdGUuaW5kZW50T2YgPSBzdHJlYW0uaW5kZW50YXRpb24oKTtcbiAgICAgIHN0YXRlLmluZGVudFRva2VuID0gJ2NvbW1lbnQnO1xuICAgICAgcmV0dXJuICdjb21tZW50JztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvbihzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eOiAqLykpIHtcbiAgICAgIHJldHVybiAnY29sb24nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL14oPzpcXHwgP3wgKShbXlxcbl0rKS8pKSB7XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgfVxuICAgIGlmIChzdHJlYW0ubWF0Y2goL14oPFteXFxuXSopLywgZmFsc2UpKSB7XG4gICAgICAvLyBodG1sIHN0cmluZ1xuICAgICAgc2V0SW5uZXJNb2RlKHN0cmVhbSwgc3RhdGUsICdodG1sbWl4ZWQnKTtcbiAgICAgIHN0YXRlLmlubmVyTW9kZUZvckxpbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIGlubmVyTW9kZShzdHJlYW0sIHN0YXRlLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkb3Qoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0uZWF0KCcuJykpIHtcbiAgICAgIHZhciBpbm5lck1vZGUgPSBudWxsO1xuICAgICAgaWYgKHN0YXRlLmxhc3RUYWcgPT09ICdzY3JpcHQnICYmIHN0YXRlLnNjcmlwdFR5cGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdqYXZhc2NyaXB0JykgIT0gLTEpIHtcbiAgICAgICAgaW5uZXJNb2RlID0gc3RhdGUuc2NyaXB0VHlwZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1wifCcvZywgJycpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sYXN0VGFnID09PSAnc3R5bGUnKSB7XG4gICAgICAgIGlubmVyTW9kZSA9ICdjc3MnO1xuICAgICAgfVxuICAgICAgc2V0SW5uZXJNb2RlKHN0cmVhbSwgc3RhdGUsIGlubmVyTW9kZSk7XG4gICAgICByZXR1cm4gJ2RvdCc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmFpbChzdHJlYW0pIHtcbiAgICBzdHJlYW0ubmV4dCgpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICBmdW5jdGlvbiBzZXRJbm5lck1vZGUoc3RyZWFtLCBzdGF0ZSwgbW9kZSkge1xuICAgIG1vZGUgPSBDb2RlTWlycm9yLm1pbWVNb2Rlc1ttb2RlXSB8fCBtb2RlO1xuICAgIG1vZGUgPSBjb25maWcuaW5uZXJNb2RlcyA/IGNvbmZpZy5pbm5lck1vZGVzKG1vZGUpIHx8IG1vZGUgOiBtb2RlO1xuICAgIG1vZGUgPSBDb2RlTWlycm9yLm1pbWVNb2Rlc1ttb2RlXSB8fCBtb2RlO1xuICAgIG1vZGUgPSBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCBtb2RlKTtcbiAgICBzdGF0ZS5pbmRlbnRPZiA9IHN0cmVhbS5pbmRlbnRhdGlvbigpO1xuXG4gICAgaWYgKG1vZGUgJiYgbW9kZS5uYW1lICE9PSAnbnVsbCcpIHtcbiAgICAgIHN0YXRlLmlubmVyTW9kZSA9IG1vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmluZGVudFRva2VuID0gJ3N0cmluZyc7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGlubmVyTW9kZShzdHJlYW0sIHN0YXRlLCBmb3JjZSkge1xuICAgIGlmIChzdHJlYW0uaW5kZW50YXRpb24oKSA+IHN0YXRlLmluZGVudE9mIHx8IChzdGF0ZS5pbm5lck1vZGVGb3JMaW5lICYmICFzdHJlYW0uc29sKCkpIHx8IGZvcmNlKSB7XG4gICAgICBpZiAoc3RhdGUuaW5uZXJNb2RlKSB7XG4gICAgICAgIGlmICghc3RhdGUuaW5uZXJTdGF0ZSkge1xuICAgICAgICAgIHN0YXRlLmlubmVyU3RhdGUgPSBzdGF0ZS5pbm5lck1vZGUuc3RhcnRTdGF0ZSA/IENvZGVNaXJyb3Iuc3RhcnRTdGF0ZShzdGF0ZS5pbm5lck1vZGUsIHN0cmVhbS5pbmRlbnRhdGlvbigpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJlYW0uaGlkZUZpcnN0Q2hhcnMoc3RhdGUuaW5kZW50T2YgKyAyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLmlubmVyTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmlubmVyU3RhdGUpIHx8IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgICByZXR1cm4gc3RhdGUuaW5kZW50VG9rZW47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAgIHN0YXRlLmluZGVudE9mID0gSW5maW5pdHk7XG4gICAgICBzdGF0ZS5pbmRlbnRUb2tlbiA9IG51bGw7XG4gICAgICBzdGF0ZS5pbm5lck1vZGUgPSBudWxsO1xuICAgICAgc3RhdGUuaW5uZXJTdGF0ZSA9IG51bGw7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlc3RPZkxpbmUoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAgIC8vIGlmIHJlc3RPZkxpbmUgd2FzIHNldCBhdCBlbmQgb2YgbGluZSwgaWdub3JlIGl0XG4gICAgICBzdGF0ZS5yZXN0T2ZMaW5lID0gJyc7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5yZXN0T2ZMaW5lKSB7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICB2YXIgdG9rID0gc3RhdGUucmVzdE9mTGluZTtcbiAgICAgIHN0YXRlLnJlc3RPZkxpbmUgPSAnJztcbiAgICAgIHJldHVybiB0b2s7XG4gICAgfVxuICB9XG5cblxuICBmdW5jdGlvbiBzdGFydFN0YXRlKCkge1xuICAgIHJldHVybiBuZXcgU3RhdGUoKTtcbiAgfVxuICBmdW5jdGlvbiBjb3B5U3RhdGUoc3RhdGUpIHtcbiAgICByZXR1cm4gc3RhdGUuY29weSgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG5leHQgdG9rZW4gaW4gdGhlIHN0cmVhbVxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtXG4gICAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gICAqL1xuICBmdW5jdGlvbiBuZXh0VG9rZW4oc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciB0b2sgPSBpbm5lck1vZGUoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IHJlc3RPZkxpbmUoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGludGVycG9sYXRpb25Db250aW51ZWQoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGluY2x1ZGVGaWx0ZXJlZENvbnRpbnVlZChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgZWFjaENvbnRpbnVlZChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgYXR0cnNDb250aW51ZWQoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGphdmFTY3JpcHQoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGphdmFTY3JpcHRBcmd1bWVudHMoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGNhbGxBcmd1bWVudHMoc3RyZWFtLCBzdGF0ZSlcblxuICAgICAgfHwgeWllbGRTdGF0ZW1lbnQoc3RyZWFtKVxuICAgICAgfHwgZG9jdHlwZShzdHJlYW0pXG4gICAgICB8fCBpbnRlcnBvbGF0aW9uKHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCBjYXNlU3RhdGVtZW50KHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCB3aGVuKHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCBkZWZhdWx0U3RhdGVtZW50KHN0cmVhbSlcbiAgICAgIHx8IGV4dGVuZHNTdGF0ZW1lbnQoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGFwcGVuZChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgcHJlcGVuZChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgYmxvY2soc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGluY2x1ZGUoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGluY2x1ZGVGaWx0ZXJlZChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgbWl4aW4oc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGNhbGwoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGNvbmRpdGlvbmFsKHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCBlYWNoKHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCB3aGlsZVN0YXRlbWVudChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgdGFnKHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCBmaWx0ZXIoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGNvZGUoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIHx8IGlkKHN0cmVhbSlcbiAgICAgIHx8IGNsYXNzTmFtZShzdHJlYW0pXG4gICAgICB8fCBhdHRycyhzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgYXR0cmlidXRlc0Jsb2NrKHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCBpbmRlbnQoc3RyZWFtKVxuICAgICAgfHwgdGV4dChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgY29tbWVudChzdHJlYW0sIHN0YXRlKVxuICAgICAgfHwgY29sb24oc3RyZWFtKVxuICAgICAgfHwgZG90KHN0cmVhbSwgc3RhdGUpXG4gICAgICB8fCBmYWlsKHN0cmVhbSk7XG5cbiAgICByZXR1cm4gdG9rID09PSB0cnVlID8gbnVsbCA6IHRvaztcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXJ0U3RhdGU6IHN0YXJ0U3RhdGUsXG4gICAgY29weVN0YXRlOiBjb3B5U3RhdGUsXG4gICAgdG9rZW46IG5leHRUb2tlblxuICB9O1xufSwgJ2phdmFzY3JpcHQnLCAnY3NzJywgJ2h0bWxtaXhlZCcpO1xuXG5Db2RlTWlycm9yLmRlZmluZU1JTUUoJ3RleHQveC1wdWcnLCAncHVnJyk7XG5Db2RlTWlycm9yLmRlZmluZU1JTUUoJ3RleHQveC1qYWRlJywgJ3B1ZycpO1xuXG59KTtcbiJdLCJuYW1lcyI6WyJtb2QiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIkNvZGVNaXJyb3IiLCJkZWZpbmVNb2RlIiwiY29uZmlnIiwiS0VZV09SRCIsIkRPQ1RZUEUiLCJJRCIsIkNMQVNTIiwiQVRUUlNfTkVTVCIsImpzTW9kZSIsImdldE1vZGUiLCJTdGF0ZSIsImphdmFTY3JpcHRMaW5lIiwiamF2YVNjcmlwdExpbmVFeGNsdWRlc0NvbG9uIiwiamF2YVNjcmlwdEFyZ3VtZW50cyIsImphdmFTY3JpcHRBcmd1bWVudHNEZXB0aCIsImlzSW50ZXJwb2xhdGluZyIsImludGVycG9sYXRpb25OZXN0aW5nIiwianNTdGF0ZSIsInN0YXJ0U3RhdGUiLCJyZXN0T2ZMaW5lIiwiaXNJbmNsdWRlRmlsdGVyZWQiLCJpc0VhY2giLCJsYXN0VGFnIiwic2NyaXB0VHlwZSIsImlzQXR0cnMiLCJhdHRyc05lc3QiLCJpbkF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVJc1R5cGUiLCJhdHRyVmFsdWUiLCJpbmRlbnRPZiIsIkluZmluaXR5IiwiaW5kZW50VG9rZW4iLCJpbm5lck1vZGUiLCJpbm5lclN0YXRlIiwiaW5uZXJNb2RlRm9yTGluZSIsInByb3RvdHlwZSIsImNvcHkiLCJyZXMiLCJjb3B5U3RhdGUiLCJzbGljZSIsImphdmFTY3JpcHQiLCJzdHJlYW0iLCJzdGF0ZSIsInNvbCIsInBlZWsiLCJ0b2siLCJ0b2tlbiIsImVvbCIsInlpZWxkU3RhdGVtZW50IiwibWF0Y2giLCJkb2N0eXBlIiwiaW50ZXJwb2xhdGlvbiIsImludGVycG9sYXRpb25Db250aW51ZWQiLCJuZXh0IiwiY2FzZVN0YXRlbWVudCIsIndoZW4iLCJkZWZhdWx0U3RhdGVtZW50IiwiZXh0ZW5kc1N0YXRlbWVudCIsImFwcGVuZCIsInByZXBlbmQiLCJibG9jayIsImluY2x1ZGUiLCJpbmNsdWRlRmlsdGVyZWQiLCJpbmNsdWRlRmlsdGVyZWRDb250aW51ZWQiLCJmaWx0ZXIiLCJtaXhpbiIsImNhbGwiLCJtaXhpbkNhbGxBZnRlciIsImNhbGxBcmd1bWVudHMiLCJjb25kaXRpb25hbCIsImVhY2giLCJlYWNoQ29udGludWVkIiwid2hpbGVTdGF0ZW1lbnQiLCJ0YWciLCJjYXB0dXJlcyIsInRvTG93ZXJDYXNlIiwiaW5uZXJNb2RlcyIsImN1cnJlbnQiLCJzdWJzdHJpbmciLCJzZXRJbm5lck1vZGUiLCJjb2RlIiwiaWQiLCJjbGFzc05hbWUiLCJhdHRycyIsImF0dHJzQ29udGludWVkIiwicHVzaCIsImxlbmd0aCIsInBvcCIsImVhdCIsInRyaW0iLCJ0b1N0cmluZyIsIkZ1bmN0aW9uIiwicmVwbGFjZSIsImJhY2tVcCIsImV4IiwiYXR0cmlidXRlc0Jsb2NrIiwiaW5kZW50IiwiZWF0U3BhY2UiLCJjb21tZW50IiwiaW5kZW50YXRpb24iLCJjb2xvbiIsInRleHQiLCJkb3QiLCJpbmRleE9mIiwiZmFpbCIsIm1vZGUiLCJtaW1lTW9kZXMiLCJuYW1lIiwiZm9yY2UiLCJoaWRlRmlyc3RDaGFycyIsInNraXBUb0VuZCIsIm5leHRUb2tlbiIsImRlZmluZU1JTUUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/pug/pug.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/sass/sass.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/sass/sass.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sass\", function (config) {\n    var cssMode = CodeMirror.mimeModes[\"text/css\"];\n    var propertyKeywords = cssMode.propertyKeywords || {},\n        colorKeywords = cssMode.colorKeywords || {},\n        valueKeywords = cssMode.valueKeywords || {},\n        fontProperties = cssMode.fontProperties || {};\n\n    function tokenRegexp(words) {\n      return new RegExp(\"^\" + words.join(\"|\"));\n    }\n\n    var keywords = [\"true\", \"false\", \"null\", \"auto\"];\n    var keywordsRegexp = new RegExp(\"^\" + keywords.join(\"|\"));\n    var operators = [\"\\\\(\", \"\\\\)\", \"=\", \">\", \"<\", \"==\", \">=\", \"<=\", \"\\\\+\", \"-\", \"\\\\!=\", \"/\", \"\\\\*\", \"%\", \"and\", \"or\", \"not\", \";\", \"\\\\{\", \"\\\\}\", \":\"];\n    var opRegexp = tokenRegexp(operators);\n    var pseudoElementsRegexp = /^::?[a-zA-Z_][\\w\\-]*/;\n    var word;\n\n    function isEndLine(stream) {\n      return !stream.peek() || stream.match(/\\s+$/, false);\n    }\n\n    function urlTokens(stream, state) {\n      var ch = stream.peek();\n\n      if (ch === \")\") {\n        stream.next();\n        state.tokenizer = tokenBase;\n        return \"operator\";\n      } else if (ch === \"(\") {\n        stream.next();\n        stream.eatSpace();\n        return \"operator\";\n      } else if (ch === \"'\" || ch === '\"') {\n        state.tokenizer = buildStringTokenizer(stream.next());\n        return \"string\";\n      } else {\n        state.tokenizer = buildStringTokenizer(\")\", false);\n        return \"string\";\n      }\n    }\n\n    function comment(indentation, multiLine) {\n      return function (stream, state) {\n        if (stream.sol() && stream.indentation() <= indentation) {\n          state.tokenizer = tokenBase;\n          return tokenBase(stream, state);\n        }\n\n        if (multiLine && stream.skipTo(\"*/\")) {\n          stream.next();\n          stream.next();\n          state.tokenizer = tokenBase;\n        } else {\n          stream.skipToEnd();\n        }\n\n        return \"comment\";\n      };\n    }\n\n    function buildStringTokenizer(quote, greedy) {\n      if (greedy == null) {\n        greedy = true;\n      }\n\n      function stringTokenizer(stream, state) {\n        var nextChar = stream.next();\n        var peekChar = stream.peek();\n        var previousChar = stream.string.charAt(stream.pos - 2);\n        var endingString = nextChar !== \"\\\\\" && peekChar === quote || nextChar === quote && previousChar !== \"\\\\\";\n\n        if (endingString) {\n          if (nextChar !== quote && greedy) {\n            stream.next();\n          }\n\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          state.tokenizer = tokenBase;\n          return \"string\";\n        } else if (nextChar === \"#\" && peekChar === \"{\") {\n          state.tokenizer = buildInterpolationTokenizer(stringTokenizer);\n          stream.next();\n          return \"operator\";\n        } else {\n          return \"string\";\n        }\n      }\n\n      return stringTokenizer;\n    }\n\n    function buildInterpolationTokenizer(currentTokenizer) {\n      return function (stream, state) {\n        if (stream.peek() === \"}\") {\n          stream.next();\n          state.tokenizer = currentTokenizer;\n          return \"operator\";\n        } else {\n          return tokenBase(stream, state);\n        }\n      };\n    }\n\n    function indent(state) {\n      if (state.indentCount == 0) {\n        state.indentCount++;\n        var lastScopeOffset = state.scopes[0].offset;\n        var currentOffset = lastScopeOffset + config.indentUnit;\n        state.scopes.unshift({\n          offset: currentOffset\n        });\n      }\n    }\n\n    function dedent(state) {\n      if (state.scopes.length == 1) return;\n      state.scopes.shift();\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(); // Comment\n\n      if (stream.match(\"/*\")) {\n        state.tokenizer = comment(stream.indentation(), true);\n        return state.tokenizer(stream, state);\n      }\n\n      if (stream.match(\"//\")) {\n        state.tokenizer = comment(stream.indentation(), false);\n        return state.tokenizer(stream, state);\n      } // Interpolation\n\n\n      if (stream.match(\"#{\")) {\n        state.tokenizer = buildInterpolationTokenizer(tokenBase);\n        return \"operator\";\n      } // Strings\n\n\n      if (ch === '\"' || ch === \"'\") {\n        stream.next();\n        state.tokenizer = buildStringTokenizer(ch);\n        return \"string\";\n      }\n\n      if (!state.cursorHalf) {\n        // state.cursorHalf === 0\n        // first half i.e. before : for key-value pairs\n        // including selectors\n        if (ch === \"-\") {\n          if (stream.match(/^-\\w+-/)) {\n            return \"meta\";\n          }\n        }\n\n        if (ch === \".\") {\n          stream.next();\n\n          if (stream.match(/^[\\w-]+/)) {\n            indent(state);\n            return \"qualifier\";\n          } else if (stream.peek() === \"#\") {\n            indent(state);\n            return \"tag\";\n          }\n        }\n\n        if (ch === \"#\") {\n          stream.next(); // ID selectors\n\n          if (stream.match(/^[\\w-]+/)) {\n            indent(state);\n            return \"builtin\";\n          }\n\n          if (stream.peek() === \"#\") {\n            indent(state);\n            return \"tag\";\n          }\n        } // Variables\n\n\n        if (ch === \"$\") {\n          stream.next();\n          stream.eatWhile(/[\\w-]/);\n          return \"variable-2\";\n        } // Numbers\n\n\n        if (stream.match(/^-?[0-9\\.]+/)) return \"number\"; // Units\n\n        if (stream.match(/^(px|em|in)\\b/)) return \"unit\";\n        if (stream.match(keywordsRegexp)) return \"keyword\";\n\n        if (stream.match(/^url/) && stream.peek() === \"(\") {\n          state.tokenizer = urlTokens;\n          return \"atom\";\n        }\n\n        if (ch === \"=\") {\n          // Match shortcut mixin definition\n          if (stream.match(/^=[\\w-]+/)) {\n            indent(state);\n            return \"meta\";\n          }\n        }\n\n        if (ch === \"+\") {\n          // Match shortcut mixin definition\n          if (stream.match(/^\\+[\\w-]+/)) {\n            return \"variable-3\";\n          }\n        }\n\n        if (ch === \"@\") {\n          if (stream.match('@extend')) {\n            if (!stream.match(/\\s*[\\w]/)) dedent(state);\n          }\n        } // Indent Directives\n\n\n        if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {\n          indent(state);\n          return \"def\";\n        } // Other Directives\n\n\n        if (ch === \"@\") {\n          stream.next();\n          stream.eatWhile(/[\\w-]/);\n          return \"def\";\n        }\n\n        if (stream.eatWhile(/[\\w-]/)) {\n          if (stream.match(/ *: *[\\w-\\+\\$#!\\(\"']/, false)) {\n            word = stream.current().toLowerCase();\n            var prop = state.prevProp + \"-\" + word;\n\n            if (propertyKeywords.hasOwnProperty(prop)) {\n              return \"property\";\n            } else if (propertyKeywords.hasOwnProperty(word)) {\n              state.prevProp = word;\n              return \"property\";\n            } else if (fontProperties.hasOwnProperty(word)) {\n              return \"property\";\n            }\n\n            return \"tag\";\n          } else if (stream.match(/ *:/, false)) {\n            indent(state);\n            state.cursorHalf = 1;\n            state.prevProp = stream.current().toLowerCase();\n            return \"property\";\n          } else if (stream.match(/ *,/, false)) {\n            return \"tag\";\n          } else {\n            indent(state);\n            return \"tag\";\n          }\n        }\n\n        if (ch === \":\") {\n          if (stream.match(pseudoElementsRegexp)) {\n            // could be a pseudo-element\n            return \"variable-3\";\n          }\n\n          stream.next();\n          state.cursorHalf = 1;\n          return \"operator\";\n        }\n      } // cursorHalf===0 ends here\n      else {\n        if (ch === \"#\") {\n          stream.next(); // Hex numbers\n\n          if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)) {\n            if (isEndLine(stream)) {\n              state.cursorHalf = 0;\n            }\n\n            return \"number\";\n          }\n        } // Numbers\n\n\n        if (stream.match(/^-?[0-9\\.]+/)) {\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          return \"number\";\n        } // Units\n\n\n        if (stream.match(/^(px|em|in)\\b/)) {\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          return \"unit\";\n        }\n\n        if (stream.match(keywordsRegexp)) {\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          return \"keyword\";\n        }\n\n        if (stream.match(/^url/) && stream.peek() === \"(\") {\n          state.tokenizer = urlTokens;\n\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          return \"atom\";\n        } // Variables\n\n\n        if (ch === \"$\") {\n          stream.next();\n          stream.eatWhile(/[\\w-]/);\n\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          return \"variable-2\";\n        } // bang character for !important, !default, etc.\n\n\n        if (ch === \"!\") {\n          stream.next();\n          state.cursorHalf = 0;\n          return stream.match(/^[\\w]+/) ? \"keyword\" : \"operator\";\n        }\n\n        if (stream.match(opRegexp)) {\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          return \"operator\";\n        } // attributes\n\n\n        if (stream.eatWhile(/[\\w-]/)) {\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n\n          word = stream.current().toLowerCase();\n\n          if (valueKeywords.hasOwnProperty(word)) {\n            return \"atom\";\n          } else if (colorKeywords.hasOwnProperty(word)) {\n            return \"keyword\";\n          } else if (propertyKeywords.hasOwnProperty(word)) {\n            state.prevProp = stream.current().toLowerCase();\n            return \"property\";\n          } else {\n            return \"tag\";\n          }\n        } //stream.eatSpace();\n\n\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n          return null;\n        }\n      } // else ends here\n\n\n      if (stream.match(opRegexp)) return \"operator\"; // If we haven't returned by now, we move 1 character\n      // and return an error\n\n      stream.next();\n      return null;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.indentCount = 0;\n      var style = state.tokenizer(stream, state);\n      var current = stream.current();\n\n      if (current === \"@return\" || current === \"}\") {\n        dedent(state);\n      }\n\n      if (style !== null) {\n        var startOfToken = stream.pos - current.length;\n        var withCurrentIndent = startOfToken + config.indentUnit * state.indentCount;\n        var newScopes = [];\n\n        for (var i = 0; i < state.scopes.length; i++) {\n          var scope = state.scopes[i];\n          if (scope.offset <= withCurrentIndent) newScopes.push(scope);\n        }\n\n        state.scopes = newScopes;\n      }\n\n      return style;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenizer: tokenBase,\n          scopes: [{\n            offset: 0,\n            type: \"sass\"\n          }],\n          indentCount: 0,\n          cursorHalf: 0,\n          // cursor half tells us if cursor lies after (1)\n          // or before (0) colon (well... more or less)\n          definedVars: [],\n          definedMixins: []\n        };\n      },\n      token: function token(stream, state) {\n        var style = tokenLexer(stream, state);\n        state.lastToken = {\n          style: style,\n          content: stream.current()\n        };\n        return style;\n      },\n      indent: function indent(state) {\n        return state.scopes[0].offset;\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"indent\"\n    };\n  }, \"css\");\n  CodeMirror.defineMIME(\"text/x-sass\", \"sass\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/sass/sass.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/stylus/stylus.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/stylus/stylus.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Stylus mode created by Dmitry Kiselyov http://git.io/AaRB\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"stylus\", function (config) {\n    var indentUnit = config.indentUnit,\n        indentUnitString = '',\n        tagKeywords = keySet(tagKeywords_),\n        tagVariablesRegexp = /^(a|b|i|s|col|em)$/i,\n        propertyKeywords = keySet(propertyKeywords_),\n        nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_),\n        valueKeywords = keySet(valueKeywords_),\n        colorKeywords = keySet(colorKeywords_),\n        documentTypes = keySet(documentTypes_),\n        documentTypesRegexp = wordRegexp(documentTypes_),\n        mediaFeatures = keySet(mediaFeatures_),\n        mediaTypes = keySet(mediaTypes_),\n        fontProperties = keySet(fontProperties_),\n        operatorsRegexp = /^\\s*([.]{2,3}|&&|\\|\\||\\*\\*|[?!=:]?=|[-+*\\/%<>]=?|\\?:|\\~)/,\n        wordOperatorKeywordsRegexp = wordRegexp(wordOperatorKeywords_),\n        blockKeywords = keySet(blockKeywords_),\n        vendorPrefixesRegexp = new RegExp(/^\\-(moz|ms|o|webkit)-/i),\n        commonAtoms = keySet(commonAtoms_),\n        firstWordMatch = \"\",\n        states = {},\n        ch,\n        style,\n        type,\n        override;\n\n    while (indentUnitString.length < indentUnit) {\n      indentUnitString += ' ';\n    }\n    /**\n     * Tokenizers\n     */\n\n\n    function tokenBase(stream, state) {\n      firstWordMatch = stream.string.match(/(^[\\w-]+\\s*=\\s*$)|(^\\s*[\\w-]+\\s*=\\s*[\\w-])|(^\\s*(\\.|#|@|\\$|\\&|\\[|\\d|\\+|::?|\\{|\\>|~|\\/)?\\s*[\\w-]*([a-z0-9-]|\\*|\\/\\*)(\\(|,)?)/);\n      state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\\s*/, \"\") : \"\";\n      state.context.line.indent = stream.indentation();\n      ch = stream.peek(); // Line comment\n\n      if (stream.match(\"//\")) {\n        stream.skipToEnd();\n        return [\"comment\", \"comment\"];\n      } // Block comment\n\n\n      if (stream.match(\"/*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      } // String\n\n\n      if (ch == \"\\\"\" || ch == \"'\") {\n        stream.next();\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } // Def\n\n\n      if (ch == \"@\") {\n        stream.next();\n        stream.eatWhile(/[\\w\\\\-]/);\n        return [\"def\", stream.current()];\n      } // ID selector or Hex color\n\n\n      if (ch == \"#\") {\n        stream.next(); // Hex color\n\n        if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\\b(?!-)/i)) {\n          return [\"atom\", \"atom\"];\n        } // ID selector\n\n\n        if (stream.match(/^[a-z][\\w-]*/i)) {\n          return [\"builtin\", \"hash\"];\n        }\n      } // Vendor prefixes\n\n\n      if (stream.match(vendorPrefixesRegexp)) {\n        return [\"meta\", \"vendor-prefixes\"];\n      } // Numbers\n\n\n      if (stream.match(/^-?[0-9]?\\.?[0-9]/)) {\n        stream.eatWhile(/[a-z%]/i);\n        return [\"number\", \"unit\"];\n      } // !important|optional\n\n\n      if (ch == \"!\") {\n        stream.next();\n        return [stream.match(/^(important|optional)/i) ? \"keyword\" : \"operator\", \"important\"];\n      } // Class\n\n\n      if (ch == \".\" && stream.match(/^\\.[a-z][\\w-]*/i)) {\n        return [\"qualifier\", \"qualifier\"];\n      } // url url-prefix domain regexp\n\n\n      if (stream.match(documentTypesRegexp)) {\n        if (stream.peek() == \"(\") state.tokenize = tokenParenthesized;\n        return [\"property\", \"word\"];\n      } // Mixins / Functions\n\n\n      if (stream.match(/^[a-z][\\w-]*\\(/i)) {\n        stream.backUp(1);\n        return [\"keyword\", \"mixin\"];\n      } // Block mixins\n\n\n      if (stream.match(/^(\\+|-)[a-z][\\w-]*\\(/i)) {\n        stream.backUp(1);\n        return [\"keyword\", \"block-mixin\"];\n      } // Parent Reference BEM naming\n\n\n      if (stream.string.match(/^\\s*&/) && stream.match(/^[-_]+[a-z][\\w-]*/)) {\n        return [\"qualifier\", \"qualifier\"];\n      } // / Root Reference & Parent Reference\n\n\n      if (stream.match(/^(\\/|&)(-|_|:|\\.|#|[a-z])/)) {\n        stream.backUp(1);\n        return [\"variable-3\", \"reference\"];\n      }\n\n      if (stream.match(/^&{1}\\s*$/)) {\n        return [\"variable-3\", \"reference\"];\n      } // Word operator\n\n\n      if (stream.match(wordOperatorKeywordsRegexp)) {\n        return [\"operator\", \"operator\"];\n      } // Word\n\n\n      if (stream.match(/^\\$?[-_]*[a-z0-9]+[\\w-]*/i)) {\n        // Variable\n        if (stream.match(/^(\\.|\\[)[\\w-\\'\\\"\\]]+/i, false)) {\n          if (!wordIsTag(stream.current())) {\n            stream.match('.');\n            return [\"variable-2\", \"variable-name\"];\n          }\n        }\n\n        return [\"variable-2\", \"word\"];\n      } // Operators\n\n\n      if (stream.match(operatorsRegexp)) {\n        return [\"operator\", stream.current()];\n      } // Delimiters\n\n\n      if (/[:;,{}\\[\\]\\(\\)]/.test(ch)) {\n        stream.next();\n        return [null, ch];\n      } // Non-detected items\n\n\n      stream.next();\n      return [null, null];\n    }\n    /**\n     * Token comment\n     */\n\n\n    function tokenCComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return [\"comment\", \"comment\"];\n    }\n    /**\n     * Token string\n     */\n\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            if (quote == \")\") stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n        return [\"string\", \"string\"];\n      };\n    }\n    /**\n     * Token parenthesized\n     */\n\n\n    function tokenParenthesized(stream, state) {\n      stream.next(); // Must be \"(\"\n\n      if (!stream.match(/\\s*[\\\"\\')]/, false)) state.tokenize = tokenString(\")\");else state.tokenize = null;\n      return [null, \"(\"];\n    }\n    /**\n     * Context management\n     */\n\n\n    function Context(type, indent, prev, line) {\n      this.type = type;\n      this.indent = indent;\n      this.prev = prev;\n      this.line = line || {\n        firstWord: \"\",\n        indent: 0\n      };\n    }\n\n    function pushContext(state, stream, type, indent) {\n      indent = indent >= 0 ? indent : indentUnit;\n      state.context = new Context(type, stream.indentation() + indent, state.context);\n      return type;\n    }\n\n    function popContext(state, currentIndent) {\n      var contextIndent = state.context.indent - indentUnit;\n      currentIndent = currentIndent || false;\n      state.context = state.context.prev;\n      if (currentIndent) state.context.indent = contextIndent;\n      return state.context.type;\n    }\n\n    function pass(type, stream, state) {\n      return states[state.context.type](type, stream, state);\n    }\n\n    function popAndPass(type, stream, state, n) {\n      for (var i = n || 1; i > 0; i--) {\n        state.context = state.context.prev;\n      }\n\n      return pass(type, stream, state);\n    }\n    /**\n     * Parser\n     */\n\n\n    function wordIsTag(word) {\n      return word.toLowerCase() in tagKeywords;\n    }\n\n    function wordIsProperty(word) {\n      word = word.toLowerCase();\n      return word in propertyKeywords || word in fontProperties;\n    }\n\n    function wordIsBlock(word) {\n      return word.toLowerCase() in blockKeywords;\n    }\n\n    function wordIsVendorPrefix(word) {\n      return word.toLowerCase().match(vendorPrefixesRegexp);\n    }\n\n    function wordAsValue(word) {\n      var wordLC = word.toLowerCase();\n      var override = \"variable-2\";\n      if (wordIsTag(word)) override = \"tag\";else if (wordIsBlock(word)) override = \"block-keyword\";else if (wordIsProperty(word)) override = \"property\";else if (wordLC in valueKeywords || wordLC in commonAtoms) override = \"atom\";else if (wordLC == \"return\" || wordLC in colorKeywords) override = \"keyword\"; // Font family\n      else if (word.match(/^[A-Z]/)) override = \"string\";\n      return override;\n    }\n\n    function typeIsBlock(type, stream) {\n      return endOfLine(stream) && (type == \"{\" || type == \"]\" || type == \"hash\" || type == \"qualifier\") || type == \"block-mixin\";\n    }\n\n    function typeIsInterpolation(type, stream) {\n      return type == \"{\" && stream.match(/^\\s*\\$?[\\w-]+/i, false);\n    }\n\n    function typeIsPseudo(type, stream) {\n      return type == \":\" && stream.match(/^[a-z-]+/, false);\n    }\n\n    function startOfLine(stream) {\n      return stream.sol() || stream.string.match(new RegExp(\"^\\\\s*\" + escapeRegExp(stream.current())));\n    }\n\n    function endOfLine(stream) {\n      return stream.eol() || stream.match(/^\\s*$/, false);\n    }\n\n    function firstWordOfLine(line) {\n      var re = /^\\s*[-_]*[a-z0-9]+[\\w-]*/i;\n      var result = typeof line == \"string\" ? line.match(re) : line.string.match(re);\n      return result ? result[0].replace(/^\\s*/, \"\") : \"\";\n    }\n    /**\n     * Block\n     */\n\n\n    states.block = function (type, stream, state) {\n      if (type == \"comment\" && startOfLine(stream) || type == \",\" && endOfLine(stream) || type == \"mixin\") {\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      if (typeIsInterpolation(type, stream)) {\n        return pushContext(state, stream, \"interpolation\");\n      }\n\n      if (endOfLine(stream) && type == \"]\") {\n        if (!/^\\s*(\\.|#|:|\\[|\\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n      }\n\n      if (typeIsBlock(type, stream)) {\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"}\" && endOfLine(stream)) {\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      if (type == \"variable-name\") {\n        if (stream.string.match(/^\\s?\\$[\\w-\\.\\[\\]\\'\\\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"variableName\");\n        } else {\n          return pushContext(state, stream, \"variableName\", 0);\n        }\n      }\n\n      if (type == \"=\") {\n        if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"*\") {\n        if (endOfLine(stream) || stream.match(/\\s*(,|\\.|#|\\[|:|{)/, false)) {\n          override = \"tag\";\n          return pushContext(state, stream, \"block\");\n        }\n      }\n\n      if (typeIsPseudo(type, stream)) {\n        return pushContext(state, stream, \"pseudo\");\n      }\n\n      if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {\n        return pushContext(state, stream, endOfLine(stream) ? \"block\" : \"atBlock\");\n      }\n\n      if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {\n        return pushContext(state, stream, \"keyframes\");\n      }\n\n      if (/@extends?/.test(type)) {\n        return pushContext(state, stream, \"extend\", 0);\n      }\n\n      if (type && type.charAt(0) == \"@\") {\n        // Property Lookup\n        if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {\n          override = \"variable-2\";\n          return \"block\";\n        }\n\n        if (/(@import|@require|@charset)/.test(type)) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"reference\" && endOfLine(stream)) {\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"(\") {\n        return pushContext(state, stream, \"parens\");\n      }\n\n      if (type == \"vendor-prefixes\") {\n        return pushContext(state, stream, \"vendorPrefixes\");\n      }\n\n      if (type == \"word\") {\n        var word = stream.current();\n        override = wordAsValue(word);\n\n        if (override == \"property\") {\n          if (startOfLine(stream)) {\n            return pushContext(state, stream, \"block\", 0);\n          } else {\n            override = \"atom\";\n            return \"block\";\n          }\n        }\n\n        if (override == \"tag\") {\n          // tag is a css value\n          if (/embed|menu|pre|progress|sub|table/.test(word)) {\n            if (wordIsProperty(firstWordOfLine(stream))) {\n              override = \"atom\";\n              return \"block\";\n            }\n          } // tag is an attribute\n\n\n          if (stream.string.match(new RegExp(\"\\\\[\\\\s*\" + word + \"|\" + word + \"\\\\s*\\\\]\"))) {\n            override = \"atom\";\n            return \"block\";\n          } // tag is a variable\n\n\n          if (tagVariablesRegexp.test(word)) {\n            if (startOfLine(stream) && stream.string.match(/=/) || !startOfLine(stream) && !stream.string.match(/^(\\s*\\.|#|\\&|\\[|\\/|>|\\*)/) && !wordIsTag(firstWordOfLine(stream))) {\n              override = \"variable-2\";\n              if (wordIsBlock(firstWordOfLine(stream))) return \"block\";\n              return pushContext(state, stream, \"block\", 0);\n            }\n          }\n\n          if (endOfLine(stream)) return pushContext(state, stream, \"block\");\n        }\n\n        if (override == \"block-keyword\") {\n          override = \"keyword\"; // Postfix conditionals\n\n          if (stream.current(/(if|unless)/) && !startOfLine(stream)) {\n            return \"block\";\n          }\n\n          return pushContext(state, stream, \"block\");\n        }\n\n        if (word == \"return\") return pushContext(state, stream, \"block\", 0); // Placeholder selector\n\n        if (override == \"variable-2\" && stream.string.match(/^\\s?\\$[\\w-\\.\\[\\]\\'\\\"]+$/)) {\n          return pushContext(state, stream, \"block\");\n        }\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Parens\n     */\n\n\n    states.parens = function (type, stream, state) {\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n\n      if (type == \")\") {\n        if (state.context.prev.type == \"parens\") {\n          return popContext(state);\n        }\n\n        if (stream.string.match(/^[a-z][\\w-]*\\(/i) && endOfLine(stream) || wordIsBlock(firstWordOfLine(stream)) || /(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(firstWordOfLine(stream)) || !stream.string.match(/^-?[a-z][\\w-\\.\\[\\]\\'\\\"]*\\s*=/) && wordIsTag(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\");\n        }\n\n        if (stream.string.match(/^[\\$-]?[a-z][\\w-\\.\\[\\]\\'\\\"]*\\s*=/) || stream.string.match(/^\\s*(\\(|\\)|[0-9])/) || stream.string.match(/^\\s+[a-z][\\w-]*\\(/i) || stream.string.match(/^\\s+[\\$-]?[a-z]/i)) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        if (endOfLine(stream)) return pushContext(state, stream, \"block\");else return pushContext(state, stream, \"block\", 0);\n      }\n\n      if (type && type.charAt(0) == \"@\" && wordIsProperty(stream.current().slice(1))) {\n        override = \"variable-2\";\n      }\n\n      if (type == \"word\") {\n        var word = stream.current();\n        override = wordAsValue(word);\n\n        if (override == \"tag\" && tagVariablesRegexp.test(word)) {\n          override = \"variable-2\";\n        }\n\n        if (override == \"property\" || word == \"to\") override = \"atom\";\n      }\n\n      if (type == \"variable-name\") {\n        return pushContext(state, stream, \"variableName\");\n      }\n\n      if (typeIsPseudo(type, stream)) {\n        return pushContext(state, stream, \"pseudo\");\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Vendor prefixes\n     */\n\n\n    states.vendorPrefixes = function (type, stream, state) {\n      if (type == \"word\") {\n        override = \"property\";\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      return popContext(state);\n    };\n    /**\n     * Pseudo\n     */\n\n\n    states.pseudo = function (type, stream, state) {\n      if (!wordIsProperty(firstWordOfLine(stream.string))) {\n        stream.match(/^[a-z-]+/);\n        override = \"variable-3\";\n        if (endOfLine(stream)) return pushContext(state, stream, \"block\");\n        return popContext(state);\n      }\n\n      return popAndPass(type, stream, state);\n    };\n    /**\n     * atBlock\n     */\n\n\n    states.atBlock = function (type, stream, state) {\n      if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n\n      if (typeIsBlock(type, stream)) {\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (typeIsInterpolation(type, stream)) {\n        return pushContext(state, stream, \"interpolation\");\n      }\n\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n        if (/^(only|not|and|or)$/.test(word)) override = \"keyword\";else if (documentTypes.hasOwnProperty(word)) override = \"tag\";else if (mediaTypes.hasOwnProperty(word)) override = \"attribute\";else if (mediaFeatures.hasOwnProperty(word)) override = \"property\";else if (nonStandardPropertyKeywords.hasOwnProperty(word)) override = \"string-2\";else override = wordAsValue(stream.current());\n\n        if (override == \"tag\" && endOfLine(stream)) {\n          return pushContext(state, stream, \"block\");\n        }\n      }\n\n      if (type == \"operator\" && /^(not|and|or)$/.test(stream.current())) {\n        override = \"keyword\";\n      }\n\n      return state.context.type;\n    };\n\n    states.atBlock_parens = function (type, stream, state) {\n      if (type == \"{\" || type == \"}\") return state.context.type;\n\n      if (type == \")\") {\n        if (endOfLine(stream)) return pushContext(state, stream, \"block\");else return pushContext(state, stream, \"atBlock\");\n      }\n\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n        override = wordAsValue(word);\n        if (/^(max|min)/.test(word)) override = \"property\";\n\n        if (override == \"tag\") {\n          tagVariablesRegexp.test(word) ? override = \"variable-2\" : override = \"atom\";\n        }\n\n        return state.context.type;\n      }\n\n      return states.atBlock(type, stream, state);\n    };\n    /**\n     * Keyframes\n     */\n\n\n    states.keyframes = function (type, stream, state) {\n      if (stream.indentation() == \"0\" && (type == \"}\" && startOfLine(stream) || type == \"]\" || type == \"hash\" || type == \"qualifier\" || wordIsTag(stream.current()))) {\n        return popAndPass(type, stream, state);\n      }\n\n      if (type == \"{\") return pushContext(state, stream, \"keyframes\");\n\n      if (type == \"}\") {\n        if (startOfLine(stream)) return popContext(state, true);else return pushContext(state, stream, \"keyframes\");\n      }\n\n      if (type == \"unit\" && /^[0-9]+\\%$/.test(stream.current())) {\n        return pushContext(state, stream, \"keyframes\");\n      }\n\n      if (type == \"word\") {\n        override = wordAsValue(stream.current());\n\n        if (override == \"block-keyword\") {\n          override = \"keyword\";\n          return pushContext(state, stream, \"keyframes\");\n        }\n      }\n\n      if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {\n        return pushContext(state, stream, endOfLine(stream) ? \"block\" : \"atBlock\");\n      }\n\n      if (type == \"mixin\") {\n        return pushContext(state, stream, \"block\", 0);\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Interpolation\n     */\n\n\n    states.interpolation = function (type, stream, state) {\n      if (type == \"{\") popContext(state) && pushContext(state, stream, \"block\");\n\n      if (type == \"}\") {\n        if (stream.string.match(/^\\s*(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/i) || stream.string.match(/^\\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream))) {\n          return pushContext(state, stream, \"block\");\n        }\n\n        if (!stream.string.match(/^(\\{|\\s*\\&)/) || stream.match(/\\s*[\\w-]/, false)) {\n          return pushContext(state, stream, \"block\", 0);\n        }\n\n        return pushContext(state, stream, \"block\");\n      }\n\n      if (type == \"variable-name\") {\n        return pushContext(state, stream, \"variableName\", 0);\n      }\n\n      if (type == \"word\") {\n        override = wordAsValue(stream.current());\n        if (override == \"tag\") override = \"atom\";\n      }\n\n      return state.context.type;\n    };\n    /**\n     * Extend/s\n     */\n\n\n    states.extend = function (type, stream, state) {\n      if (type == \"[\" || type == \"=\") return \"extend\";\n      if (type == \"]\") return popContext(state);\n\n      if (type == \"word\") {\n        override = wordAsValue(stream.current());\n        return \"extend\";\n      }\n\n      return popContext(state);\n    };\n    /**\n     * Variable name\n     */\n\n\n    states.variableName = function (type, stream, state) {\n      if (type == \"string\" || type == \"[\" || type == \"]\" || stream.current().match(/^(\\.|\\$)/)) {\n        if (stream.current().match(/^\\.[\\w-]+/i)) override = \"variable-2\";\n        return \"variableName\";\n      }\n\n      return popAndPass(type, stream, state);\n    };\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: null,\n          state: \"block\",\n          context: new Context(\"block\", base || 0, null)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.tokenize && stream.eatSpace()) return null;\n        style = (state.tokenize || tokenBase)(stream, state);\n\n        if (style && _typeof(style) == \"object\") {\n          type = style[1];\n          style = style[0];\n        }\n\n        override = style;\n        state.state = states[state.state](type, stream, state);\n        return override;\n      },\n      indent: function indent(state, textAfter, line) {\n        var cx = state.context,\n            ch = textAfter && textAfter.charAt(0),\n            indent = cx.indent,\n            lineFirstWord = firstWordOfLine(textAfter),\n            lineIndent = line.match(/^\\s*/)[0].replace(/\\t/g, indentUnitString).length,\n            prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : \"\",\n            prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;\n\n        if (cx.prev && (ch == \"}\" && (cx.type == \"block\" || cx.type == \"atBlock\" || cx.type == \"keyframes\") || ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") || ch == \"{\" && cx.type == \"at\")) {\n          indent = cx.indent - indentUnit;\n        } else if (!/(\\})/.test(ch)) {\n          if (/@|\\$|\\d/.test(ch) || /^\\{/.test(textAfter) || /^\\s*\\/(\\/|\\*)/.test(textAfter) || /^\\s*\\/\\*/.test(prevLineFirstWord) || /^\\s*[\\w-\\.\\[\\]\\'\\\"]+\\s*(\\?|:|\\+)?=/i.test(textAfter) || /^(\\+|-)?[a-z][\\w-]*\\(/i.test(textAfter) || /^return/.test(textAfter) || wordIsBlock(lineFirstWord)) {\n            indent = lineIndent;\n          } else if (/(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(ch) || wordIsTag(lineFirstWord)) {\n            if (/\\,\\s*$/.test(prevLineFirstWord)) {\n              indent = prevLineIndent;\n            } else if (/^\\s+/.test(line) && (/(\\.|#|:|\\[|\\*|&|>|~|\\+|\\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {\n              indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + indentUnit;\n            } else {\n              indent = lineIndent;\n            }\n          } else if (!/,\\s*$/.test(line) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {\n            if (wordIsBlock(prevLineFirstWord)) {\n              indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + indentUnit;\n            } else if (/^\\{/.test(prevLineFirstWord)) {\n              indent = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + indentUnit;\n            } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {\n              indent = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;\n            } else if (/^(\\.|#|:|\\[|\\*|&|@|\\+|\\-|>|~|\\/)/.test(prevLineFirstWord) || /=\\s*$/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord) || /^\\$[\\w-\\.\\[\\]\\'\\\"]/.test(prevLineFirstWord)) {\n              indent = prevLineIndent + indentUnit;\n            } else {\n              indent = lineIndent;\n            }\n          }\n        }\n\n        return indent;\n      },\n      electricChars: \"}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: \"//\",\n      fold: \"indent\"\n    };\n  }); // developer.mozilla.org/en-US/docs/Web/HTML/Element\n\n  var tagKeywords_ = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"keygen\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"nobr\", \"noframes\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\"]; // github.com/codemirror/CodeMirror/blob/master/mode/css/css.js\n  // Note, \"url-prefix\" should precede \"url\" in order to match correctly in documentTypesRegexp\n\n  var documentTypes_ = [\"domain\", \"regexp\", \"url-prefix\", \"url\"];\n  var mediaTypes_ = [\"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\", \"tty\", \"tv\", \"embossed\"];\n  var mediaFeatures_ = [\"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\", \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\", \"min-device-height\", \"max-device-height\", \"aspect-ratio\", \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\", \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\", \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\", \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\", \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"dynamic-range\", \"video-dynamic-range\"];\n  var propertyKeywords_ = [\"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\", \"alignment-baseline\", \"anchor-point\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"appearance\", \"azimuth\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\", \"bleed\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\", \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"dominant-baseline\", \"drop-initial-after-adjust\", \"drop-initial-after-align\", \"drop-initial-before-adjust\", \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\", \"elevation\", \"empty-cells\", \"fit\", \"fit-position\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-feature-settings\", \"font-family\", \"font-kerning\", \"font-language-override\", \"font-size\", \"font-size-adjust\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-weight\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-position\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-start\", \"grid-row\", \"grid-row-end\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"inline-box-align\", \"justify-content\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"line-stacking\", \"line-stacking-ruby\", \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"marker-offset\", \"marks\", \"marquee-direction\", \"marquee-loop\", \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"max-height\", \"max-width\", \"min-height\", \"min-width\", \"move-to\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\", \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pitch\", \"pitch-range\", \"play-during\", \"position\", \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\", \"region-break-before\", \"region-break-inside\", \"region-fragment\", \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\", \"right\", \"rotation\", \"rotation-point\", \"ruby-align\", \"ruby-overhang\", \"ruby-position\", \"ruby-span\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\", \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\", \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\", \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\", \"target-position\", \"text-align\", \"text-align-last\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\", \"text-indent\", \"text-justify\", \"text-outline\", \"text-overflow\", \"text-shadow\", \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\", \"text-wrap\", \"top\", \"transform\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"unicode-bidi\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"z-index\", \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\", \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\", \"color-interpolation\", \"color-interpolation-filters\", \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\", \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"shape-rendering\", \"stroke\", \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\", \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\", \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\", \"font-smoothing\", \"osx-font-smoothing\"];\n  var nonStandardPropertyKeywords_ = [\"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\", \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\", \"scrollbar-3d-light-color\", \"scrollbar-track-color\", \"shape-inside\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"zoom\"];\n  var fontProperties_ = [\"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\", \"font-stretch\", \"font-weight\", \"font-style\"];\n  var colorKeywords_ = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"];\n  var valueKeywords_ = [\"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\", \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\", \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\", \"bengali\", \"blink\", \"block\", \"block-axis\", \"bold\", \"bolder\", \"border\", \"border-box\", \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"bullets\", \"button\", \"button-bevel\", \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\", \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\", \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"column\", \"compact\", \"condensed\", \"conic-gradient\", \"contain\", \"content\", \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\", \"cross\", \"crosshair\", \"currentcolor\", \"cursive\", \"cyclic\", \"dashed\", \"decimal\", \"decimal-leading-zero\", \"default\", \"default-button\", \"destination-atop\", \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\", \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\", \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\", \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\", \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\", \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\", \"ethiopic-numeric\", \"ew-resize\", \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fixed\", \"flat\", \"flex\", \"footnotes\", \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"graytext\", \"groove\", \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hebrew\", \"help\", \"hidden\", \"hide\", \"high\", \"higher\", \"highlight\", \"highlighttext\", \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"icon\", \"ignore\", \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\", \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\", \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\", \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\", \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lower-roman\", \"lowercase\", \"ltr\", \"malayalam\", \"match\", \"matrix\", \"matrix3d\", \"media-controls-background\", \"media-current-time-display\", \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\", \"media-return-to-realtime-button\", \"media-rewind-button\", \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\", \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\", \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\", \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\", \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\", \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"myanmar\", \"n-resize\", \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\", \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeating-conic-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\", \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\", \"row-resize\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"serif\", \"show\", \"sidama\", \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\", \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"solid\", \"somali\", \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"spell-out\", \"square\", \"square-button\", \"standard\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"sub\", \"subpixel-antialiased\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\", \"tamil\", \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\", \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\", \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\", \"trad-chinese-formal\", \"trad-chinese-informal\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"up\", \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\", \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"visible\", \"visibleFill\", \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\", \"windowtext\", \"words\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\", \"bicubic\", \"optimizespeed\", \"grayscale\", \"row\", \"row-reverse\", \"wrap\", \"wrap-reverse\", \"column-reverse\", \"flex-start\", \"flex-end\", \"space-between\", \"space-around\", \"unset\"];\n  var wordOperatorKeywords_ = [\"in\", \"and\", \"or\", \"not\", \"is not\", \"is a\", \"is\", \"isnt\", \"defined\", \"if unless\"],\n      blockKeywords_ = [\"for\", \"if\", \"else\", \"unless\", \"from\", \"to\"],\n      commonAtoms_ = [\"null\", \"true\", \"false\", \"href\", \"title\", \"type\", \"not-allowed\", \"readonly\", \"disabled\"],\n      commonDef_ = [\"@font-face\", \"@keyframes\", \"@media\", \"@viewport\", \"@page\", \"@host\", \"@supports\", \"@block\", \"@css\"];\n  var hintWords = tagKeywords_.concat(documentTypes_, mediaTypes_, mediaFeatures_, propertyKeywords_, nonStandardPropertyKeywords_, colorKeywords_, valueKeywords_, fontProperties_, wordOperatorKeywords_, blockKeywords_, commonAtoms_, commonDef_);\n\n  function wordRegexp(words) {\n    words = words.sort(function (a, b) {\n      return b > a;\n    });\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  function keySet(array) {\n    var keys = {};\n\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i]] = true;\n    }\n\n    return keys;\n  }\n\n  function escapeRegExp(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  CodeMirror.registerHelper(\"hintWords\", \"stylus\", hintWords);\n  CodeMirror.defineMIME(\"text/x-styl\", \"stylus\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/stylus/stylus.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/vue/vue.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/vue/vue.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  \"use strict\";\n\n  if (( false ? 0 : _typeof(exports)) === \"object\" && ( false ? 0 : _typeof(module)) === \"object\") {\n    // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../../addon/mode/overlay */ \"./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js\"), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../coffeescript/coffeescript */ \"./resources/assets/vendor/libs/codemirror/mode/coffeescript/coffeescript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\"), __webpack_require__(/*! ../sass/sass */ \"./resources/assets/vendor/libs/codemirror/mode/sass/sass.js\"), __webpack_require__(/*! ../stylus/stylus */ \"./resources/assets/vendor/libs/codemirror/mode/stylus/stylus.js\"), __webpack_require__(/*! ../pug/pug */ \"./resources/assets/vendor/libs/codemirror/mode/pug/pug.js\"), __webpack_require__(/*! ../handlebars/handlebars */ \"./resources/assets/vendor/libs/codemirror/mode/handlebars/handlebars.js\"));\n  } else if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../../addon/mode/overlay */ \"./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js\"), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../coffeescript/coffeescript */ \"./resources/assets/vendor/libs/codemirror/mode/coffeescript/coffeescript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\"), __webpack_require__(/*! ../sass/sass */ \"./resources/assets/vendor/libs/codemirror/mode/sass/sass.js\"), __webpack_require__(/*! ../stylus/stylus */ \"./resources/assets/vendor/libs/codemirror/mode/stylus/stylus.js\"), __webpack_require__(/*! ../pug/pug */ \"./resources/assets/vendor/libs/codemirror/mode/pug/pug.js\"), __webpack_require__(/*! ../handlebars/handlebars */ \"./resources/assets/vendor/libs/codemirror/mode/handlebars/handlebars.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function (CodeMirror) {\n  var tagLanguages = {\n    script: [[\"lang\", /coffee(script)?/, \"coffeescript\"], [\"type\", /^(?:text|application)\\/(?:x-)?coffee(?:script)?$/, \"coffeescript\"], [\"lang\", /^babel$/, \"javascript\"], [\"type\", /^text\\/babel$/, \"javascript\"], [\"type\", /^text\\/ecmascript-\\d+$/, \"javascript\"]],\n    style: [[\"lang\", /^stylus$/i, \"stylus\"], [\"lang\", /^sass$/i, \"sass\"], [\"lang\", /^less$/i, \"text/x-less\"], [\"lang\", /^scss$/i, \"text/x-scss\"], [\"type\", /^(text\\/)?(x-)?styl(us)?$/i, \"stylus\"], [\"type\", /^text\\/sass/i, \"sass\"], [\"type\", /^(text\\/)?(x-)?scss$/i, \"text/x-scss\"], [\"type\", /^(text\\/)?(x-)?less$/i, \"text/x-less\"]],\n    template: [[\"lang\", /^vue-template$/i, \"vue\"], [\"lang\", /^pug$/i, \"pug\"], [\"lang\", /^handlebars$/i, \"handlebars\"], [\"type\", /^(text\\/)?(x-)?pug$/i, \"pug\"], [\"type\", /^text\\/x-handlebars-template$/i, \"handlebars\"], [null, null, \"vue-template\"]]\n  };\n  CodeMirror.defineMode(\"vue-template\", function (config, parserConfig) {\n    var mustacheOverlay = {\n      token: function token(stream) {\n        if (stream.match(/^\\{\\{.*?\\}\\}/)) return \"meta mustache\";\n\n        while (stream.next() && !stream.match(\"{{\", false)) {}\n\n        return null;\n      }\n    };\n    return CodeMirror.overlayMode(CodeMirror.getMode(config, parserConfig.backdrop || \"text/html\"), mustacheOverlay);\n  });\n  CodeMirror.defineMode(\"vue\", function (config) {\n    return CodeMirror.getMode(config, {\n      name: \"htmlmixed\",\n      tags: tagLanguages\n    });\n  }, \"htmlmixed\", \"xml\", \"javascript\", \"coffeescript\", \"css\", \"sass\", \"stylus\", \"pug\", \"handlebars\");\n  CodeMirror.defineMIME(\"script/x-vue\", \"vue\");\n  CodeMirror.defineMIME(\"text/x-vue\", \"vue\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/vue/vue.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/xml/xml.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/xml/xml.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function lower(tagName) {\n      return tagName && tagName.toLowerCase();\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName || \"\";\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(lower(parentTagName)) || !config.contextGrabbers[lower(parentTagName)].hasOwnProperty(lower(nextTagName))) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(lower(state.context.tagName))) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(lower(tagName))) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(lower(context.tagName))) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[lower(context.tagName)];\n            if (grabbers && grabbers.hasOwnProperty(lower(tagAfter[2]))) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/vue/vue.js");
/******/ 	
/******/ })()
;