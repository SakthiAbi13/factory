/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/q/q.js":
/*!*************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/q/q.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"q\", function (config) {\n    var indentUnit = config.indentUnit,\n        curPunc,\n        keywords = buildRE([\"abs\", \"acos\", \"aj\", \"aj0\", \"all\", \"and\", \"any\", \"asc\", \"asin\", \"asof\", \"atan\", \"attr\", \"avg\", \"avgs\", \"bin\", \"by\", \"ceiling\", \"cols\", \"cor\", \"cos\", \"count\", \"cov\", \"cross\", \"csv\", \"cut\", \"delete\", \"deltas\", \"desc\", \"dev\", \"differ\", \"distinct\", \"div\", \"do\", \"each\", \"ej\", \"enlist\", \"eval\", \"except\", \"exec\", \"exit\", \"exp\", \"fby\", \"fills\", \"first\", \"fkeys\", \"flip\", \"floor\", \"from\", \"get\", \"getenv\", \"group\", \"gtime\", \"hclose\", \"hcount\", \"hdel\", \"hopen\", \"hsym\", \"iasc\", \"idesc\", \"if\", \"ij\", \"in\", \"insert\", \"inter\", \"inv\", \"key\", \"keys\", \"last\", \"like\", \"list\", \"lj\", \"load\", \"log\", \"lower\", \"lsq\", \"ltime\", \"ltrim\", \"mavg\", \"max\", \"maxs\", \"mcount\", \"md5\", \"mdev\", \"med\", \"meta\", \"min\", \"mins\", \"mmax\", \"mmin\", \"mmu\", \"mod\", \"msum\", \"neg\", \"next\", \"not\", \"null\", \"or\", \"over\", \"parse\", \"peach\", \"pj\", \"plist\", \"prd\", \"prds\", \"prev\", \"prior\", \"rand\", \"rank\", \"ratios\", \"raze\", \"read0\", \"read1\", \"reciprocal\", \"reverse\", \"rload\", \"rotate\", \"rsave\", \"rtrim\", \"save\", \"scan\", \"select\", \"set\", \"setenv\", \"show\", \"signum\", \"sin\", \"sqrt\", \"ss\", \"ssr\", \"string\", \"sublist\", \"sum\", \"sums\", \"sv\", \"system\", \"tables\", \"tan\", \"til\", \"trim\", \"txf\", \"type\", \"uj\", \"ungroup\", \"union\", \"update\", \"upper\", \"upsert\", \"value\", \"var\", \"view\", \"views\", \"vs\", \"wavg\", \"where\", \"where\", \"while\", \"within\", \"wj\", \"wj1\", \"wsum\", \"xasc\", \"xbar\", \"xcol\", \"xcols\", \"xdesc\", \"xexp\", \"xgroup\", \"xkey\", \"xlog\", \"xprev\", \"xrank\"]),\n        E = /[|/&^!+:\\\\\\-*%$=~#;@><,?_\\'\\\"\\[\\(\\]\\)\\s{}]/;\n\n    function buildRE(w) {\n      return new RegExp(\"^(\" + w.join(\"|\") + \")$\");\n    }\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol(),\n          c = stream.next();\n      curPunc = null;\n      if (sol) if (c == \"/\") return (state.tokenize = tokenLineComment)(stream, state);else if (c == \"\\\\\") {\n        if (stream.eol() || /\\s/.test(stream.peek())) return stream.skipToEnd(), /^\\\\\\s*$/.test(stream.current()) ? (state.tokenize = tokenCommentToEOF)(stream) : state.tokenize = tokenBase, \"comment\";else return state.tokenize = tokenBase, \"builtin\";\n      }\n      if (/\\s/.test(c)) return stream.peek() == \"/\" ? (stream.skipToEnd(), \"comment\") : \"whitespace\";\n      if (c == '\"') return (state.tokenize = tokenString)(stream, state);\n      if (c == '`') return stream.eatWhile(/[A-Za-z\\d_:\\/.]/), \"symbol\";\n\n      if (\".\" == c && /\\d/.test(stream.peek()) || /\\d/.test(c)) {\n        var t = null;\n        stream.backUp(1);\n        if (stream.match(/^\\d{4}\\.\\d{2}(m|\\.\\d{2}([DT](\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)?)?)/) || stream.match(/^\\d+D(\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)/) || stream.match(/^\\d{2}:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?/) || stream.match(/^\\d+[ptuv]{1}/)) t = \"temporal\";else if (stream.match(/^0[NwW]{1}/) || stream.match(/^0x[\\da-fA-F]*/) || stream.match(/^[01]+[b]{1}/) || stream.match(/^\\d+[chijn]{1}/) || stream.match(/-?\\d*(\\.\\d*)?(e[+\\-]?\\d+)?(e|f)?/)) t = \"number\";\n        return t && (!(c = stream.peek()) || E.test(c)) ? t : (stream.next(), \"error\");\n      }\n\n      if (/[A-Za-z]|\\./.test(c)) return stream.eatWhile(/[A-Za-z._\\d]/), keywords.test(stream.current()) ? \"keyword\" : \"variable\";\n      if (/[|/&^!+:\\\\\\-*%$=~#;@><\\.,?_\\']/.test(c)) return null;\n      if (/[{}\\(\\[\\]\\)]/.test(c)) return null;\n      return \"error\";\n    }\n\n    function tokenLineComment(stream, state) {\n      return stream.skipToEnd(), /\\/\\s*$/.test(stream.current()) ? (state.tokenize = tokenBlockComment)(stream, state) : state.tokenize = tokenBase, \"comment\";\n    }\n\n    function tokenBlockComment(stream, state) {\n      var f = stream.sol() && stream.peek() == \"\\\\\";\n      stream.skipToEnd();\n      if (f && /^\\\\\\s*$/.test(stream.current())) state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    function tokenCommentToEOF(stream) {\n      return stream.skipToEnd(), \"comment\";\n    }\n\n    function tokenString(stream, state) {\n      var escaped = false,\n          next,\n          end = false;\n\n      while (next = stream.next()) {\n        if (next == \"\\\"\" && !escaped) {\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (end) state.tokenize = tokenBase;\n      return \"string\";\n    }\n\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        } //if (stream.eatSpace()) return null;\n\n\n        var style = state.tokenize(stream, state);\n\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") {\n            popContext(state);\n          }\n\n          if (state.context && curPunc == state.context.type) popContext(state);\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") {\n          context = context.prev;\n        }\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-q\", \"q\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/q/q.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/q/q.js");
/******/ 	
/******/ })()
;