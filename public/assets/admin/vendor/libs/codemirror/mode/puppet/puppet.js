/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/puppet/puppet.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/puppet/puppet.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"puppet\", function () {\n    // Stores the words from the define method\n    var words = {}; // Taken, mostly, from the Puppet official variable standards regex\n\n    var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/; // Takes a string of words separated by spaces and adds them as\n    // keys with the value of the first argument 'style'\n\n    function define(style, string) {\n      var split = string.split(' ');\n\n      for (var i = 0; i < split.length; i++) {\n        words[split[i]] = style;\n      }\n    } // Takes commonly known puppet types/words and classifies them to a style\n\n\n    define('keyword', 'class define site node include import inherits');\n    define('keyword', 'case if else in and elsif default or');\n    define('atom', 'false true running present absent file directory undef');\n    define('builtin', 'action augeas burst chain computer cron destination dport exec ' + 'file filebucket group host icmp iniface interface jump k5login limit log_level ' + 'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' + 'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' + 'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' + 'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' + 'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' + 'resources router schedule scheduled_task selboolean selmodule service source ' + 'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' + 'user vlan yumrepo zfs zone zpool'); // After finding a start of a string ('|\") this function attempts to find the end;\n    // If a variable is encountered along the way, we display it differently when it\n    // is encapsulated in a double-quoted string.\n\n    function tokenString(stream, state) {\n      var current,\n          prev,\n          found_var = false;\n\n      while (!stream.eol() && (current = stream.next()) != state.pending) {\n        if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n          found_var = true;\n          break;\n        }\n\n        prev = current;\n      }\n\n      if (found_var) {\n        stream.backUp(1);\n      }\n\n      if (current == state.pending) {\n        state.continueString = false;\n      } else {\n        state.continueString = true;\n      }\n\n      return \"string\";\n    } // Main function\n\n\n    function tokenize(stream, state) {\n      // Matches one whole word\n      var word = stream.match(/[\\w]+/, false); // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n\n      var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false); // Matches non-builtin resource declarations\n      // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n\n      var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false); // Matches virtual and exported resources (i.e. @@user { ; and the like)\n\n      var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false); // Finally advance the stream\n\n      var ch = stream.next(); // Have we found a variable?\n\n      if (ch === '$') {\n        if (stream.match(variable_regex)) {\n          // If so, and its in a string, assign it a different color\n          return state.continueString ? 'variable-2' : 'variable';\n        } // Otherwise return an invalid variable\n\n\n        return \"error\";\n      } // Should we still be looking for the end of a string?\n\n\n      if (state.continueString) {\n        // If so, go through the loop again\n        stream.backUp(1);\n        return tokenString(stream, state);\n      } // Are we in a definition (class, node, define)?\n\n\n      if (state.inDefinition) {\n        // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n        if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n          return 'def';\n        } // Match the rest it the next time around\n\n\n        stream.match(/\\s+{/);\n        state.inDefinition = false;\n      } // Are we in an 'include' statement?\n\n\n      if (state.inInclude) {\n        // Match and return the included class\n        stream.match(/(\\s+)?\\S+(\\s+)?/);\n        state.inInclude = false;\n        return 'def';\n      } // Do we just have a function on our hands?\n      // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n\n\n      if (stream.match(/(\\s+)?\\w+\\(/)) {\n        stream.backUp(1);\n        return 'def';\n      } // Have we matched the prior attribute regex?\n\n\n      if (attribute) {\n        stream.match(/(\\s+)?\\w+/);\n        return 'tag';\n      } // Do we have Puppet specific words?\n\n\n      if (word && words.hasOwnProperty(word)) {\n        // Negates the initial next()\n        stream.backUp(1); // rs move the stream\n\n        stream.match(/[\\w]+/); // We want to process these words differently\n        // do to the importance they have in Puppet\n\n        if (stream.match(/\\s+\\S+\\s+{/, false)) {\n          state.inDefinition = true;\n        }\n\n        if (word == 'include') {\n          state.inInclude = true;\n        } // Returns their value as state in the prior define methods\n\n\n        return words[word];\n      } // Is there a match on a reference?\n\n\n      if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n        // Negate the next()\n        stream.backUp(1); // Match the full reference\n\n        stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n        return 'def';\n      } // Have we matched the prior resource regex?\n\n\n      if (resource) {\n        stream.match(/(\\s+)?[\\w:_]+/);\n        return 'def';\n      } // Have we matched the prior special_resource regex?\n\n\n      if (special_resource) {\n        stream.match(/(\\s+)?[@]{1,2}/);\n        return 'special';\n      } // Match all the comments. All of them.\n\n\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Have we found a string?\n\n\n      if (ch == \"'\" || ch == '\"') {\n        // Store the type (single or double)\n        state.pending = ch; // Perform the looping function to find the end\n\n        return tokenString(stream, state);\n      } // Match all the brackets\n\n\n      if (ch == '{' || ch == '}') {\n        return 'bracket';\n      } // Match characters that we are going to assume\n      // are trying to be regex\n\n\n      if (ch == '/') {\n        stream.match(/^[^\\/]*\\//);\n        return 'variable-3';\n      } // Match all the numbers\n\n\n      if (ch.match(/[0-9]/)) {\n        stream.eatWhile(/[0-9]+/);\n        return 'number';\n      } // Match the '=' and '=>' operators\n\n\n      if (ch == '=') {\n        if (stream.peek() == '>') {\n          stream.next();\n        }\n\n        return \"operator\";\n      } // Keep advancing through all the rest\n\n\n      stream.eatWhile(/[\\w-]/); // Return a blank line for everything else\n\n      return null;\n    } // Start it all\n\n\n    return {\n      startState: function startState() {\n        var state = {};\n        state.inDefinition = false;\n        state.inInclude = false;\n        state.continueString = false;\n        state.pending = false;\n        return state;\n      },\n      token: function token(stream, state) {\n        // Strip the spaces, but regex will account for them eitherway\n        if (stream.eatSpace()) return null; // Go through the main process\n\n        return tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-puppet\", \"puppet\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/puppet/puppet.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/puppet/puppet.js");
/******/ 	
/******/ })()
;