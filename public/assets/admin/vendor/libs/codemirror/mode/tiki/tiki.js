/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/tiki/tiki.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/tiki/tiki.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('tiki', function (config) {\n    function inBlock(style, terminator, returnTokenizer) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        if (returnTokenizer) state.tokenize = returnTokenizer;\n        return style;\n      };\n    }\n\n    function inLine(style) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.next();\n        }\n\n        state.tokenize = inText;\n        return style;\n      };\n    }\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var sol = stream.sol();\n      var ch = stream.next(); //non start of line\n\n      switch (ch) {\n        //switch is generally much faster than if, so it is used here\n        case \"{\":\n          //plugin\n          stream.eat(\"/\");\n          stream.eatSpace();\n          stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?(}]/);\n          state.tokenize = inPlugin;\n          return \"tag\";\n\n        case \"_\":\n          //bold\n          if (stream.eat(\"_\")) return chain(inBlock(\"strong\", \"__\", inText));\n          break;\n\n        case \"'\":\n          //italics\n          if (stream.eat(\"'\")) return chain(inBlock(\"em\", \"''\", inText));\n          break;\n\n        case \"(\":\n          // Wiki Link\n          if (stream.eat(\"(\")) return chain(inBlock(\"variable-2\", \"))\", inText));\n          break;\n\n        case \"[\":\n          // Weblink\n          return chain(inBlock(\"variable-3\", \"]\", inText));\n          break;\n\n        case \"|\":\n          //table\n          if (stream.eat(\"|\")) return chain(inBlock(\"comment\", \"||\"));\n          break;\n\n        case \"-\":\n          if (stream.eat(\"=\")) {\n            //titleBar\n            return chain(inBlock(\"header string\", \"=-\", inText));\n          } else if (stream.eat(\"-\")) {\n            //deleted\n            return chain(inBlock(\"error tw-deleted\", \"--\", inText));\n          }\n\n          break;\n\n        case \"=\":\n          //underline\n          if (stream.match(\"==\")) return chain(inBlock(\"tw-underline\", \"===\", inText));\n          break;\n\n        case \":\":\n          if (stream.eat(\":\")) return chain(inBlock(\"comment\", \"::\"));\n          break;\n\n        case \"^\":\n          //box\n          return chain(inBlock(\"tw-box\", \"^\"));\n          break;\n\n        case \"~\":\n          //np\n          if (stream.match(\"np~\")) return chain(inBlock(\"meta\", \"~/np~\"));\n          break;\n      } //start of line types\n\n\n      if (sol) {\n        switch (ch) {\n          case \"!\":\n            //header at start of line\n            if (stream.match('!!!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!')) {\n              return chain(inLine(\"header string\"));\n            } else {\n              return chain(inLine(\"header string\"));\n            }\n\n            break;\n\n          case \"*\": //unordered list line item, or <li /> at start of line\n\n          case \"#\": //ordered list line item, or <li /> at start of line\n\n          case \"+\":\n            //ordered list line item, or <li /> at start of line\n            return chain(inLine(\"tw-listitem bracket\"));\n            break;\n        }\n      } //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki\n\n\n      return null;\n    }\n\n    var indentUnit = config.indentUnit; // Return variables for tokenizers\n\n    var pluginName, type;\n\n    function inPlugin(stream, state) {\n      var ch = stream.next();\n      var peek = stream.peek();\n\n      if (ch == \"}\") {\n        state.tokenize = inText; //type = ch == \")\" ? \"endPlugin\" : \"selfclosePlugin\"; inPlugin\n\n        return \"tag\";\n      } else if (ch == \"(\" || ch == \")\") {\n        return \"bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n\n        if (peek == \">\") {\n          stream.next();\n          peek = stream.peek();\n        } //here we detect values directly after equal character with no quotes\n\n\n        if (!/[\\'\\\"]/.test(peek)) {\n          state.tokenize = inAttributeNoQuote();\n        } //end detect values\n\n\n        return \"operator\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        return state.tokenize(stream, state);\n      } else {\n        stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?]/);\n        return \"keyword\";\n      }\n    }\n\n    function inAttribute(quote) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inPlugin;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n    }\n\n    function inAttributeNoQuote() {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          var ch = stream.next();\n          var peek = stream.peek();\n\n          if (ch == \" \" || ch == \",\" || /[ )}]/.test(peek)) {\n            state.tokenize = inPlugin;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n    }\n\n    var curState, setStyle;\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        curState.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function pushContext(pluginName, startOfLine) {\n      var noIndent = curState.context && curState.context.noIndent;\n      curState.context = {\n        prev: curState.context,\n        pluginName: pluginName,\n        indent: curState.indented,\n        startOfLine: startOfLine,\n        noIndent: noIndent\n      };\n    }\n\n    function popContext() {\n      if (curState.context) curState.context = curState.context.prev;\n    }\n\n    function element(type) {\n      if (type == \"openPlugin\") {\n        curState.pluginName = pluginName;\n        return cont(attributes, endplugin(curState.startOfLine));\n      } else if (type == \"closePlugin\") {\n        var err = false;\n\n        if (curState.context) {\n          err = curState.context.pluginName != pluginName;\n          popContext();\n        } else {\n          err = true;\n        }\n\n        if (err) setStyle = \"error\";\n        return cont(endcloseplugin(err));\n      } else if (type == \"string\") {\n        if (!curState.context || curState.context.name != \"!cdata\") pushContext(\"!cdata\");\n        if (curState.tokenize == inText) popContext();\n        return cont();\n      } else return cont();\n    }\n\n    function endplugin(startOfLine) {\n      return function (type) {\n        if (type == \"selfclosePlugin\" || type == \"endPlugin\") return cont();\n\n        if (type == \"endPlugin\") {\n          pushContext(curState.pluginName, startOfLine);\n          return cont();\n        }\n\n        return cont();\n      };\n    }\n\n    function endcloseplugin(err) {\n      return function (type) {\n        if (err) setStyle = \"error\";\n        if (type == \"endPlugin\") return cont();\n        return pass();\n      };\n    }\n\n    function attributes(type) {\n      if (type == \"keyword\") {\n        setStyle = \"attribute\";\n        return cont(attributes);\n      }\n\n      if (type == \"equals\") return cont(attvalue, attributes);\n      return pass();\n    }\n\n    function attvalue(type) {\n      if (type == \"keyword\") {\n        setStyle = \"string\";\n        return cont();\n      }\n\n      if (type == \"string\") return cont(attvaluemaybe);\n      return pass();\n    }\n\n    function attvaluemaybe(type) {\n      if (type == \"string\") return cont(attvaluemaybe);else return pass();\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: inText,\n          cc: [],\n          indented: 0,\n          startOfLine: true,\n          pluginName: null,\n          context: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.startOfLine = true;\n          state.indented = stream.indentation();\n        }\n\n        if (stream.eatSpace()) return null;\n        setStyle = type = pluginName = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          curState = state;\n\n          while (true) {\n            var comb = state.cc.pop() || element;\n            if (comb(type || style)) break;\n          }\n        }\n\n        state.startOfLine = false;\n        return setStyle || style;\n      },\n      indent: function indent(state, textAfter) {\n        var context = state.context;\n        if (context && context.noIndent) return 0;\n        if (context && /^{\\//.test(textAfter)) context = context.prev;\n\n        while (context && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return 0;\n      },\n      electricChars: \"/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/tiki\", \"tiki\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/tiki/tiki.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/tiki/tiki.js");
/******/ 	
/******/ })()
;