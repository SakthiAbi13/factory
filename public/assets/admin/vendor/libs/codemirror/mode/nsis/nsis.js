/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/mode/simple.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/mode/simple.js ***!
  \**********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      if (val.unicode) flags += \"u\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) (state.pending || (state.pending = [])).push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || _typeof(a) != \"object\" || !b || _typeof(b) != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvYWRkb24vbW9kZS9zaW1wbGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUVBLENBQUMsVUFBU0EsR0FBVCxFQUFjO0VBQ2IsSUFBSSxzQkFBT0MsT0FBUCxNQUFrQixRQUFsQixJQUE4QixzQkFBT0MsTUFBUCxNQUFpQixRQUFuRCxFQUE2RDtJQUMzREYsR0FBRyxDQUFDRyxtQkFBTyxDQUFDLG1KQUFELENBQVIsQ0FBSCxDQURGLEtBRUssSUFBSSxJQUFKLEVBQStDO0lBQ2xEQyxpQ0FBTyxDQUFDLG1KQUFELENBQUQsb0NBQTJCSixHQUEzQjtBQUFBO0FBQUE7QUFBQSxrR0FBTixDQURHLEtBRUE7SUFDSEEsRUFBQTtBQUNILENBUEQsRUFPRyxVQUFTTSxVQUFULEVBQXFCO0VBQ3RCOztFQUVBQSxVQUFVLENBQUNDLGdCQUFYLEdBQThCLFVBQVNDLElBQVQsRUFBZUMsTUFBZixFQUF1QjtJQUNuREgsVUFBVSxDQUFDSSxVQUFYLENBQXNCRixJQUF0QixFQUE0QixVQUFTRyxNQUFULEVBQWlCO01BQzNDLE9BQU9MLFVBQVUsQ0FBQ00sVUFBWCxDQUFzQkQsTUFBdEIsRUFBOEJGLE1BQTlCLENBQVA7SUFDRCxDQUZEO0VBR0QsQ0FKRDs7RUFNQUgsVUFBVSxDQUFDTSxVQUFYLEdBQXdCLFVBQVNELE1BQVQsRUFBaUJGLE1BQWpCLEVBQXlCO0lBQy9DSSxXQUFXLENBQUNKLE1BQUQsRUFBUyxPQUFULENBQVg7SUFDQSxJQUFJSyxPQUFPLEdBQUcsRUFBZDtJQUFBLElBQWtCQyxJQUFJLEdBQUdOLE1BQU0sQ0FBQ00sSUFBUCxJQUFlLEVBQXhDO0lBQUEsSUFBNENDLGNBQWMsR0FBRyxLQUE3RDs7SUFDQSxLQUFLLElBQUlDLEtBQVQsSUFBa0JSLE1BQWxCO01BQTBCLElBQUlRLEtBQUssSUFBSUYsSUFBVCxJQUFpQk4sTUFBTSxDQUFDUyxjQUFQLENBQXNCRCxLQUF0QixD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Z0JtQyxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUtoRCxNQUFyQixDQUFaO2NBQ0EsU0FBU2lGLElBQVQ7WUFDRDtVQUNGO1FBQ0Y7O1FBQ0Q7TUFDRDs7TUFDRCxPQUFPdkMsR0FBRyxHQUFHLENBQU4sR0FBVSxDQUFWLEdBQWMvQyxLQUFLLENBQUNTLE1BQU4sQ0FBYXNDLEdBQWIsQ0FBckI7SUFDRCxDQXZCRDtFQXdCRDtBQUNGLENBcE5EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy92ZW5kb3IvbGlicy9jb2RlbWlycm9yL2FkZG9uL21vZGUvc2ltcGxlLmpzPzViYmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnNcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiXSwgbW9kKTtcbiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudlxuICAgIG1vZChDb2RlTWlycm9yKTtcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgQ29kZU1pcnJvci5kZWZpbmVTaW1wbGVNb2RlID0gZnVuY3Rpb24obmFtZSwgc3RhdGVzKSB7XG4gICAgQ29kZU1pcnJvci5kZWZpbmVNb2RlKG5hbWUsIGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgcmV0dXJuIENvZGVNaXJyb3Iuc2ltcGxlTW9kZShjb25maWcsIHN0YXRlcyk7XG4gICAgfSk7XG4gIH07XG5cbiAgQ29kZU1pcnJvci5zaW1wbGVNb2RlID0gZnVuY3Rpb24oY29uZmlnLCBzdGF0ZXMpIHtcbiAgICBlbnN1cmVTdGF0ZShzdGF0ZXMsIFwic3RhcnRcIik7XG4gICAgdmFyIHN0YXRlc18gPSB7fSwgbWV0YSA9IHN0YXRlcy5tZXRhIHx8IHt9LCBoYXNJbmRlbnRhdGlvbiA9IGZhbHNlO1xuICAgIGZvciAodmFyIHN0YXRlIGluIHN0YXRlcykgaWYgKHN0YXRlICE9IG1ldGEgJiYgc3RhdGVzLmhhc093blByb3BlcnR5KHN0YXRlKSkge1xuICAgICAgdmFyIGxpc3QgPSBzdGF0ZXNfW3N0YXRlXSA9IFtdLCBvcmlnID0gc3RhdGVzW3N0YXRlXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JpZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGF0YSA9IG9yaWdbaV07XG4gICAgICAgIGxpc3QucHVzaChuZXcgUnVsZShkYXRhLCBzdGF0ZXMpKTtcbiAgICAgICAgaWYgKGRhdGEuaW5kZW50IHx8IGRhdGEuZGVkZW50KSBoYXNJbmRlbnRhdGlvbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtb2RlID0ge1xuICAgICAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7c3RhdGU6IFwic3RhcnRcIiwgcGVuZGluZzogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2NhbDogbnVsbCwgbG9jYWxTdGF0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBpbmRlbnQ6IGhhc0luZGVudGF0aW9uID8gW10gOiBudWxsfTtcbiAgICAgIH0sXG4gICAgICBjb3B5U3RhdGU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgIHZhciBzID0ge3N0YXRlOiBzdGF0ZS5zdGF0ZSwgcGVuZGluZzogc3RhdGUucGVuZGluZyxcbiAgICAgICAgICAgICAgICAgbG9jYWw6IHN0YXRlLmxvY2FsLCBsb2NhbFN0YXRlOiBudWxsLFxuICAgICAgICAgICAgICAgICBpbmRlbnQ6IHN0YXRlLmluZGVudCAmJiBzdGF0ZS5pbmRlbnQuc2xpY2UoMCl9O1xuICAgICAgICBpZiAoc3RhdGUubG9jYWxTdGF0ZSlcbiAgICAgICAgICBzLmxvY2FsU3RhdGUgPSBDb2RlTWlycm9yLmNvcHlTdGF0ZShzdGF0ZS5sb2NhbC5tb2RlLCBzdGF0ZS5sb2NhbFN0YXRlKTtcbiAgICAgICAgaWYgKHN0YXRlLnN0YWNrKVxuICAgICAgICAgIHMuc3RhY2sgPSBzdGF0ZS5zdGFjay5zbGljZSgwKTtcbiAgICAgICAgZm9yICh2YXIgcGVycyA9IHN0YXRlLnBlcnNpc3RlbnRTdGF0ZXM7IHBlcnM7IHBlcnMgPSBwZXJzLm5leHQpXG4gICAgICAgICAgcy5wZXJzaXN0ZW50U3RhdGVzID0ge21vZGU6IHBlcnMubW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlYzogcGVycy5zcGVjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogcGVycy5zdGF0ZSA9PSBzdGF0ZS5sb2NhbFN0YXRlID8gcy5sb2NhbFN0YXRlIDogQ29kZU1pcnJvci5jb3B5U3RhdGUocGVycy5tb2RlLCBwZXJzLnN0YXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogcy5wZXJzaXN0ZW50U3RhdGVzfTtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9LFxuICAgICAgdG9rZW46IHRva2VuRnVuY3Rpb24oc3RhdGVzXywgY29uZmlnKSxcbiAgICAgIGlubmVyTW9kZTogZnVuY3Rpb24oc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmxvY2FsICYmIHttb2RlOiBzdGF0ZS5sb2NhbC5tb2RlLCBzdGF0ZTogc3RhdGUubG9jYWxTdGF0ZX07IH0sXG4gICAgICBpbmRlbnQ6IGluZGVudEZ1bmN0aW9uKHN0YXRlc18sIG1ldGEpXG4gICAgfTtcbiAgICBpZiAobWV0YSkgZm9yICh2YXIgcHJvcCBpbiBtZXRhKSBpZiAobWV0YS5oYXNPd25Qcm9wZXJ0eShwcm9wKSlcbiAgICAgIG1vZGVbcHJvcF0gPSBtZXRhW3Byb3BdO1xuICAgIHJldHVybiBtb2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGVuc3VyZVN0YXRlKHN0YXRlcywgbmFtZSkge1xuICAgIGlmICghc3RhdGVzLmhhc093blByb3BlcnR5KG5hbWUpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5kZWZpbmVkIHN0YXRlIFwiICsgbmFtZSArIFwiIGluIHNpbXBsZSBtb2RlXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9SZWdleCh2YWwsIGNhcmV0KSB7XG4gICAgaWYgKCF2YWwpIHJldHVybiAvKD86KS87XG4gICAgdmFyIGZsYWdzID0gXCJcIjtcbiAgICBpZiAodmFsIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBpZiAodmFsLmlnbm9yZUNhc2UpIGZsYWdzID0gXCJpXCI7XG4gICAgICBpZiAodmFsLnVuaWNvZGUpIGZsYWdzICs9IFwidVwiXG4gICAgICB2YWwgPSB2YWwuc291cmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSBTdHJpbmcodmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoKGNhcmV0ID09PSBmYWxzZSA/IFwiXCIgOiBcIl5cIikgKyBcIig/OlwiICsgdmFsICsgXCIpXCIsIGZsYWdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzVG9rZW4odmFsKSB7XG4gICAgaWYgKCF2YWwpIHJldHVybiBudWxsO1xuICAgIGlmICh2YWwuYXBwbHkpIHJldHVybiB2YWxcbiAgICBpZiAodHlwZW9mIHZhbCA9PSBcInN0cmluZ1wiKSByZXR1cm4gdmFsLnJlcGxhY2UoL1xcLi9nLCBcIiBcIik7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzdWx0LnB1c2godmFsW2ldICYmIHZhbFtpXS5yZXBsYWNlKC9cXC4vZywgXCIgXCIpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gUnVsZShkYXRhLCBzdGF0ZXMpIHtcbiAgICBpZiAoZGF0YS5uZXh0IHx8IGRhdGEucHVzaCkgZW5zdXJlU3RhdGUoc3RhdGVzLCBkYXRhLm5leHQgfHwgZGF0YS5wdXNoKTtcbiAgICB0aGlzLnJlZ2V4ID0gdG9SZWdleChkYXRhLnJlZ2V4KTtcbiAgICB0aGlzLnRva2VuID0gYXNUb2tlbihkYXRhLnRva2VuKTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5GdW5jdGlvbihzdGF0ZXMsIGNvbmZpZykge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUucGVuZGluZykge1xuICAgICAgICB2YXIgcGVuZCA9IHN0YXRlLnBlbmRpbmcuc2hpZnQoKTtcbiAgICAgICAgaWYgKHN0YXRlLnBlbmRpbmcubGVuZ3RoID09IDApIHN0YXRlLnBlbmRpbmcgPSBudWxsO1xuICAgICAgICBzdHJlYW0ucG9zICs9IHBlbmQudGV4dC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBwZW5kLnRva2VuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUubG9jYWwpIHtcbiAgICAgICAgaWYgKHN0YXRlLmxvY2FsLmVuZCAmJiBzdHJlYW0ubWF0Y2goc3RhdGUubG9jYWwuZW5kKSkge1xuICAgICAgICAgIHZhciB0b2sgPSBzdGF0ZS5sb2NhbC5lbmRUb2tlbiB8fCBudWxsO1xuICAgICAgICAgIHN0YXRlLmxvY2FsID0gc3RhdGUubG9jYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIHRvaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdG9rID0gc3RhdGUubG9jYWwubW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmxvY2FsU3RhdGUpLCBtO1xuICAgICAgICAgIGlmIChzdGF0ZS5sb2NhbC5lbmRTY2FuICYmIChtID0gc3RhdGUubG9jYWwuZW5kU2Nhbi5leGVjKHN0cmVhbS5jdXJyZW50KCkpKSlcbiAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBzdHJlYW0uc3RhcnQgKyBtLmluZGV4O1xuICAgICAgICAgIHJldHVybiB0b2s7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGN1clN0YXRlID0gc3RhdGVzW3N0YXRlLnN0YXRlXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VyU3RhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBjdXJTdGF0ZVtpXTtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoIXJ1bGUuZGF0YS5zb2wgfHwgc3RyZWFtLnNvbCgpKSAmJiBzdHJlYW0ubWF0Y2gocnVsZS5yZWdleCk7XG4gICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgaWYgKHJ1bGUuZGF0YS5uZXh0KSB7XG4gICAgICAgICAgICBzdGF0ZS5zdGF0ZSA9IHJ1bGUuZGF0YS5uZXh0O1xuICAgICAgICAgIH0gZWxzZSBpZiAocnVsZS5kYXRhLnB1c2gpIHtcbiAgICAgICAgICAgIChzdGF0ZS5zdGFjayB8fCAoc3RhdGUuc3RhY2sgPSBbXSkpLnB1c2goc3RhdGUuc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUuc3RhdGUgPSBydWxlLmRhdGEucHVzaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJ1bGUuZGF0YS5wb3AgJiYgc3RhdGUuc3RhY2sgJiYgc3RhdGUuc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICBzdGF0ZS5zdGF0ZSA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChydWxlLmRhdGEubW9kZSlcbiAgICAgICAgICAgIGVudGVyTG9jYWxNb2RlKGNvbmZpZywgc3RhdGUsIHJ1bGUuZGF0YS5tb2RlLCBydWxlLnRva2VuKTtcbiAgICAgICAgICBpZiAocnVsZS5kYXRhLmluZGVudClcbiAgICAgICAgICAgIHN0YXRlLmluZGVudC5wdXNoKHN0cmVhbS5pbmRlbnRhdGlvbigpICsgY29uZmlnLmluZGVudFVuaXQpO1xuICAgICAgICAgIGlmIChydWxlLmRhdGEuZGVkZW50KVxuICAgICAgICAgICAgc3RhdGUuaW5kZW50LnBvcCgpO1xuICAgICAgICAgIHZhciB0b2tlbiA9IHJ1bGUudG9rZW5cbiAgICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4uYXBwbHkpIHRva2VuID0gdG9rZW4obWF0Y2hlcylcbiAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPiAyICYmIHJ1bGUudG9rZW4gJiYgdHlwZW9mIHJ1bGUudG9rZW4gIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDI7IGogPCBtYXRjaGVzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgICBpZiAobWF0Y2hlc1tqXSlcbiAgICAgICAgICAgICAgICAoc3RhdGUucGVuZGluZyB8fCAoc3RhdGUucGVuZGluZyA9IFtdKSkucHVzaCh7dGV4dDogbWF0Y2hlc1tqXSwgdG9rZW46IHJ1bGUudG9rZW5baiAtIDFdfSk7XG4gICAgICAgICAgICBzdHJlYW0uYmFja1VwKG1hdGNoZXNbMF0ubGVuZ3RoIC0gKG1hdGNoZXNbMV0gPyBtYXRjaGVzWzFdLmxlbmd0aCA6IDApKTtcbiAgICAgICAgICAgIHJldHVybiB0b2tlblswXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuICYmIHRva2VuLmpvaW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlblswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjbXAoYSwgYikge1xuICAgIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoIWEgfHwgdHlwZW9mIGEgIT0gXCJvYmplY3RcIiB8fCAhYiB8fCB0eXBlb2YgYiAhPSBcIm9iamVjdFwiKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHByb3BzID0gMDtcbiAgICBmb3IgKHZhciBwcm9wIGluIGEpIGlmIChhLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICBpZiAoIWIuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgIWNtcChhW3Byb3BdLCBiW3Byb3BdKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcHJvcHMrKztcbiAgICB9XG4gICAgZm9yICh2YXIgcHJvcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgcHJvcHMtLTtcbiAgICByZXR1cm4gcHJvcHMgPT0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudGVyTG9jYWxNb2RlKGNvbmZpZywgc3RhdGUsIHNwZWMsIHRva2VuKSB7XG4gICAgdmFyIHBlcnM7XG4gICAgaWYgKHNwZWMucGVyc2lzdGVudCkgZm9yICh2YXIgcCA9IHN0YXRlLnBlcnNpc3RlbnRTdGF0ZXM7IHAgJiYgIXBlcnM7IHAgPSBwLm5leHQpXG4gICAgICBpZiAoc3BlYy5zcGVjID8gY21wKHNwZWMuc3BlYywgcC5zcGVjKSA6IHNwZWMubW9kZSA9PSBwLm1vZGUpIHBlcnMgPSBwO1xuICAgIHZhciBtb2RlID0gcGVycyA/IHBlcnMubW9kZSA6IHNwZWMubW9kZSB8fCBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCBzcGVjLnNwZWMpO1xuICAgIHZhciBsU3RhdGUgPSBwZXJzID8gcGVycy5zdGF0ZSA6IENvZGVNaXJyb3Iuc3RhcnRTdGF0ZShtb2RlKTtcbiAgICBpZiAoc3BlYy5wZXJzaXN0ZW50ICYmICFwZXJzKVxuICAgICAgc3RhdGUucGVyc2lzdGVudFN0YXRlcyA9IHttb2RlOiBtb2RlLCBzcGVjOiBzcGVjLnNwZWMsIHN0YXRlOiBsU3RhdGUsIG5leHQ6IHN0YXRlLnBlcnNpc3RlbnRTdGF0ZXN9O1xuXG4gICAgc3RhdGUubG9jYWxTdGF0ZSA9IGxTdGF0ZTtcbiAgICBzdGF0ZS5sb2NhbCA9IHttb2RlOiBtb2RlLFxuICAgICAgICAgICAgICAgICAgIGVuZDogc3BlYy5lbmQgJiYgdG9SZWdleChzcGVjLmVuZCksXG4gICAgICAgICAgICAgICAgICAgZW5kU2Nhbjogc3BlYy5lbmQgJiYgc3BlYy5mb3JjZUVuZCAhPT0gZmFsc2UgJiYgdG9SZWdleChzcGVjLmVuZCwgZmFsc2UpLFxuICAgICAgICAgICAgICAgICAgIGVuZFRva2VuOiB0b2tlbiAmJiB0b2tlbi5qb2luID8gdG9rZW5bdG9rZW4ubGVuZ3RoIC0gMV0gOiB0b2tlbn07XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleE9mKHZhbCwgYXJyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGlmIChhcnJbaV0gPT09IHZhbCkgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRlbnRGdW5jdGlvbihzdGF0ZXMsIG1ldGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlciwgbGluZSkge1xuICAgICAgaWYgKHN0YXRlLmxvY2FsICYmIHN0YXRlLmxvY2FsLm1vZGUuaW5kZW50KVxuICAgICAgICByZXR1cm4gc3RhdGUubG9jYWwubW9kZS5pbmRlbnQoc3RhdGUubG9jYWxTdGF0ZSwgdGV4dEFmdGVyLCBsaW5lKTtcbiAgICAgIGlmIChzdGF0ZS5pbmRlbnQgPT0gbnVsbCB8fCBzdGF0ZS5sb2NhbCB8fCBtZXRhLmRvbnRJbmRlbnRTdGF0ZXMgJiYgaW5kZXhPZihzdGF0ZS5zdGF0ZSwgbWV0YS5kb250SW5kZW50U3RhdGVzKSA+IC0xKVxuICAgICAgICByZXR1cm4gQ29kZU1pcnJvci5QYXNzO1xuXG4gICAgICB2YXIgcG9zID0gc3RhdGUuaW5kZW50Lmxlbmd0aCAtIDEsIHJ1bGVzID0gc3RhdGVzW3N0YXRlLnN0YXRlXTtcbiAgICAgIHNjYW46IGZvciAoOzspIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbaV07XG4gICAgICAgICAgaWYgKHJ1bGUuZGF0YS5kZWRlbnQgJiYgcnVsZS5kYXRhLmRlZGVudElmTGluZVN0YXJ0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIG0gPSBydWxlLnJlZ2V4LmV4ZWModGV4dEFmdGVyKTtcbiAgICAgICAgICAgIGlmIChtICYmIG1bMF0pIHtcbiAgICAgICAgICAgICAgcG9zLS07XG4gICAgICAgICAgICAgIGlmIChydWxlLm5leHQgfHwgcnVsZS5wdXNoKSBydWxlcyA9IHN0YXRlc1tydWxlLm5leHQgfHwgcnVsZS5wdXNoXTtcbiAgICAgICAgICAgICAgdGV4dEFmdGVyID0gdGV4dEFmdGVyLnNsaWNlKG1bMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgY29udGludWUgc2NhbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gcG9zIDwgMCA/IDAgOiBzdGF0ZS5pbmRlbnRbcG9zXTtcbiAgICB9O1xuICB9XG59KTtcbiJdLCJuYW1lcyI6WyJtb2QiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIkNvZGVNaXJyb3IiLCJkZWZpbmVTaW1wbGVNb2RlIiwibmFtZSIsInN0YXRlcyIsImRlZmluZU1vZGUiLCJjb25maWciLCJzaW1wbGVNb2RlIiwiZW5zdXJlU3RhdGUiLCJzdGF0ZXNfIiwibWV0YSIsImhhc0luZGVudGF0aW9uIiwic3RhdGUiLCJoYXNPd25Qcm9wZXJ0eSIsImxpc3QiLCJvcmlnIiwiaSIsImxlbmd0aCIsImRhdGEiLCJwdXNoIiwiUnVsZSIsImluZGVudCIsImRlZGVudCIsIm1vZGUiLCJzdGFydFN0YXRlIiwicGVuZGluZyIsImxvY2FsIiwibG9jYWxTdGF0ZSIsImNvcHlTdGF0ZSIsInMiLCJzbGljZSIsInN0YWNrIiwicGVycyIsInBlcnNpc3RlbnRTdGF0ZXMiLCJuZXh0Iiwic3BlYyIsInRva2VuIiwidG9rZW5GdW5jdGlvbiIsImlubmVyTW9kZSIsImluZGVudEZ1bmN0aW9uIiwicHJvcCIsIkVycm9yIiwidG9SZWdleCIsInZhbCIsImNhcmV0IiwiZmxhZ3MiLCJSZWdFeHAiLCJpZ25vcmVDYXNlIiwidW5pY29kZSIsInNvdXJjZSIsIlN0cmluZyIsImFzVG9rZW4iLCJhcHBseSIsInJlcGxhY2UiLCJyZXN1bHQiLCJyZWdleCIsInN0cmVhbSIsInBlbmQiLCJzaGlmdCIsInBvcyIsInRleHQiLCJlbmQiLCJtYXRjaCIsInRvayIsImVuZFRva2VuIiwibSIsImVuZFNjYW4iLCJleGVjIiwiY3VycmVudCIsInN0YXJ0IiwiaW5kZXgiLCJjdXJTdGF0ZSIsInJ1bGUiLCJtYXRjaGVzIiwic29sIiwicG9wIiwiZW50ZXJMb2NhbE1vZGUiLCJpbmRlbnRhdGlvbiIsImluZGVudFVuaXQiLCJqIiwiYmFja1VwIiwiam9pbiIsImNtcCIsImEiLCJiIiwicHJvcHMiLCJwZXJzaXN0ZW50IiwicCIsImdldE1vZGUiLCJsU3RhdGUiLCJmb3JjZUVuZCIsImluZGV4T2YiLCJhcnIiLCJ0ZXh0QWZ0ZXIiLCJsaW5lIiwiZG9udEluZGVudFN0YXRlcyIsIlBhc3MiLCJydWxlcyIsInNjYW4iLCJkZWRlbnRJZkxpbmVTdGFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/mode/simple.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/nsis/nsis.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/nsis/nsis.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Author: Jan T. Sott (http://github.com/idleberg)\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../../addon/mode/simple */ \"./resources/assets/vendor/libs/codemirror/addon/mode/simple.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../../addon/mode/simple */ \"./resources/assets/vendor/libs/codemirror/addon/mode/simple.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"nsis\", {\n    start: [// Numbers\n    {\n      regex: /(?:[+-]?)(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\d+.?\\d*)/,\n      token: \"number\"\n    }, // Strings\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?/,\n      token: \"string\"\n    }, {\n      regex: /`(?:[^\\\\`]|\\\\.)*`?/,\n      token: \"string\"\n    }, // Compile Time Commands\n    {\n      regex: /^\\s*(?:\\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\\b/i,\n      token: \"keyword\"\n    }, // Conditional Compilation\n    {\n      regex: /^\\s*(?:\\!(if(?:n?def)?|ifmacron?def|macro))\\b/i,\n      token: \"keyword\",\n      indent: true\n    }, {\n      regex: /^\\s*(?:\\!(else|endif|macroend))\\b/i,\n      token: \"keyword\",\n      dedent: true\n    }, // Runtime Commands\n    {\n      regex: /^\\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\\b/i,\n      token: \"keyword\"\n    }, {\n      regex: /^\\s*(?:Function|PageEx|Section(?:Group)?)\\b/i,\n      token: \"keyword\",\n      indent: true\n    }, {\n      regex: /^\\s*(?:(Function|PageEx|Section(?:Group)?)End)\\b/i,\n      token: \"keyword\",\n      dedent: true\n    }, // Command Options\n    {\n      regex: /\\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\\b/i,\n      token: \"atom\"\n    }, {\n      regex: /\\b(?:admin|all|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\\.components|un\\.custom|un\\.directory|un\\.instfiles|un\\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|zlib)\\b/i,\n      token: \"builtin\"\n    }, // LogicLib.nsh\n    {\n      regex: /\\$\\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\\}/i,\n      token: \"variable-2\",\n      indent: true\n    }, // FileFunc.nsh\n    {\n      regex: /\\$\\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\\}/i,\n      token: \"variable-2\",\n      dedent: true\n    }, // Memento.nsh\n    {\n      regex: /\\$\\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\\}/i,\n      token: \"variable-2\",\n      dedent: true\n    }, // TextFunc.nsh\n    {\n      regex: /\\$\\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\\}/i,\n      token: \"variable-2\",\n      dedent: true\n    }, // WinVer.nsh\n    {\n      regex: /\\$\\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\\}/i,\n      token: \"variable\",\n      dedent: true\n    }, // WordFunc.nsh\n    {\n      regex: /\\$\\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\\}/i,\n      token: \"variable-2\",\n      dedent: true\n    }, // x64.nsh\n    {\n      regex: /\\$\\{(?:RunningX64)\\}/i,\n      token: \"variable\",\n      dedent: true\n    }, {\n      regex: /\\$\\{(?:Disable|Enable)X64FSRedirection\\}/i,\n      token: \"variable-2\",\n      dedent: true\n    }, // Line Comment\n    {\n      regex: /(#|;).*/,\n      token: \"comment\"\n    }, // Block Comment\n    {\n      regex: /\\/\\*/,\n      token: \"comment\",\n      next: \"comment\"\n    }, // Operator\n    {\n      regex: /[-+\\/*=<>!]+/,\n      token: \"operator\"\n    }, // Variable\n    {\n      regex: /\\$\\w[\\w\\.]*/,\n      token: \"variable\"\n    }, // Constant\n    {\n      regex: /\\${[\\!\\w\\.:-]+}/,\n      token: \"variable-2\"\n    }, // Language String\n    {\n      regex: /\\$\\([\\!\\w\\.:-]+\\)/,\n      token: \"variable-3\"\n    }],\n    comment: [{\n      regex: /.*?\\*\\//,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      electricInput: /^\\s*((Function|PageEx|Section|Section(Group)?)End|(\\!(endif|macroend))|\\$\\{(End(If|Unless|While)|Loop(Until)|Next)\\})$/i,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: [\"#\", \";\"]\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-nsis\", \"nsis\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/nsis/nsis.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/nsis/nsis.js");
/******/ 	
/******/ })()
;