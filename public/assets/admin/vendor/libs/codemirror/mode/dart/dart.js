/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/clike/clike.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/clike/clike.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function Context(indented, column, type, info, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.info = info;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type, info) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\" && type != \"statement\") indent = state.context.indented;\n    return state.context = new Context(indent, col, type, info, null, state.context);\n  }\n\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  function typeBefore(stream, state, pos) {\n    if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\n    if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n    if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n  }\n\n  function isTopScope(context) {\n    for (;;) {\n      if (!context || context.type == \"top\") return true;\n      if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n      context = context.prev;\n    }\n  }\n\n  CodeMirror.defineMode(\"clike\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n        dontAlignCalls = parserConfig.dontAlignCalls,\n        keywords = parserConfig.keywords || {},\n        types = parserConfig.types || {},\n        builtin = parserConfig.builtin || {},\n        blockKeywords = parserConfig.blockKeywords || {},\n        defKeywords = parserConfig.defKeywords || {},\n        atoms = parserConfig.atoms || {},\n        hooks = parserConfig.hooks || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false,\n        indentSwitch = parserConfig.indentSwitch !== false,\n        namespaceSeparator = parserConfig.namespaceSeparator,\n        isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n        numberStart = parserConfig.numberStart || /[\\d\\.]/,\n        number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n        isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n        isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\n        // An optional function that takes a {string} token and returns true if it\n    // should be treated as a builtin.\n    isReservedIdentifier = parserConfig.isReservedIdentifier || false;\n    var curPunc, isDefKeyword;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (numberStart.test(ch)) {\n        stream.backUp(1);\n        if (stream.match(number)) return \"number\";\n        stream.next();\n      }\n\n      if (isPunctuationChar.test(ch)) {\n        curPunc = ch;\n        return null;\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n\n        return \"operator\";\n      }\n\n      stream.eatWhile(isIdentifierChar);\n      if (namespaceSeparator) while (stream.match(namespaceSeparator)) {\n        stream.eatWhile(isIdentifierChar);\n      }\n      var cur = stream.current();\n\n      if (contains(keywords, cur)) {\n        if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n        if (contains(defKeywords, cur)) isDefKeyword = true;\n        return \"keyword\";\n      }\n\n      if (contains(types, cur)) return \"type\";\n\n      if (contains(builtin, cur) || isReservedIdentifier && isReservedIdentifier(cur)) {\n        if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n        return \"builtin\";\n      }\n\n      if (contains(atoms, cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function maybeEOL(stream, state) {\n      if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context)) state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", null, false),\n          indented: 0,\n          startOfLine: true,\n          prevToken: null\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) {\n          maybeEOL(stream, state);\n          return null;\n        }\n\n        curPunc = isDefKeyword = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if (curPunc == \";\" || curPunc == \":\" || curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)) while (state.context.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n\n          if (ctx.type == \"}\") ctx = popContext(state);\n\n          while (ctx.type == \"statement\") {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\" || ctx.type == \"statement\" && curPunc == \"newstatement\")) {\n          pushContext(state, stream.column(), \"statement\", stream.current());\n        }\n        if (style == \"variable\" && (state.prevToken == \"def\" || parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) && isTopScope(state.context) && stream.match(/^\\s*\\(/, false))) style = \"def\";\n\n        if (hooks.token) {\n          var result = hooks.token(stream, state, style);\n          if (result !== undefined) style = result;\n        }\n\n        if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n        state.startOfLine = false;\n        state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n        maybeEOL(stream, state);\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return CodeMirror.Pass;\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n        var closing = firstChar == ctx.type;\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        if (parserConfig.dontIndentStatements) while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info)) {\n          ctx = ctx.prev;\n        }\n\n        if (hooks.indent) {\n          var hook = hooks.indent(state, ctx, textAfter, indentUnit);\n          if (typeof hook == \"number\") return hook;\n        }\n\n        var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n\n        if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n          while (ctx.type != \"top\" && ctx.type != \"}\") {\n            ctx = ctx.prev;\n          }\n\n          return ctx.indented;\n        }\n\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n        if (ctx.align && (!dontAlignCalls || ctx.type != \")\")) return ctx.column + (closing ? 0 : 1);\n        if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;\n        return ctx.indented + (closing ? 0 : indentUnit) + (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 0);\n      },\n      electricInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {},\n        words = str.split(\" \");\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  function contains(words, word) {\n    if (typeof words === \"function\") {\n      return words(word);\n    } else {\n      return words.propertyIsEnumerable(word);\n    }\n  }\n\n  var cKeywords = \"auto if break case register continue return default do sizeof \" + \"static else struct switch extern typedef union for goto while enum const \" + \"volatile inline restrict asm fortran\"; // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.\n\n  var cppKeywords = \"alignas alignof and and_eq audit axiom bitand bitor catch \" + \"class compl concept constexpr const_cast decltype delete dynamic_cast \" + \"explicit export final friend import module mutable namespace new noexcept \" + \"not not_eq operator or or_eq override private protected public \" + \"reinterpret_cast requires static_assert static_cast template this \" + \"thread_local throw try typeid typename using virtual xor xor_eq\";\n  var objCKeywords = \"bycopy byref in inout oneway out self super atomic nonatomic retain copy \" + \"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd \" + \"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class \" + \"@public @package @private @protected @required @optional @try @catch @finally @import \" + \"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available\";\n  var objCBuiltins = \"FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION \" + \" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER \" + \"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION \" + \"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT\"; // Do not use this. Use the cTypes function below. This is global just to avoid\n  // excessive calls when cTypes is being called multiple times during a parse.\n\n  var basicCTypes = words(\"int long char short double float unsigned signed \" + \"void bool\"); // Do not use this. Use the objCTypes function below. This is global just to avoid\n  // excessive calls when objCTypes is being called multiple times during a parse.\n\n  var basicObjCTypes = words(\"SEL instancetype id Class Protocol BOOL\"); // Returns true if identifier is a \"C\" type.\n  // C type is defined as those that are reserved by the compiler (basicTypes),\n  // and those that end in _t (Reserved by POSIX for types)\n  // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html\n\n  function cTypes(identifier) {\n    return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);\n  } // Returns true if identifier is a \"Objective C\" type.\n\n\n  function objCTypes(identifier) {\n    return cTypes(identifier) || contains(basicObjCTypes, identifier);\n  }\n\n  var cBlockKeywords = \"case do else for if switch while struct enum union\";\n  var cDefKeywords = \"struct enum union\";\n\n  function cppHook(stream, state) {\n    if (!state.startOfLine) return false;\n\n    for (var ch, next = null; ch = stream.peek();) {\n      if (ch == \"\\\\\" && stream.match(/^.$/)) {\n        next = cppHook;\n        break;\n      } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n        break;\n      }\n\n      stream.next();\n    }\n\n    state.tokenize = next;\n    return \"meta\";\n  }\n\n  function pointerHook(_stream, state) {\n    if (state.prevToken == \"type\") return \"type\";\n    return false;\n  } // For C and C++ (and ObjC): identifiers starting with __\n  // or _ followed by a capital letter are reserved for the compiler.\n\n\n  function cIsReservedIdentifier(token) {\n    if (!token || token.length < 2) return false;\n    if (token[0] != '_') return false;\n    return token[1] == '_' || token[1] !== token[1].toLowerCase();\n  }\n\n  function cpp14Literal(stream) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n\n  function cpp11StringHook(stream, state) {\n    stream.backUp(1); // Raw strings.\n\n    if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {\n      var match = stream.match(/^\"([^\\s\\\\()]{0,16})\\(/);\n\n      if (!match) {\n        return false;\n      }\n\n      state.cpp11RawStringDelim = match[1];\n      state.tokenize = tokenRawString;\n      return tokenRawString(stream, state);\n    } // Unicode strings/chars.\n\n\n    if (stream.match(/^(?:u8|u|U|L)/)) {\n      if (stream.match(/^[\"']/,\n      /* eat */\n      false)) {\n        return \"string\";\n      }\n\n      return false;\n    } // Ignore this hook.\n\n\n    stream.next();\n    return false;\n  }\n\n  function cppLooksLikeConstructor(word) {\n    var lastTwo = /(\\w+)::~?(\\w+)$/.exec(word);\n    return lastTwo && lastTwo[1] == lastTwo[2];\n  } // C#-style strings where \"\" escapes a quote.\n\n\n  function tokenAtString(stream, state) {\n    var next;\n\n    while ((next = stream.next()) != null) {\n      if (next == '\"' && !stream.eat('\"')) {\n        state.tokenize = null;\n        break;\n      }\n    }\n\n    return \"string\";\n  } // C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n  // <delim> can be a string up to 16 characters long.\n\n\n  function tokenRawString(stream, state) {\n    // Escape characters that have special regex meanings.\n    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n    var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n    if (match) state.tokenize = null;else stream.skipToEnd();\n    return \"string\";\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n\n    function add(obj) {\n      if (obj) for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) words.push(prop);\n      }\n    }\n\n    add(mode.keywords);\n    add(mode.types);\n    add(mode.builtin);\n    add(mode.atoms);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i) {\n      CodeMirror.defineMIME(mimes[i], mode);\n    }\n  }\n\n  def([\"text/x-csrc\", \"text/x-c\", \"text/x-chdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    defKeywords: words(cDefKeywords),\n    typeFirstDefinitions: true,\n    atoms: words(\"NULL true false\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def([\"text/x-c++src\", \"text/x-c++hdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + cppKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords + \" class try catch\"),\n    defKeywords: words(cDefKeywords + \" class namespace\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false NULL nullptr\"),\n    dontIndentStatements: /^template$/,\n    isIdentifierChar: /[\\w\\$_~\\xa1-\\uffff]/,\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function token(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" && (state.prevToken == \";\" || state.prevToken == null || state.prevToken == \"}\") && cppLooksLikeConstructor(stream.current())) return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-java\", {\n    name: \"clike\",\n    keywords: words(\"abstract assert break case catch class const continue default \" + \"do else enum extends final finally for goto if implements import \" + \"instanceof interface native new package private protected public \" + \"return static strictfp super switch synchronized this throw throws transient \" + \"try volatile while @interface\"),\n    types: words(\"var byte short int long float double boolean char void Boolean Byte Character Double Float \" + \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n    blockKeywords: words(\"catch class do else finally for if switch try while\"),\n    defKeywords: words(\"class interface enum @interface\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    hooks: {\n      \"@\": function _(stream) {\n        // Don't match the @interface keyword.\n        if (stream.match('interface', false)) return false;\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    },\n    modeProps: {\n      fold: [\"brace\", \"import\"]\n    }\n  });\n  def(\"text/x-csharp\", {\n    name: \"clike\",\n    keywords: words(\"abstract as async await base break case catch checked class const continue\" + \" default delegate do else enum event explicit extern finally fixed for\" + \" foreach goto if implicit in interface internal is lock namespace new\" + \" operator out override params private protected public readonly ref return sealed\" + \" sizeof stackalloc static struct switch this throw try typeof unchecked\" + \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" + \" global group into join let orderby partial remove select set value var yield\"),\n    types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" + \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" + \" UInt64 bool byte char decimal double short int long object\" + \" sbyte float string ushort uint ulong\"),\n    blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n    defKeywords: words(\"class interface namespace struct var\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"@\": function _(stream, state) {\n        if (stream.eat('\"')) {\n          state.tokenize = tokenAtString;\n          return tokenAtString(stream, state);\n        }\n\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n  function tokenTripleString(stream, state) {\n    var escaped = false;\n\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"\"\"')) {\n        state.tokenize = null;\n        break;\n      }\n\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n\n    return \"string\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null;\n            break;\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      return \"comment\";\n    };\n  }\n\n  def(\"text/x-scala\", {\n    name: \"clike\",\n    keywords: words(\n    /* scala */\n    \"abstract case catch class def do else extends final finally for forSome if \" + \"implicit import lazy match new null object override package private protected return \" + \"sealed super this throw trait try type val var while with yield _ \" +\n    /* package scala */\n    \"assert assume require print println printf readLine readBoolean readByte readShort \" + \"readChar readInt readLong readFloat readDouble\"),\n    types: words(\"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" + \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" + \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" + \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" + \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" +\n    /* package java.lang */\n    \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" + \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" + \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" + \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"),\n    multiLineStrings: true,\n    blockKeywords: words(\"catch class enum do else finally for forSome if match switch try while\"),\n    defKeywords: words(\"class enum def object package trait type val var\"),\n    atoms: words(\"true false null\"),\n    indentStatements: false,\n    indentSwitch: false,\n    isOperatorChar: /[+\\-*&%=<>!?|\\/#:@]/,\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function _(stream, state) {\n        if (!stream.match('\"\"')) return false;\n        state.tokenize = tokenTripleString;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      \"=\": function _(stream, state) {\n        var cx = state.context;\n\n        if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n          state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);\n          return \"operator\";\n        } else {\n          return false;\n        }\n      },\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state);\n      }\n    },\n    modeProps: {\n      closeBrackets: {\n        pairs: '()[]{}\"\"',\n        triples: '\"'\n      }\n    }\n  });\n\n  function tokenKotlinString(tripleString) {\n    return function (stream, state) {\n      var escaped = false,\n          next,\n          end = false;\n\n      while (!stream.eol()) {\n        if (!tripleString && !escaped && stream.match('\"')) {\n          end = true;\n          break;\n        }\n\n        if (tripleString && stream.match('\"\"\"')) {\n          end = true;\n          break;\n        }\n\n        next = stream.next();\n        if (!escaped && next == \"$\" && stream.match('{')) stream.skipTo(\"}\");\n        escaped = !escaped && next == \"\\\\\" && !tripleString;\n      }\n\n      if (end || !tripleString) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  def(\"text/x-kotlin\", {\n    name: \"clike\",\n    keywords: words(\n    /*keywords*/\n    \"package as typealias class interface this super val operator \" + \"var fun for is in This throw return annotation \" + \"break continue object if else while do try when !in !is as? \" +\n    /*soft keywords*/\n    \"file import where by get set abstract enum open inner override private public internal \" + \"protected catch finally out final vararg reified dynamic companion constructor init \" + \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" + \"external annotation crossinline const operator infix suspend actual expect setparam value\"),\n    types: words(\n    /* package java.lang */\n    \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" + \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" + \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" + \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray \" + \"ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy \" + \"LazyThreadSafetyMode LongArray Nothing ShortArray Unit\"),\n    intendSwitch: false,\n    indentStatements: false,\n    multiLineStrings: true,\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+(\\.\\d+)?|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n    defKeywords: words(\"class val var object interface fun\"),\n    atoms: words(\"true false null this\"),\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '*': function _(_stream, state) {\n        return state.prevToken == '.' ? 'variable' : 'operator';\n      },\n      '\"': function _(stream, state) {\n        state.tokenize = tokenKotlinString(stream.match('\"\"'));\n        return state.tokenize(stream, state);\n      },\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state);\n      },\n      indent: function indent(state, ctx, textAfter, indentUnit) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        if ((state.prevToken == \"}\" || state.prevToken == \")\") && textAfter == \"\") return state.indented;\n        if (state.prevToken == \"operator\" && textAfter != \"}\" && state.context.type != \"}\" || state.prevToken == \"variable\" && firstChar == \".\" || (state.prevToken == \"}\" || state.prevToken == \")\") && firstChar == \".\") return indentUnit * 2 + ctx.indented;\n        if (ctx.align && ctx.type == \"}\") return ctx.indented + (state.context.type == (textAfter || \"\").charAt(0) ? 0 : indentUnit);\n      }\n    },\n    modeProps: {\n      closeBrackets: {\n        triples: '\"'\n      }\n    }\n  });\n  def([\"x-shader/x-vertex\", \"x-shader/x-fragment\"], {\n    name: \"clike\",\n    keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" + \"sampler1DShadow sampler2DShadow \" + \"const attribute uniform varying \" + \"break continue discard return \" + \"for while do if else struct \" + \"in out inout\"),\n    types: words(\"float int bool void \" + \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" + \"mat2 mat3 mat4\"),\n    blockKeywords: words(\"for while do if else struct\"),\n    builtin: words(\"radians degrees sin cos tan asin acos atan \" + \"pow exp log exp2 sqrt inversesqrt \" + \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" + \"length distance dot cross normalize ftransform faceforward \" + \"reflect refract matrixCompMult \" + \"lessThan lessThanEqual greaterThan greaterThanEqual \" + \"equal notEqual any all not \" + \"texture1D texture1DProj texture1DLod texture1DProjLod \" + \"texture2D texture2DProj texture2DLod texture2DProjLod \" + \"texture3D texture3DProj texture3DLod texture3DProjLod \" + \"textureCube textureCubeLod \" + \"shadow1D shadow2D shadow1DProj shadow2DProj \" + \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" + \"dFdx dFdy fwidth \" + \"noise1 noise2 noise3 noise4\"),\n    atoms: words(\"true false \" + \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" + \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" + \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" + \"gl_FogCoord gl_PointCoord \" + \"gl_Position gl_PointSize gl_ClipVertex \" + \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" + \"gl_TexCoord gl_FogFragCoord \" + \"gl_FragCoord gl_FrontFacing \" + \"gl_FragData gl_FragDepth \" + \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" + \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" + \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" + \"gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" + \"gl_ProjectionMatrixInverseTranspose \" + \"gl_ModelViewProjectionMatrixInverseTranspose \" + \"gl_TextureMatrixInverseTranspose \" + \"gl_NormalScale gl_DepthRange gl_ClipPlane \" + \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" + \"gl_FrontLightModelProduct gl_BackLightModelProduct \" + \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" + \"gl_FogParameters \" + \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" + \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" + \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" + \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" + \"gl_MaxDrawBuffers\"),\n    indentSwitch: false,\n    hooks: {\n      \"#\": cppHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-nesc\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" as atomic async call command component components configuration event generic \" + \"implementation includes interface module new norace nx_struct nx_union post provides \" + \"signal task uses abstract extends\"),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    atoms: words(\"null true false\"),\n    hooks: {\n      \"#\": cppHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-objectivec\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class\"),\n    dontIndentStatements: /^@.*$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-objectivec++\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords + \" \" + cppKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class class namespace\"),\n    dontIndentStatements: /^@.*$|^template$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function token(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" && (state.prevToken == \";\" || state.prevToken == null || state.prevToken == \"}\") && cppLooksLikeConstructor(stream.current())) return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  });\n  def(\"text/x-squirrel\", {\n    name: \"clike\",\n    keywords: words(\"base break clone continue const default delete enum extends function in class\" + \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n    types: cTypes,\n    blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n    defKeywords: words(\"function local class\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"#\": cppHook\n    },\n    modeProps: {\n      fold: [\"brace\", \"include\"]\n    }\n  }); // Ceylon Strings need to deal with interpolation\n\n  var stringTokenizer = null;\n\n  function tokenCeylonString(type) {\n    return function (stream, state) {\n      var escaped = false,\n          next,\n          end = false;\n\n      while (!stream.eol()) {\n        if (!escaped && stream.match('\"') && (type == \"single\" || stream.match('\"\"'))) {\n          end = true;\n          break;\n        }\n\n        if (!escaped && stream.match('``')) {\n          stringTokenizer = tokenCeylonString(type);\n          end = true;\n          break;\n        }\n\n        next = stream.next();\n        escaped = type == \"single\" && !escaped && next == \"\\\\\";\n      }\n\n      if (end) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  def(\"text/x-ceylon\", {\n    name: \"clike\",\n    keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" + \" exists extends finally for function given if import in interface is let module new\" + \" nonempty object of out outer package return satisfies super switch then this throw\" + \" try value void while\"),\n    types: function types(word) {\n      // In Ceylon all identifiers that start with an uppercase are types\n      var first = word.charAt(0);\n      return first === first.toUpperCase() && first !== first.toLowerCase();\n    },\n    blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n    defKeywords: words(\"class dynamic function interface module object package value\"),\n    builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" + \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n    isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n    isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n    numberStart: /[\\d#$]/,\n    number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n    multiLineStrings: true,\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null larger smaller equal empty finished\"),\n    indentSwitch: false,\n    styleDefs: false,\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function _(stream, state) {\n        state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n        return state.tokenize(stream, state);\n      },\n      '`': function _(stream, state) {\n        if (!stringTokenizer || !stream.match('`')) return false;\n        state.tokenize = stringTokenizer;\n        stringTokenizer = null;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      token: function token(_stream, state, style) {\n        if ((style == \"variable\" || style == \"type\") && state.prevToken == \".\") {\n          return \"variable-2\";\n        }\n      }\n    },\n    modeProps: {\n      fold: [\"brace\", \"import\"],\n      closeBrackets: {\n        triples: '\"'\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/clike/clike.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/dart/dart.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/dart/dart.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../clike/clike */ \"./resources/assets/vendor/libs/codemirror/mode/clike/clike.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../clike/clike */ \"./resources/assets/vendor/libs/codemirror/mode/clike/clike.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var keywords = (\"this super static final const abstract class extends external factory \" + \"implements mixin get native set typedef with enum throw rethrow \" + \"assert break case continue default in return new deferred async await covariant \" + \"try catch finally do else for if switch while import library export \" + \"part of show hide is as extension on yield late required\").split(\" \");\n  var blockKeywords = \"try catch finally do else for if switch while\".split(\" \");\n  var atoms = \"true false null\".split(\" \");\n  var builtins = \"void bool num int double dynamic var String Null Never\".split(\" \");\n\n  function set(words) {\n    var obj = {};\n\n    for (var i = 0; i < words.length; ++i) {\n      obj[words[i]] = true;\n    }\n\n    return obj;\n  }\n\n  function pushInterpolationStack(state) {\n    (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n  }\n\n  function popInterpolationStack(state) {\n    return (state.interpolationStack || (state.interpolationStack = [])).pop();\n  }\n\n  function sizeInterpolationStack(state) {\n    return state.interpolationStack ? state.interpolationStack.length : 0;\n  }\n\n  CodeMirror.defineMIME(\"application/dart\", {\n    name: \"clike\",\n    keywords: set(keywords),\n    blockKeywords: set(blockKeywords),\n    builtin: set(builtins),\n    atoms: set(atoms),\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_\\.]/);\n        return \"meta\";\n      },\n      // custom string handling to deal with triple-quoted strings and string interpolation\n      \"'\": function _(stream, state) {\n        return tokenString(\"'\", stream, state, false);\n      },\n      \"\\\"\": function _(stream, state) {\n        return tokenString(\"\\\"\", stream, state, false);\n      },\n      \"r\": function r(stream, state) {\n        var peek = stream.peek();\n\n        if (peek == \"'\" || peek == \"\\\"\") {\n          return tokenString(stream.next(), stream, state, true);\n        }\n\n        return false;\n      },\n      \"}\": function _(_stream, state) {\n        // \"}\" is end of interpolation, if interpolation stack is non-empty\n        if (sizeInterpolationStack(state) > 0) {\n          state.tokenize = popInterpolationStack(state);\n          return null;\n        }\n\n        return false;\n      },\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state);\n      },\n      token: function token(stream, _, style) {\n        if (style == \"variable\") {\n          // Assume uppercase symbols are classes using variable-2\n          var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$', 'g');\n\n          if (isUpper.test(stream.current())) {\n            return 'variable-2';\n          }\n        }\n      }\n    }\n  });\n\n  function tokenString(quote, stream, state, raw) {\n    var tripleQuoted = false;\n\n    if (stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;else return \"string\"; //empty string\n    }\n\n    function tokenStringHelper(stream, state) {\n      var escaped = false;\n\n      while (!stream.eol()) {\n        if (!raw && !escaped && stream.peek() == \"$\") {\n          pushInterpolationStack(state);\n          state.tokenize = tokenInterpolation;\n          return \"string\";\n        }\n\n        var next = stream.next();\n\n        if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n          state.tokenize = null;\n          break;\n        }\n\n        escaped = !raw && !escaped && next == \"\\\\\";\n      }\n\n      return \"string\";\n    }\n\n    state.tokenize = tokenStringHelper;\n    return tokenStringHelper(stream, state);\n  }\n\n  function tokenInterpolation(stream, state) {\n    stream.eat(\"$\");\n\n    if (stream.eat(\"{\")) {\n      // let clike handle the content of ${...},\n      // we take over again when \"}\" appears (see hooks).\n      state.tokenize = null;\n    } else {\n      state.tokenize = tokenInterpolationIdentifier;\n    }\n\n    return null;\n  }\n\n  function tokenInterpolationIdentifier(stream, state) {\n    stream.eatWhile(/[\\w_]/);\n    state.tokenize = popInterpolationStack(state);\n    return \"variable\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null;\n            break;\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      return \"comment\";\n    };\n  }\n\n  CodeMirror.registerHelper(\"hintWords\", \"application/dart\", keywords.concat(atoms).concat(builtins)); // This is needed to make loading through meta.js work.\n\n  CodeMirror.defineMode(\"dart\", function (conf) {\n    return CodeMirror.getMode(conf, \"application/dart\");\n  }, \"clike\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/dart/dart.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/dart/dart.js");
/******/ 	
/******/ })()
;