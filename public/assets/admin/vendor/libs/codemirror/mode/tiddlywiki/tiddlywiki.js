/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/tiddlywiki/tiddlywiki.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/tiddlywiki/tiddlywiki.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/***\n    |''Name''|tiddlywiki.js|\n    |''Description''|Enables TiddlyWikiy syntax highlighting using CodeMirror|\n    |''Author''|PMario|\n    |''Version''|0.1.7|\n    |''Status''|''stable''|\n    |''Source''|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|\n    |''Documentation''|https://codemirror.tiddlyspace.com/|\n    |''License''|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|\n    |''CoreVersion''|2.5.0|\n    |''Requires''|codemirror.js|\n    |''Keywords''|syntax highlighting color code mirror codemirror|\n    ! Info\n    CoreVersion parameter is needed for TiddlyWiki only!\n***/\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tiddlywiki\", function () {\n    // Tokenizer\n    var textwords = {};\n    var keywords = {\n      \"allTags\": true,\n      \"closeAll\": true,\n      \"list\": true,\n      \"newJournal\": true,\n      \"newTiddler\": true,\n      \"permaview\": true,\n      \"saveChanges\": true,\n      \"search\": true,\n      \"slider\": true,\n      \"tabs\": true,\n      \"tag\": true,\n      \"tagging\": true,\n      \"tags\": true,\n      \"tiddler\": true,\n      \"timeline\": true,\n      \"today\": true,\n      \"version\": true,\n      \"option\": true,\n      \"with\": true,\n      \"filter\": true\n    };\n    var isSpaceName = /[\\w_\\-]/i,\n        reHR = /^\\-\\-\\-\\-+$/,\n        // <hr>\n    reWikiCommentStart = /^\\/\\*\\*\\*$/,\n        // /***\n    reWikiCommentStop = /^\\*\\*\\*\\/$/,\n        // ***/\n    reBlockQuote = /^<<<$/,\n        reJsCodeStart = /^\\/\\/\\{\\{\\{$/,\n        // //{{{ js block start\n    reJsCodeStop = /^\\/\\/\\}\\}\\}$/,\n        // //}}} js stop\n    reXmlCodeStart = /^<!--\\{\\{\\{-->$/,\n        // xml block start\n    reXmlCodeStop = /^<!--\\}\\}\\}-->$/,\n        // xml stop\n    reCodeBlockStart = /^\\{\\{\\{$/,\n        // {{{ TW text div block start\n    reCodeBlockStop = /^\\}\\}\\}$/,\n        // }}} TW text stop\n    reUntilCodeStop = /.*?\\}\\}\\}/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol(),\n          ch = stream.peek();\n      state.block = false; // indicates the start of a code block.\n      // check start of  blocks\n\n      if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n        if (stream.match(reCodeBlockStart)) {\n          state.block = true;\n          return chain(stream, state, twTokenCode);\n        }\n\n        if (stream.match(reBlockQuote)) return 'quote';\n        if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop)) return 'comment';\n        if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop)) return 'comment';\n        if (stream.match(reHR)) return 'hr';\n      }\n\n      stream.next();\n\n      if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n        if (ch == \"!\") {\n          // tw header\n          stream.skipToEnd();\n          return \"header\";\n        }\n\n        if (ch == \"*\") {\n          // tw list\n          stream.eatWhile('*');\n          return \"comment\";\n        }\n\n        if (ch == \"#\") {\n          // tw numbered list\n          stream.eatWhile('#');\n          return \"comment\";\n        }\n\n        if (ch == \";\") {\n          // definition list, term\n          stream.eatWhile(';');\n          return \"comment\";\n        }\n\n        if (ch == \":\") {\n          // definition list, description\n          stream.eatWhile(':');\n          return \"comment\";\n        }\n\n        if (ch == \">\") {\n          // single line quote\n          stream.eatWhile(\">\");\n          return \"quote\";\n        }\n\n        if (ch == '|') return 'header';\n      }\n\n      if (ch == '{' && stream.match('{{')) return chain(stream, state, twTokenCode); // rudimentary html:// file:// link matching. TW knows much more ...\n\n      if (/[hf]/i.test(ch) && /[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) return \"link\"; // just a little string indicator, don't want to have the whole string covered\n\n      if (ch == '\"') return 'string';\n      if (ch == '~') // _no_ CamelCase indicator should be bold\n        return 'brace';\n      if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n        return 'brace';\n\n      if (ch == \"@\") {\n        // check for space link. TODO fix @@...@@ highlighting\n        stream.eatWhile(isSpaceName);\n        return \"link\";\n      }\n\n      if (/\\d/.test(ch)) {\n        // numbers\n        stream.eatWhile(/\\d/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        // tw invisible comment\n        if (stream.eat(\"%\")) {\n          return chain(stream, state, twTokenComment);\n        } else if (stream.eat(\"/\")) {\n          //\n          return chain(stream, state, twTokenEm);\n        }\n      }\n\n      if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n        return chain(stream, state, twTokenUnderline); // strikethrough and mdash handling\n\n      if (ch == \"-\" && stream.eat(\"-\")) {\n        // if strikethrough looks ugly, change CSS.\n        if (stream.peek() != ' ') return chain(stream, state, twTokenStrike); // mdash\n\n        if (stream.peek() == ' ') return 'brace';\n      }\n\n      if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n        return chain(stream, state, twTokenStrong);\n      if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n        return chain(stream, state, twTokenMacro); // core macro handling\n\n      stream.eatWhile(/[\\w\\$_]/);\n      return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n    } // tw invisible comment\n\n\n    function twTokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"%\";\n      }\n\n      return \"comment\";\n    } // tw strong / bold\n\n\n    function twTokenStrong(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"'\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"'\";\n      }\n\n      return \"strong\";\n    } // tw code\n\n\n    function twTokenCode(stream, state) {\n      var sb = state.block;\n\n      if (sb && stream.current()) {\n        return \"comment\";\n      }\n\n      if (!sb && stream.match(reUntilCodeStop)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n\n      if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n        state.tokenize = tokenBase;\n        return \"comment\";\n      }\n\n      stream.next();\n      return \"comment\";\n    } // tw em / italic\n\n\n    function twTokenEm(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"/\";\n      }\n\n      return \"em\";\n    } // tw underlined text\n\n\n    function twTokenUnderline(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"_\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"_\";\n      }\n\n      return \"underlined\";\n    } // tw strike through text looks ugly\n    // change CSS if needed\n\n\n    function twTokenStrike(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"-\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"-\";\n      }\n\n      return \"strikethrough\";\n    } // macro\n\n\n    function twTokenMacro(stream, state) {\n      if (stream.current() == '<<') {\n        return 'macro';\n      }\n\n      var ch = stream.next();\n\n      if (!ch) {\n        state.tokenize = tokenBase;\n        return null;\n      }\n\n      if (ch == \">\") {\n        if (stream.peek() == '>') {\n          stream.next();\n          state.tokenize = tokenBase;\n          return \"macro\";\n        }\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tiddlywiki\", \"tiddlywiki\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/tiddlywiki/tiddlywiki.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/tiddlywiki/tiddlywiki.js");
/******/ 	
/******/ })()
;