/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/mirc/mirc.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/mirc/mirc.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n//mIRC mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMIME(\"text/mirc\", \"mirc\");\n  CodeMirror.defineMode(\"mirc\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var specials = parseWords(\"$! $$ $& $? $+ $abook $abs $active $activecid \" + \"$activewid $address $addtok $agent $agentname $agentstat $agentver \" + \"$alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime \" + \"$asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind \" + \"$binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes \" + \"$chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color \" + \"$com $comcall $comchan $comerr $compact $compress $comval $cos $count \" + \"$cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight \" + \"$dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress \" + \"$deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll \" + \"$dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error \" + \"$eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir \" + \"$finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve \" + \"$fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt \" + \"$group $halted $hash $height $hfind $hget $highlight $hnick $hotline \" + \"$hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil \" + \"$inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect \" + \"$insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile \" + \"$isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive \" + \"$lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock \" + \"$lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer \" + \"$maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext \" + \"$menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode \" + \"$modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile \" + \"$nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly \" + \"$opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree \" + \"$pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo \" + \"$readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex \" + \"$reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline \" + \"$sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin \" + \"$site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname \" + \"$sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped \" + \"$syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp \" + \"$timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel \" + \"$ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver \" + \"$version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor\");\n    var keywords = parseWords(\"abook ajinvite alias aline ame amsg anick aop auser autojoin avoice \" + \"away background ban bcopy beep bread break breplace bset btrunc bunset bwrite \" + \"channel clear clearall cline clipboard close cnick color comclose comopen \" + \"comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver \" + \"debug dec describe dialog did didtok disable disconnect dlevel dline dll \" + \"dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace \" + \"drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable \" + \"events exit fclose filter findtext finger firewall flash flist flood flush \" + \"flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove \" + \"gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd \" + \"halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear \" + \"ialmark identd if ignore iline inc invite iuser join kick linesep links list \" + \"load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice \" + \"notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice \" + \"qme qmsg query queryn quit raw reload remini remote remove rename renwin \" + \"reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini \" + \"say scid scon server set showmirc signam sline sockaccept sockclose socklist \" + \"socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite \" + \"sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize \" + \"toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho \" + \"var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum \" + \"isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower \" + \"isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs \" + \"elseif else goto menu nicklist status title icon size option text edit \" + \"button check radio box scroll list combo link tab item\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n\n      if (/[\\[\\]{}\\(\\),\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") state.inParams = false;\n        return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"\\\\\") {\n        stream.eat(\"\\\\\");\n        stream.eat(/./);\n        return \"number\";\n      } else if (ch == \"/\" && stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      } else if (ch == \";\" && stream.match(/ *\\( *\\(/)) {\n        return chain(stream, state, tokenUnparsed);\n      } else if (ch == \";\" && !state.inParams) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.eat(/\"/);\n        return \"keyword\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.:]/);\n\n        if (specials && specials.propertyIsEnumerable(stream.current().toLowerCase())) {\n          return \"keyword\";\n        } else {\n          state.beforeParams = true;\n          return \"builtin\";\n        }\n      } else if (ch == \"%\") {\n        stream.eatWhile(/[^,\\s()]/);\n        state.beforeParams = true;\n        return \"string\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n\n        return null;\n      }\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \";\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \")\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/mirc/mirc.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/mirc/mirc.js");
/******/ 	
/******/ })()
;