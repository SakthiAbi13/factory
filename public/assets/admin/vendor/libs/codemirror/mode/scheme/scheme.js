/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/scheme/scheme.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/scheme/scheme.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Author: Koh Zi Han, based on implementation by Koh Zi Chun\n * Improved by: Jakub T. Jankiewicz\n */\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"scheme\", function () {\n    var BUILTIN = \"builtin\",\n        COMMENT = \"comment\",\n        STRING = \"string\",\n        SYMBOL = \"symbol\",\n        ATOM = \"atom\",\n        NUMBER = \"number\",\n        BRACKET = \"bracket\";\n    var INDENT_WORD_SKIP = 2;\n\n    function makeKeywords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = makeKeywords(\"Î» case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\n    var indentKeys = makeKeywords(\"define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless\");\n\n    function stateStack(indent, type, prev) {\n      // represents a state stack object\n      this.indent = indent;\n      this.type = type;\n      this.prev = prev;\n    }\n\n    function pushStack(state, indent, type) {\n      state.indentStack = new stateStack(indent, type, state.indentStack);\n    }\n\n    function popStack(state) {\n      state.indentStack = state.indentStack.prev;\n    }\n\n    var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\n    var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\n    var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\n    var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\n    function isBinaryNumber(stream) {\n      return stream.match(binaryMatcher);\n    }\n\n    function isOctalNumber(stream) {\n      return stream.match(octalMatcher);\n    }\n\n    function isDecimalNumber(stream, backup) {\n      if (backup === true) {\n        stream.backUp(1);\n      }\n\n      return stream.match(decimalMatcher);\n    }\n\n    function isHexNumber(stream) {\n      return stream.match(hexMatcher);\n    }\n\n    function processEscapedSequence(stream, options) {\n      var next,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (next == options.token && !escaped) {\n          options.state.mode = false;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          indentStack: null,\n          indentation: 0,\n          mode: false,\n          sExprComment: false,\n          sExprQuote: false\n        };\n      },\n      token: function token(stream, state) {\n        if (state.indentStack == null && stream.sol()) {\n          // update indentation, but only if indentStack is empty\n          state.indentation = stream.indentation();\n        } // skip spaces\n\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var returnType = null;\n\n        switch (state.mode) {\n          case \"string\":\n            // multi-line string parsing mode\n            processEscapedSequence(stream, {\n              token: \"\\\"\",\n              state: state\n            });\n            returnType = STRING; // continue on in scheme-string mode\n\n            break;\n\n          case \"symbol\":\n            // escape symbol\n            processEscapedSequence(stream, {\n              token: \"|\",\n              state: state\n            });\n            returnType = SYMBOL; // continue on in scheme-symbol mode\n\n            break;\n\n          case \"comment\":\n            // comment parsing mode\n            var next,\n                maybeEnd = false;\n\n            while ((next = stream.next()) != null) {\n              if (next == \"#\" && maybeEnd) {\n                state.mode = false;\n                break;\n              }\n\n              maybeEnd = next == \"|\";\n            }\n\n            returnType = COMMENT;\n            break;\n\n          case \"s-expr-comment\":\n            // s-expr commenting mode\n            state.mode = false;\n\n            if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n              // actually start scheme s-expr commenting mode\n              state.sExprComment = 0;\n            } else {\n              // if not we just comment the entire of the next token\n              stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n\n              returnType = COMMENT;\n              break;\n            }\n\n          default:\n            // default parsing mode\n            var ch = stream.next();\n\n            if (ch == \"\\\"\") {\n              state.mode = \"string\";\n              returnType = STRING;\n            } else if (ch == \"'\") {\n              if (stream.peek() == \"(\" || stream.peek() == \"[\") {\n                if (typeof state.sExprQuote != \"number\") {\n                  state.sExprQuote = 0;\n                } // else already in a quoted expression\n\n\n                returnType = ATOM;\n              } else {\n                stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n                returnType = ATOM;\n              }\n            } else if (ch == '|') {\n              state.mode = \"symbol\";\n              returnType = SYMBOL;\n            } else if (ch == '#') {\n              if (stream.eat(\"|\")) {\n                // Multi-line comment\n                state.mode = \"comment\"; // toggle to comment mode\n\n                returnType = COMMENT;\n              } else if (stream.eat(/[tf]/i)) {\n                // #t/#f (atom)\n                returnType = ATOM;\n              } else if (stream.eat(';')) {\n                // S-Expr comment\n                state.mode = \"s-expr-comment\";\n                returnType = COMMENT;\n              } else {\n                var numTest = null,\n                    hasExactness = false,\n                    hasRadix = true;\n\n                if (stream.eat(/[ei]/i)) {\n                  hasExactness = true;\n                } else {\n                  stream.backUp(1); // must be radix specifier\n                }\n\n                if (stream.match(/^#b/i)) {\n                  numTest = isBinaryNumber;\n                } else if (stream.match(/^#o/i)) {\n                  numTest = isOctalNumber;\n                } else if (stream.match(/^#x/i)) {\n                  numTest = isHexNumber;\n                } else if (stream.match(/^#d/i)) {\n                  numTest = isDecimalNumber;\n                } else if (stream.match(/^[-+0-9.]/, false)) {\n                  hasRadix = false;\n                  numTest = isDecimalNumber; // re-consume the initial # if all matches failed\n                } else if (!hasExactness) {\n                  stream.eat('#');\n                }\n\n                if (numTest != null) {\n                  if (hasRadix && !hasExactness) {\n                    // consume optional exactness after radix\n                    stream.match(/^#[ei]/i);\n                  }\n\n                  if (numTest(stream)) returnType = NUMBER;\n                }\n              }\n            } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) {\n              // match non-prefixed number, must be decimal\n              returnType = NUMBER;\n            } else if (ch == \";\") {\n              // comment\n              stream.skipToEnd(); // rest of the line is a comment\n\n              returnType = COMMENT;\n            } else if (ch == \"(\" || ch == \"[\") {\n              var keyWord = '';\n              var indentTemp = stream.column(),\n                  letter;\n              /**\n              Either\n              (indent-word ..\n              (non-indent-word ..\n              (;something else, bracket, etc.\n              */\n\n              while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n                keyWord += letter;\n              }\n\n              if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) {\n                // indent-word\n                pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n              } else {\n                // non-indent word\n                // we continue eating the spaces\n                stream.eatSpace();\n\n                if (stream.eol() || stream.peek() == \";\") {\n                  // nothing significant after\n                  // we restart indentation 1 space after\n                  pushStack(state, indentTemp + 1, ch);\n                } else {\n                  pushStack(state, indentTemp + stream.current().length, ch); // else we match\n                }\n              }\n\n              stream.backUp(stream.current().length - 1); // undo all the eating\n\n              if (typeof state.sExprComment == \"number\") state.sExprComment++;\n              if (typeof state.sExprQuote == \"number\") state.sExprQuote++;\n              returnType = BRACKET;\n            } else if (ch == \")\" || ch == \"]\") {\n              returnType = BRACKET;\n\n              if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n                popStack(state);\n\n                if (typeof state.sExprComment == \"number\") {\n                  if (--state.sExprComment == 0) {\n                    returnType = COMMENT; // final closing bracket\n\n                    state.sExprComment = false; // turn off s-expr commenting mode\n                  }\n                }\n\n                if (typeof state.sExprQuote == \"number\") {\n                  if (--state.sExprQuote == 0) {\n                    returnType = ATOM; // final closing bracket\n\n                    state.sExprQuote = false; // turn off s-expr quote mode\n                  }\n                }\n              }\n            } else {\n              stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n              if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n                returnType = BUILTIN;\n              } else returnType = \"variable\";\n            }\n\n        }\n\n        return typeof state.sExprComment == \"number\" ? COMMENT : typeof state.sExprQuote == \"number\" ? ATOM : returnType;\n      },\n      indent: function indent(state) {\n        if (state.indentStack == null) return state.indentation;\n        return state.indentStack.indent;\n      },\n      fold: \"brace-paren\",\n      closeBrackets: {\n        pairs: \"()[]{}\\\"\\\"\"\n      },\n      lineComment: \";;\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-scheme\", \"scheme\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/scheme/scheme.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/scheme/scheme.js");
/******/ 	
/******/ })()
;