/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var trackScope = parserConfig.trackScope !== false;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\" && stream.peek() == \"!\") {\n        stream.skipToEnd();\n        return ret(\"meta\", \"meta\");\n      } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n        return ret(\"variable\", \"property\");\n      } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-|&?]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/`]/.test(ch)) {\n          for (;; --pos) {\n            if (pos == 0) return;\n            var next = stream.string.charAt(pos - 1);\n\n            if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n              pos--;\n              break;\n            }\n          }\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"import\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      if (!trackScope) return false;\n\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) {\n          if (v.name == varname) return true;\n        }\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n      if (!trackScope) return;\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    pushcontext.lex = pushblockcontext.lex = true;\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n          indent = outer.indented;\n        }\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, statement, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(maybeexpression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(maybeexpression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        if (sep && sep.indexOf(\";\") > -1) return pass(what);\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) {\n        cx.cc.push(arguments[i]);\n      }\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function maybetypeOrIn(type, value) {\n      if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (value == \"|\" || value == \"&\") return cont(typeexpr);\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n\n      if (type == \"quasi\") {\n        return pass(quasiType, afterType);\n      }\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprops(type) {\n      if (type.match(/[\\}\\)\\]]/)) return cont();\n      if (type == \",\" || type == \";\") return cont(typeprops);\n      return pass(typeprop, typeprops);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n      } else if (type == \"(\") {\n        return pass(functiondecl, typeprop);\n      } else if (!type.match(/[;\\}\\)\\],]/)) {\n        return cont();\n      }\n    }\n\n    function quasiType(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n      return cont(typeexpr, continueQuasiType);\n    }\n\n    function continueQuasiType(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasiType);\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      if (type == \"spread\") return cont(typearg);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n\n      if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, forspec2);\n      if (type == \"variable\") return cont(forspec2);\n      return pass(forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \")\") return cont();\n      if (type == \";\") return cont(forspec2);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression, forspec2);\n      }\n\n      return pass(expression, forspec2);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function functiondecl(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondecl);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondecl);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n\n    function typename(type, value) {\n      if (type == \"keyword\" || type == \"variable\") {\n        cx.marked = \"type\";\n        return cont(typename);\n      } else if (value == \"<\") {\n        return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n      }\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(classfield, classBody);\n      }\n\n      if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (isTS && type == \"(\") return pass(functiondecl, classBody);\n      if (type == \";\" || type == \",\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"!\") return cont(classfield);\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      var context = cx.state.lexical.prev,\n          isInterface = context && context.info == \"interface\";\n      return pass(isInterface ? functiondecl : functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      if (type == \".\") return pass(maybeoperatorComma);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && _typeof(parserConfig.globalVars) == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n          lexical = lexical.prev;\n        }\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function skipExpression(state) {\n        parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null));\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/manifest+json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/jsx/jsx.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/jsx/jsx.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\"; // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n\n  function Context(state, mode, depth, prev) {\n    this.state = state;\n    this.mode = mode;\n    this.depth = depth;\n    this.prev = prev;\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state), context.mode, context.depth, context.prev && copyContext(context.prev));\n  }\n\n  CodeMirror.defineMode(\"jsx\", function (config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      allowMissing: true,\n      multilineTagIndentPastTag: false,\n      allowMissingTagName: true\n    });\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\");\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName;\n      state.tagName = null;\n      var result = xmlMode.indent(state, \"\", \"\");\n      state.tagName = tagName;\n      return result;\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode) return xmlToken(stream, state, state.context);else return jsToken(stream, state, state.context);\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) {\n        // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1;else stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state);\n        var indent = flatXMLIndent(cx.state),\n            xmlContext = cx.state.context; // If JS starts on same line as tag\n\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine) {\n            xmlContext = xmlContext.prev;\n          } // If tag starts the line, use XML indentation level\n\n\n          if (xmlContext.startOfLine) indent -= config.indentUnit; // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented; // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit;\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent), jsMode, 0, state.context);\n        return null;\n      }\n\n      if (cx.depth == 1) {\n        // Inside of tag\n        if (stream.peek() == \"<\") {\n          // Tag inside of tag\n          xmlMode.skipAttribute(cx.state);\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)), xmlMode, 0, state.context);\n          return null;\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2;\n          return token(stream, state);\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state),\n          cur = stream.current(),\n          stop;\n\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0;else state.context = state.context.prev;\n        } else if (/^</.test(cur)) {\n          cx.depth = 1;\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop);\n      }\n\n      return style;\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")), xmlMode, 0, state.context);\n        jsMode.skipExpression(cx.state);\n        return null;\n      }\n\n      var style = jsMode.token(stream, cx.state);\n\n      if (!style && cx.depth != null) {\n        var cur = stream.current();\n\n        if (cur == \"{\") {\n          cx.depth++;\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev;\n        }\n      }\n\n      return style;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          context: new Context(CodeMirror.startState(jsMode), jsMode)\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          context: copyContext(state.context)\n        };\n      },\n      token: token,\n      indent: function indent(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine);\n      },\n      innerMode: function innerMode(state) {\n        return state.context;\n      }\n    };\n  }, \"xml\", \"javascript\");\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\");\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {\n    name: \"jsx\",\n    base: {\n      name: \"javascript\",\n      typescript: true\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/jsx/jsx.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/xml/xml.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/xml/xml.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function lower(tagName) {\n      return tagName && tagName.toLowerCase();\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName || \"\";\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(lower(parentTagName)) || !config.contextGrabbers[lower(parentTagName)].hasOwnProperty(lower(nextTagName))) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(lower(state.context.tagName))) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(lower(tagName))) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(lower(context.tagName))) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[lower(context.tagName)];\n            if (grabbers && grabbers.hasOwnProperty(lower(tagAfter[2]))) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/jsx/jsx.js");
/******/ 	
/******/ })()
;