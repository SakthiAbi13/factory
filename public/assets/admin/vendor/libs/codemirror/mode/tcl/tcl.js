/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/tcl/tcl.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/tcl/tcl.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tcl\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" + \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" + \"binary break catch cd close concat continue dde eof encoding error \" + \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" + \"filename flush for foreach format gets glob global history http if \" + \"incr info interp join lappend lindex linsert list llength load lrange \" + \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" + \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" + \"registry regsub rename resource return scan seek set socket source split \" + \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" + \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" + \"tclvars tell time trace unknown unset update uplevel upvar variable \" + \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") state.inParams = false;\n        return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\")) return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n\n        return null;\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS90Y2wvdGNsLmpzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFFQTtBQUVBLENBQUMsVUFBU0EsR0FBVCxFQUFjO0VBQ2IsSUFBSSxzQkFBT0MsT0FBUCxNQUFrQixRQUFsQixJQUE4QixzQkFBT0MsTUFBUCxNQUFpQixRQUFuRCxFQUE2RDtJQUMzREYsR0FBRyxDQUFDRyxtQkFBTyxDQUFDLG1KQUFELENBQVIsQ0FBSCxDQURGLEtBRUssSUFBSSxJQUFKLEVBQStDO0lBQ2xEQyxpQ0FBTyxDQUFDLG1KQUFELENBQUQsb0NBQTJCSixHQUEzQjtBQUFBO0FBQUE7QUFBQSxrR0FBTixDQURHLEtBRUE7SUFDSEEsRUFBQTtBQUNILENBUEQsRUFPRyxVQUFTTSxVQUFULEVBQXFCO0VBQ3hCOztFQUVBQSxVQUFVLENBQUNDLFVBQVgsQ0FBc0IsS0FBdEIsRUFBNkIsWUFBVztJQUN0QyxTQUFTQyxVQUFULENBQW9CQyxHQUFwQixFQUF5QjtNQUN2QixJQUFJQyxHQUFHLEdBQUcsRUFBVjtNQUFBLElBQWNDLEtBQUssR0FBR0YsR0FBRyxDQUFDRyxLQUFKLENBQVUsR0FBVixDQUF0Qjs7TUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLEtBQUssQ0FBQ0csTUFBMUIsRUFBa0MsRUFBRUQsQ0FBcEM7UUFBdUNILEdBQUcsQ0FBQ0MsS0FBSyxDQUFDRSxDQUFELENBQU4sQ0FBSCxHQUFnQixJQUFoQjtNQUF2Qzs7TUFDQSxPQUFPSCxHQUFQO0lBQ0Q7O0lBQ0QsSUFBSUssUUFBUSxHQUFHUCxVQUFVLENBQUMsbUVBQ3BCLGdFQURvQixHQUVwQixxRUFGb0IsR0FHcEIsd0VBSG9CLEdBSXBCLHFFQUpvQixHQUtwQix3RUFMb0IsR0FNcEIsMEVBTm9CLEdBT3BCLHdFQVBvQixHQVFwQiwyRUFSb0IsR0FTcEIsd0VBVG9CLEdBVXBCLHlFQVZvQixHQVdwQixzRUFYb0IsR0FZeEIsT0FadUIsQ0FBekI7SUFhRSxJQUFJUSxTQUFTLEdBQUdSLFVBQVUsQ0FBQyxnRUFBRCxDQUExQjtJQUNBLElBQUlTLGNBQWMsR0FBRyxvQkFBckI7O0lBQ0EsU0FBU0MsS0FBVCxDQUFlQyxNQUFmLEVBQXVCQyxLQUF2QixFQUE4QkMsQ0FBOUIsRUFBaUM7TUFDL0JELEtBQUssQ0FBQ0UsUUFBTixHQUFpQkQsQ0FBakI7TUFDQSxPQUFPQSxDQUFDLENBQUNGLE1BQUQsRUFBU0MsS0FBVCxDQUFSO0lBQ0Q7O0lBQ0QsU0FBU0csU0FBVCxDQUFtQkosTUFBbkIsRUFBMkJDLEtBQTNCLEVBQWtDO01BQ2hDLElBQUlJLFlBQVksR0FBR0osS0FBSyxDQUFDSSxZQUF6QjtNQUNBSixLQUFLLENBQUNJLFlBQU4sR0FBcUIsS0FBckI7TUFDQSxJQUFJQyxFQUFFLEdBQUdOLE1BQU0sQ0FBQ08sSUFBUCxFQUFUOztNQUNBLElBQUksQ0FBQ0QsRUFBRSxJQUFJLEdBQU4sSUFBYUEsRUFBRSxJQUFJLEdBQXBCLEtBQTRCTCxLQUFLLENBQUNPLFFBQXRDLEVBQWdEO1FBQzlDLE9BQU9ULEtBQUssQ0FBQ0MsTUFBRCxFQUFTQyxLQUFULEVBQWdCUSxXQUFXLENBQUNILEVBQUQsQ0FBM0IsQ0FBWjtNQUNELENBRkQsTUFFTyxJQUFJLG1CQUFtQkksSUFBbkIsQ0FBd0JKLEVBQXhCLENBQUosRUFBaUM7UUFDdEMsSUFBSUEsRUFBRSxJQUFJLEdBQU4sSUFBYUQsWUFBakIsRUFBK0JKLEtBQUssQ0FBQ08sUUFBTixHQUFpQixJQUFqQixDQUEvQixLQUNLLElBQUlGLEVBQUUsSUFBSSxHQUFWLEVBQWVMLEtBQUssQ0FBQ08sUUFBTixHQUFpQixLQUFqQjtRQUNsQixPQUFPLElBQVA7TUFDSCxDQUpNLE1BSUEsSUFBSSxLQUFLRSxJQUFMLENBQVVKLEVBQVYsQ0FBSixFQUFtQjtRQUN4Qk4sTUFBTSxDQUFDVyxRQUFQLENBQWdCLFFBQWhCO1FBQ0EsT0FBTyxRQUFQO01BQ0QsQ0FITSxNQUdBLElBQUlMLEVBQUUsSUFBSSxHQUFWLEVBQWU7UUFDcEIsSUFBSU4sTUFBTSxDQUFDWSxHQUFQLENBQVcsR0FBWCxDQUFKLEVBQ0UsT0FBT2IsS0FBSyxDQUFDQyxNQUFELEVBQVNDLEtBQVQsRUFBZ0JZLFlBQWhCLENBQVo7UUFDRixJQUFJUCxFQUFFLElBQUksR0FBTixJQUFhTixNQUFNLENBQUNjLEtBQVAsQ0FBYSxVQUFiLENBQWpCLEVBQ0UsT0FBT2YsS0FBSyxDQUFDQyxNQUFELEVBQVNDLEtBQVQsRUFBZ0JjLGFBQWhCLENBQVo7UUFDRmYsTUFBTSxDQUFDZ0IsU0FBUDtRQUNBLE9BQU8sU0FBUDtNQUNELENBUE0sTUFPQSxJQUFJVixFQUFFLElBQUksR0FBVixFQUFlO1FBQ3BCTixNQUFNLENBQUNpQixNQUFQLENBQWMsR0FBZDtRQUNBLE9BQU8sU0FBUDtNQUNELENBSE0sTUFHQSxJQUFJWCxFQUFFLElBQUksR0FBVixFQUFlO1FBQ3BCTixNQUFNLENBQUNXLFFBQVAsQ0FBZ0IsbUJBQWhCO1FBQ0FYLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQixHQUFoQjtRQUNBVixLQUFLLENBQUNJLFlBQU4sR0FBcUIsSUFBckI7UUFDQSxPQUFPLFNBQVA7TUFDRCxDQUxNLE1BS0EsSUFBSVAsY0FBYyxDQUFDWSxJQUFmLENBQW9CSixFQUFwQixDQUFKLEVBQTZCO1FBQ2xDTixNQUFNLENBQUNXLFFBQVAsQ0FBZ0JiLGNBQWhCO1FBQ0EsT0FBTyxTQUFQO01BQ0QsQ0FITSxNQUdBO1FBQ0xFLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQixzQkFBaEI7UUFDQSxJQUFJTyxJQUFJLEdBQUdsQixNQUFNLENBQUNtQixPQUFQLEdBQWlCQyxXQUFqQixFQUFYO1FBQ0EsSUFBSXhCLFFBQVEsSUFBSUEsUUFBUSxDQUFDeUIsb0JBQVQsQ0FBOEJILElBQTlCLENBQWhCLEVBQ0UsT0FBTyxTQUFQOztRQUNGLElBQUlyQixTQUFTLElBQUlBLFNBQVMsQ0FBQ3dCLG9CQUFWLENBQStCSCxJQUEvQixDQUFqQixFQUF1RDtVQUNyRGpCLEtBQUssQ0FBQ0ksWUFBTixHQUFxQixJQUFyQjtVQUNBLE9BQU8sU0FBUDtRQUNEOztRQUNELE9BQU8sSUFBUDtNQUNEO0lBQ0Y7O0lBQ0QsU0FBU0ksV0FBVCxDQUFxQmEsS0FBckIsRUFBNEI7TUFDMUIsT0FBTyxVQUFTdEIsTUFBVCxFQUFpQkMsS0FBakIsRUFBd0I7UUFDL0IsSUFBSXNCLE9BQU8sR0FBRyxLQUFkO1FBQUEsSUFBcUJoQixJQUFyQjtRQUFBLElBQTJCaUIsR0FBRyxHQUFHLEtBQWpDOztRQUNBLE9BQU8sQ0FBQ2pCLElBQUksR0FBR1AsTUFBTSxDQUFDTyxJQUFQLEVBQVIsS0FBMEIsSUFBakMsRUFBdUM7VUFDckMsSUFBSUEsSUFBSSxJQUFJZSxLQUFSLElBQWlCLENBQUNDLE9BQXRCLEVBQStCO1lBQzdCQyxHQUFHLEdBQUcsSUFBTjtZQUNBO1VBQ0Q7O1VBQ0RELE9BQU8sR0FBRyxDQUFDQSxPQUFELElBQVloQixJQUFJLElBQUksSUFBOUI7UUFDRDs7UUFDRCxJQUFJaUIsR0FBSixFQUFTdkIsS0FBSyxDQUFDRSxRQUFOLEdBQWlCQyxTQUFqQjtRQUNQLE9BQU8sUUFBUDtNQUNELENBWEQ7SUFZRDs7SUFDRCxTQUFTUyxZQUFULENBQXNCYixNQUF0QixFQUE4QkMsS0FBOUIsRUFBcUM7TUFDbkMsSUFBSXdCLFFBQVEsR0FBRyxLQUFmO01BQUEsSUFBc0JuQixFQUF0Qjs7TUFDQSxPQUFPQSxFQUFFLEdBQUdOLE1BQU0sQ0FBQ08sSUFBUCxFQUFaLEVBQTJCO1FBQ3pCLElBQUlELEVBQUUsSUFBSSxHQUFOLElBQWFtQixRQUFqQixFQUEyQjtVQUN6QnhCLEtBQUssQ0FBQ0UsUUFBTixHQUFpQkMsU0FBakI7VUFDQTtRQUNEOztRQUNEcUIsUUFBUSxHQUFJbkIsRUFBRSxJQUFJLEdBQWxCO01BQ0Q7O01BQ0QsT0FBTyxTQUFQO0lBQ0Q7O0lBQ0QsU0FBU1MsYUFBVCxDQUF1QmYsTUFBdkIsRUFBK0JDLEtBQS9CLEVBQXNDO01BQ3BDLElBQUl3QixRQUFRLEdBQUcsQ0FBZjtNQUFBLElBQWtCbkIsRUFBbEI7O01BQ0EsT0FBT0EsRUFBRSxHQUFHTixNQUFNLENBQUNPLElBQVAsRUFBWixFQUEyQjtRQUN6QixJQUFJRCxFQUFFLElBQUksR0FBTixJQUFhbUIsUUFBUSxJQUFJLENBQTdCLEVBQWdDO1VBQzlCeEIsS0FBSyxDQUFDRSxRQUFOLEdBQWlCQyxTQUFqQjtVQUNBO1FBQ0Q7O1FBQ0QsSUFBSUUsRUFBRSxJQUFJLEdBQVYsRUFDRW1CLFFBQVEsR0FEVixLQUVLLElBQUluQixFQUFFLElBQUksR0FBVixFQUNIbUIsUUFBUSxHQUFHLENBQVg7TUFDSDs7TUFDRCxPQUFPLE1BQVA7SUFDRDs7SUFDRCxPQUFPO01BQ0xDLFVBQVUsRUFBRSxzQkFBVztRQUNyQixPQUFPO1VBQ0x2QixRQUFRLEVBQUVDLFNBREw7VUFFTEMsWUFBWSxFQUFFLEtBRlQ7VUFHTEcsUUFBUSxFQUFFO1FBSEwsQ0FBUDtNQUtELENBUEk7TUFRTG1CLEtBQUssRUFBRSxlQUFTM0IsTUFBVCxFQUFpQkMsS0FBakIsRUFBd0I7UUFDN0IsSUFBSUQsTUFBTSxDQUFDNEIsUUFBUCxFQUFKLEVBQXVCLE9BQU8sSUFBUDtRQUN2QixPQUFPM0IsS0FBSyxDQUFDRSxRQUFOLENBQWVILE1BQWYsRUFBdUJDLEtBQXZCLENBQVA7TUFDRCxDQVhJO01BWUw0QixXQUFXLEVBQUU7SUFaUixDQUFQO0VBY0gsQ0F6SEQ7RUEwSEExQyxVQUFVLENBQUMyQyxVQUFYLENBQXNCLFlBQXRCLEVBQW9DLEtBQXBDO0FBRUMsQ0F0SUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS90Y2wvdGNsLmpzPzdjZDgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnNcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuLy90Y2wgbW9kZSBieSBGb3JkX0xhd25tb3dlciA6OiBCYXNlZCBvbiBWZWxvY2l0eSBtb2RlIGJ5IFN0ZXZlIE8nSGFyYVxuXG4oZnVuY3Rpb24obW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgLy8gQ29tbW9uSlNcbiAgICBtb2QocmVxdWlyZShcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIpKTtcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EXG4gICAgZGVmaW5lKFtcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCJdLCBtb2QpO1xuICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbkNvZGVNaXJyb3IuZGVmaW5lTW9kZShcInRjbFwiLCBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gcGFyc2VXb3JkcyhzdHIpIHtcbiAgICB2YXIgb2JqID0ge30sIHdvcmRzID0gc3RyLnNwbGl0KFwiIFwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSBvYmpbd29yZHNbaV1dID0gdHJ1ZTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIHZhciBrZXl3b3JkcyA9IHBhcnNlV29yZHMoXCJUY2wgc2FmZSBhZnRlciBhcHBlbmQgYXJyYXkgYXV0b19leGVjb2sgYXV0b19pbXBvcnQgYXV0b19sb2FkIFwiICtcbiAgICAgICAgXCJhdXRvX21raW5kZXggYXV0b19ta2luZGV4X29sZCBhdXRvX3F1YWxpZnkgYXV0b19yZXNldCBiZ2Vycm9yIFwiICtcbiAgICAgICAgXCJiaW5hcnkgYnJlYWsgY2F0Y2ggY2QgY2xvc2UgY29uY2F0IGNvbnRpbnVlIGRkZSBlb2YgZW5jb2RpbmcgZXJyb3IgXCIgK1xuICAgICAgICBcImV2YWwgZXhlYyBleGl0IGV4cHIgZmJsb2NrZWQgZmNvbmZpZ3VyZSBmY29weSBmaWxlIGZpbGVldmVudCBmaWxlbmFtZSBcIiArXG4gICAgICAgIFwiZmlsZW5hbWUgZmx1c2ggZm9yIGZvcmVhY2ggZm9ybWF0IGdldHMgZ2xvYiBnbG9iYWwgaGlzdG9yeSBodHRwIGlmIFwiICtcbiAgICAgICAgXCJpbmNyIGluZm8gaW50ZXJwIGpvaW4gbGFwcGVuZCBsaW5kZXggbGluc2VydCBsaXN0IGxsZW5ndGggbG9hZCBscmFuZ2UgXCIgK1xuICAgICAgICBcImxyZXBsYWNlIGxzZWFyY2ggbHNldCBsc29ydCBtZW1vcnkgbXNnY2F0IG5hbWVzcGFjZSBvcGVuIHBhY2thZ2UgcGFycmF5IFwiICtcbiAgICAgICAgXCJwaWQgcGtnOjpjcmVhdGUgcGtnX21rSW5kZXggcHJvYyBwdXRzIHB3ZCByZV9zeW50YXggcmVhZCByZWdleCByZWdleHAgXCIgK1xuICAgICAgICBcInJlZ2lzdHJ5IHJlZ3N1YiByZW5hbWUgcmVzb3VyY2UgcmV0dXJuIHNjYW4gc2VlayBzZXQgc29ja2V0IHNvdXJjZSBzcGxpdCBcIiArXG4gICAgICAgIFwic3RyaW5nIHN1YnN0IHN3aXRjaCB0Y2xfZW5kT2ZXb3JkIHRjbF9maW5kTGlicmFyeSB0Y2xfc3RhcnRPZk5leHRXb3JkIFwiICtcbiAgICAgICAgXCJ0Y2xfd29yZEJyZWFrQWZ0ZXIgdGNsX3N0YXJ0T2ZQcmV2aW91c1dvcmQgdGNsX3dvcmRCcmVha0JlZm9yZSB0Y2x0ZXN0IFwiICtcbiAgICAgICAgXCJ0Y2x2YXJzIHRlbGwgdGltZSB0cmFjZSB1bmtub3duIHVuc2V0IHVwZGF0ZSB1cGxldmVsIHVwdmFyIHZhcmlhYmxlIFwiICtcbiAgICBcInZ3YWl0XCIpO1xuICAgIHZhciBmdW5jdGlvbnMgPSBwYXJzZVdvcmRzKFwiaWYgZWxzZWlmIGVsc2UgYW5kIG5vdCBvciBlcSBuZSBpbiBuaSBmb3IgZm9yZWFjaCB3aGlsZSBzd2l0Y2hcIik7XG4gICAgdmFyIGlzT3BlcmF0b3JDaGFyID0gL1srXFwtKiYlPTw+IT9eXFwvXFx8XS87XG4gICAgZnVuY3Rpb24gY2hhaW4oc3RyZWFtLCBzdGF0ZSwgZikge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSBmO1xuICAgICAgcmV0dXJuIGYoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgYmVmb3JlUGFyYW1zID0gc3RhdGUuYmVmb3JlUGFyYW1zO1xuICAgICAgc3RhdGUuYmVmb3JlUGFyYW1zID0gZmFsc2U7XG4gICAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpO1xuICAgICAgaWYgKChjaCA9PSAnXCInIHx8IGNoID09IFwiJ1wiKSAmJiBzdGF0ZS5pblBhcmFtcykge1xuICAgICAgICByZXR1cm4gY2hhaW4oc3RyZWFtLCBzdGF0ZSwgdG9rZW5TdHJpbmcoY2gpKTtcbiAgICAgIH0gZWxzZSBpZiAoL1tcXFtcXF17fVxcKFxcKSw7XFwuXS8udGVzdChjaCkpIHtcbiAgICAgICAgaWYgKGNoID09IFwiKFwiICYmIGJlZm9yZVBhcmFtcykgc3RhdGUuaW5QYXJhbXMgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjaCA9PSBcIilcIikgc3RhdGUuaW5QYXJhbXMgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoL1xcZC8udGVzdChjaCkpIHtcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwuXS8pO1xuICAgICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIjXCIpIHtcbiAgICAgICAgaWYgKHN0cmVhbS5lYXQoXCIqXCIpKVxuICAgICAgICAgIHJldHVybiBjaGFpbihzdHJlYW0sIHN0YXRlLCB0b2tlbkNvbW1lbnQpO1xuICAgICAgICBpZiAoY2ggPT0gXCIjXCIgJiYgc3RyZWFtLm1hdGNoKC8gKlxcWyAqXFxbLykpXG4gICAgICAgICAgcmV0dXJuIGNoYWluKHN0cmVhbSwgc3RhdGUsIHRva2VuVW5wYXJzZWQpO1xuICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT0gJ1wiJykge1xuICAgICAgICBzdHJlYW0uc2tpcFRvKC9cIi8pO1xuICAgICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgICB9IGVsc2UgaWYgKGNoID09IFwiJFwiKSB7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvWyRfYS16MC05QS1aXFwuezpdLyk7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvfS8pO1xuICAgICAgICBzdGF0ZS5iZWZvcmVQYXJhbXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gXCJidWlsdGluXCI7XG4gICAgICB9IGVsc2UgaWYgKGlzT3BlcmF0b3JDaGFyLnRlc3QoY2gpKSB7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZShpc09wZXJhdG9yQ2hhcik7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcJF97fVxceGExLVxcdWZmZmZdLyk7XG4gICAgICAgIHZhciB3b3JkID0gc3RyZWFtLmN1cnJlbnQoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoa2V5d29yZHMgJiYga2V5d29yZHMucHJvcGVydHlJc0VudW1lcmFibGUod29yZCkpXG4gICAgICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgICAgICBpZiAoZnVuY3Rpb25zICYmIGZ1bmN0aW9ucy5wcm9wZXJ0eUlzRW51bWVyYWJsZSh3b3JkKSkge1xuICAgICAgICAgIHN0YXRlLmJlZm9yZVBhcmFtcyA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0b2tlblN0cmluZyhxdW90ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsIG5leHQsIGVuZCA9IGZhbHNlO1xuICAgICAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAobmV4dCA9PSBxdW90ZSAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgIGVuZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gXCJcXFxcXCI7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b2tlbkNvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgdmFyIG1heWJlRW5kID0gZmFsc2UsIGNoO1xuICAgICAgd2hpbGUgKGNoID0gc3RyZWFtLm5leHQoKSkge1xuICAgICAgICBpZiAoY2ggPT0gXCIjXCIgJiYgbWF5YmVFbmQpIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtYXliZUVuZCA9IChjaCA9PSBcIipcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRva2VuVW5wYXJzZWQoc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgdmFyIG1heWJlRW5kID0gMCwgY2g7XG4gICAgICB3aGlsZSAoY2ggPSBzdHJlYW0ubmV4dCgpKSB7XG4gICAgICAgIGlmIChjaCA9PSBcIiNcIiAmJiBtYXliZUVuZCA9PSAyKSB7XG4gICAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoID09IFwiXVwiKVxuICAgICAgICAgIG1heWJlRW5kKys7XG4gICAgICAgIGVsc2UgaWYgKGNoICE9IFwiIFwiKVxuICAgICAgICAgIG1heWJlRW5kID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIm1ldGFcIjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRva2VuaXplOiB0b2tlbkJhc2UsXG4gICAgICAgICAgYmVmb3JlUGFyYW1zOiBmYWxzZSxcbiAgICAgICAgICBpblBhcmFtczogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICB9LFxuICAgICAgbGluZUNvbW1lbnQ6IFwiI1wiXG4gICAgfTtcbn0pO1xuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC94LXRjbFwiLCBcInRjbFwiKTtcblxufSk7XG4iXSwibmFtZXMiOlsibW9kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJDb2RlTWlycm9yIiwiZGVmaW5lTW9kZSIsInBhcnNlV29yZHMiLCJzdHIiLCJvYmoiLCJ3b3JkcyIsInNwbGl0IiwiaSIsImxlbmd0aCIsImtleXdvcmRzIiwiZnVuY3Rpb25zIiwiaXNPcGVyYXRvckNoYXIiLCJjaGFpbiIsInN0cmVhbSIsInN0YXRlIiwiZiIsInRva2VuaXplIiwidG9rZW5CYXNlIiwiYmVmb3JlUGFyYW1zIiwiY2giLCJuZXh0IiwiaW5QYXJhbXMiLCJ0b2tlblN0cmluZyIsInRlc3QiLCJlYXRXaGlsZSIsImVhdCIsInRva2VuQ29tbWVudCIsIm1hdGNoIiwidG9rZW5VbnBhcnNlZCIsInNraXBUb0VuZCIsInNraXBUbyIsIndvcmQiLCJjdXJyZW50IiwidG9Mb3dlckNhc2UiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInF1b3RlIiwiZXNjYXBlZCIsImVuZCIsIm1heWJlRW5kIiwic3RhcnRTdGF0ZSIsInRva2VuIiwiZWF0U3BhY2UiLCJsaW5lQ29tbWVudCIsImRlZmluZU1JTUUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/tcl/tcl.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/tcl/tcl.js");
/******/ 	
/******/ })()
;