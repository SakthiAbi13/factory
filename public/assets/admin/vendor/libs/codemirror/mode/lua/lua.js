/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/lua/lua.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/lua/lua.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// LUA mode. Ported to CodeMirror 2 from Franciszek Wawrzak's\n// CodeMirror 1 mode.\n// highlights keywords, strings, comments (no leveling supported! (\"[==[\")), tokens, basic indenting\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"lua\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n\n    function prefixRE(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")\", \"i\");\n    }\n\n    function wordRE(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n\n    var specials = wordRE(parserConfig.specials || []); // long list of standard functions from lua manual\n\n    var builtins = wordRE([\"_G\", \"_VERSION\", \"assert\", \"collectgarbage\", \"dofile\", \"error\", \"getfenv\", \"getmetatable\", \"ipairs\", \"load\", \"loadfile\", \"loadstring\", \"module\", \"next\", \"pairs\", \"pcall\", \"print\", \"rawequal\", \"rawget\", \"rawset\", \"require\", \"select\", \"setfenv\", \"setmetatable\", \"tonumber\", \"tostring\", \"type\", \"unpack\", \"xpcall\", \"coroutine.create\", \"coroutine.resume\", \"coroutine.running\", \"coroutine.status\", \"coroutine.wrap\", \"coroutine.yield\", \"debug.debug\", \"debug.getfenv\", \"debug.gethook\", \"debug.getinfo\", \"debug.getlocal\", \"debug.getmetatable\", \"debug.getregistry\", \"debug.getupvalue\", \"debug.setfenv\", \"debug.sethook\", \"debug.setlocal\", \"debug.setmetatable\", \"debug.setupvalue\", \"debug.traceback\", \"close\", \"flush\", \"lines\", \"read\", \"seek\", \"setvbuf\", \"write\", \"io.close\", \"io.flush\", \"io.input\", \"io.lines\", \"io.open\", \"io.output\", \"io.popen\", \"io.read\", \"io.stderr\", \"io.stdin\", \"io.stdout\", \"io.tmpfile\", \"io.type\", \"io.write\", \"math.abs\", \"math.acos\", \"math.asin\", \"math.atan\", \"math.atan2\", \"math.ceil\", \"math.cos\", \"math.cosh\", \"math.deg\", \"math.exp\", \"math.floor\", \"math.fmod\", \"math.frexp\", \"math.huge\", \"math.ldexp\", \"math.log\", \"math.log10\", \"math.max\", \"math.min\", \"math.modf\", \"math.pi\", \"math.pow\", \"math.rad\", \"math.random\", \"math.randomseed\", \"math.sin\", \"math.sinh\", \"math.sqrt\", \"math.tan\", \"math.tanh\", \"os.clock\", \"os.date\", \"os.difftime\", \"os.execute\", \"os.exit\", \"os.getenv\", \"os.remove\", \"os.rename\", \"os.setlocale\", \"os.time\", \"os.tmpname\", \"package.cpath\", \"package.loaded\", \"package.loaders\", \"package.loadlib\", \"package.path\", \"package.preload\", \"package.seeall\", \"string.byte\", \"string.char\", \"string.dump\", \"string.find\", \"string.format\", \"string.gmatch\", \"string.gsub\", \"string.len\", \"string.lower\", \"string.match\", \"string.rep\", \"string.reverse\", \"string.sub\", \"string.upper\", \"table.concat\", \"table.insert\", \"table.maxn\", \"table.remove\", \"table.sort\"]);\n    var keywords = wordRE([\"and\", \"break\", \"elseif\", \"false\", \"nil\", \"not\", \"or\", \"return\", \"true\", \"function\", \"end\", \"if\", \"then\", \"else\", \"do\", \"while\", \"repeat\", \"until\", \"for\", \"in\", \"local\"]);\n    var indentTokens = wordRE([\"function\", \"if\", \"repeat\", \"do\", \"\\\\(\", \"{\"]);\n    var dedentTokens = wordRE([\"end\", \"until\", \"\\\\)\", \"}\"]);\n    var dedentPartial = prefixRE([\"end\", \"until\", \"\\\\)\", \"}\", \"else\", \"elseif\"]);\n\n    function readBracket(stream) {\n      var level = 0;\n\n      while (stream.eat(\"=\")) {\n        ++level;\n      }\n\n      stream.eat(\"[\");\n      return level;\n    }\n\n    function normal(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"-\" && stream.eat(\"-\")) {\n        if (stream.eat(\"[\") && stream.eat(\"[\")) return (state.cur = bracketed(readBracket(stream), \"comment\"))(stream, state);\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch == \"\\\"\" || ch == \"'\") return (state.cur = string(ch))(stream, state);\n      if (ch == \"[\" && /[\\[=]/.test(stream.peek())) return (state.cur = bracketed(readBracket(stream), \"string\"))(stream, state);\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w.%]/);\n        return \"number\";\n      }\n\n      if (/[\\w_]/.test(ch)) {\n        stream.eatWhile(/[\\w\\\\\\-_.]/);\n        return \"variable\";\n      }\n\n      return null;\n    }\n\n    function bracketed(level, style) {\n      return function (stream, state) {\n        var curlev = null,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (curlev == null) {\n            if (ch == \"]\") curlev = 0;\n          } else if (ch == \"=\") ++curlev;else if (ch == \"]\" && curlev == level) {\n            state.cur = normal;\n            break;\n          } else curlev = null;\n        }\n\n        return style;\n      };\n    }\n\n    function string(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) break;\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (!escaped) state.cur = normal;\n        return \"string\";\n      };\n    }\n\n    return {\n      startState: function startState(basecol) {\n        return {\n          basecol: basecol || 0,\n          indentDepth: 0,\n          cur: normal\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.cur(stream, state);\n        var word = stream.current();\n\n        if (style == \"variable\") {\n          if (keywords.test(word)) style = \"keyword\";else if (builtins.test(word)) style = \"builtin\";else if (specials.test(word)) style = \"variable-2\";\n        }\n\n        if (style != \"comment\" && style != \"string\") {\n          if (indentTokens.test(word)) ++state.indentDepth;else if (dedentTokens.test(word)) --state.indentDepth;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var closing = dedentPartial.test(textAfter);\n        return state.basecol + indentUnit * (state.indentDepth - (closing ? 1 : 0));\n      },\n      electricInput: /^\\s*(?:end|until|else|\\)|\\})$/,\n      lineComment: \"--\",\n      blockCommentStart: \"--[[\",\n      blockCommentEnd: \"]]\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-lua\", \"lua\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/lua/lua.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/lua/lua.js");
/******/ 	
/******/ })()
;