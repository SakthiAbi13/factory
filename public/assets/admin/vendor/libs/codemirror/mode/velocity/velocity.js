/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/velocity/velocity.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/velocity/velocity.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"velocity\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" + \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" + \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next(); // start of unparsed string?\n\n      if (ch == \"'\" && !state.inString && state.inParams) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenString(ch));\n      } // start of parsed string?\n      else if (ch == '\"') {\n        state.lastTokenWasBuiltin = false;\n\n        if (state.inString) {\n          state.inString = false;\n          return \"string\";\n        } else if (state.inParams) return chain(stream, state, tokenString(ch));\n      } // is it one of the special signs []{}().,;? Separator?\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") {\n          state.inParams = false;\n          state.lastTokenWasBuiltin = true;\n        }\n        return null;\n      } // start of a number value?\n      else if (/\\d/.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } // multi line comment?\n      else if (ch == \"#\" && stream.eat(\"*\")) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenComment);\n      } // unparsed content?\n      else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenUnparsed);\n      } // single line comment?\n      else if (ch == \"#\" && stream.eat(\"#\")) {\n        state.lastTokenWasBuiltin = false;\n        stream.skipToEnd();\n        return \"comment\";\n      } // variable?\n      else if (ch == \"$\") {\n        stream.eat(\"!\");\n        stream.eatWhile(/[\\w\\d\\$_\\.{}-]/); // is it one of the specials?\n\n        if (specials && specials.propertyIsEnumerable(stream.current())) {\n          return \"keyword\";\n        } else {\n          state.lastTokenWasBuiltin = true;\n          state.beforeParams = true;\n          return \"builtin\";\n        }\n      } // is it a operator?\n      else if (isOperatorChar.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      } else {\n        // get the whole word\n        stream.eatWhile(/[\\w\\$_{}@]/);\n        var word = stream.current(); // is it one of the listed keywords?\n\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\"; // is it one of the listed functions?\n\n        if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n          state.beforeParams = true;\n          state.lastTokenWasBuiltin = false;\n          return \"keyword\";\n        }\n\n        if (state.inString) {\n          state.lastTokenWasBuiltin = false;\n          return \"string\";\n        }\n\n        if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\"; // default: just a \"word\"\n\n        state.lastTokenWasBuiltin = false;\n        return null;\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          if (quote == '\"' && stream.peek() == '$' && !escaped) {\n            state.inString = true;\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false,\n          inString: false,\n          lastTokenWasBuiltin: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"#*\",\n      blockCommentEnd: \"*#\",\n      lineComment: \"##\",\n      fold: \"velocity\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS92ZWxvY2l0eS92ZWxvY2l0eS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBRUEsQ0FBQyxVQUFTQSxHQUFULEVBQWM7RUFDYixJQUFJLHNCQUFPQyxPQUFQLE1BQWtCLFFBQWxCLElBQThCLHNCQUFPQyxNQUFQLE1BQWlCLFFBQW5ELEVBQTZEO0lBQzNERixHQUFHLENBQUNHLG1CQUFPLENBQUMsbUpBQUQsQ0FBUixDQUFILENBREYsS0FFSyxJQUFJLElBQUosRUFBK0M7SUFDbERDLGlDQUFPLENBQUMsbUpBQUQsQ0FBRCxvQ0FBMkJKLEdBQTNCO0FBQUE7QUFBQTtBQUFBLGtHQUFOLENBREcsS0FFQTtJQUNIQSxFQUFBO0FBQ0gsQ0FQRCxFQU9HLFVBQVNNLFVBQVQsRUFBcUI7RUFDeEI7O0VBRUFBLFVBQVUsQ0FBQ0MsVUFBWCxDQUFzQixVQUF0QixFQUFrQyxZQUFXO0lBQ3pDLFNBQVNDLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO01BQ3JCLElBQUlDLEdBQUcsR0FBRyxFQUFWO01BQUEsSUFBY0MsS0FBSyxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVSxHQUFWLENBQXRCOztNQUNBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsS0FBSyxDQUFDRyxNQUExQixFQUFrQyxFQUFFRCxDQUFwQztRQUF1Q0gsR0FBRyxDQUFDQyxLQUFLLENBQUNFLENBQUQsQ0FBTixDQUFILEdBQWdCLElBQWhCO01BQXZDOztNQUNBLE9BQU9ILEdBQVA7SUFDSDs7SUFFRCxJQUFJSyxRQUFRLEdBQUdQLFVBQVUsQ0FBQyxxQ0FDQSxpQ0FERCxDQUF6QjtJQUVBLElBQUlRLFNBQVMsR0FBR1IsVUFBVSxDQUFDLHdFQUNBLHNGQURELENBQTFCO0lBRUEsSUFBSVMsUUFBUSxHQUFHVCxVQUFVLENBQUMsa09BQUQsQ0FBekI7SUFDQSxJQUFJVSxjQUFj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QUUsS0FGWDtVQUdISSxRQUFRLEVBQUUsS0FIUDtVQUlIRCxRQUFRLEVBQUUsS0FKUDtVQUtIRSxtQkFBbUIsRUFBRTtRQUxsQixDQUFQO01BT0gsQ0FURTtNQVdIc0IsS0FBSyxFQUFFLGVBQVNoQyxNQUFULEVBQWlCQyxLQUFqQixFQUF3QjtRQUMzQixJQUFJRCxNQUFNLENBQUNpQyxRQUFQLEVBQUosRUFBdUIsT0FBTyxJQUFQO1FBQ3ZCLE9BQU9oQyxLQUFLLENBQUNFLFFBQU4sQ0FBZUgsTUFBZixFQUF1QkMsS0FBdkIsQ0FBUDtNQUNILENBZEU7TUFlSGlDLGlCQUFpQixFQUFFLElBZmhCO01BZ0JIQyxlQUFlLEVBQUUsSUFoQmQ7TUFpQkhDLFdBQVcsRUFBRSxJQWpCVjtNQWtCSEMsSUFBSSxFQUFFO0lBbEJILENBQVA7RUFvQkgsQ0F4TEQ7RUEwTEFuRCxVQUFVLENBQUNvRCxVQUFYLENBQXNCLGVBQXRCLEVBQXVDLFVBQXZDO0FBRUMsQ0F0TUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL3ZlbmRvci9saWJzL2NvZGVtaXJyb3IvbW9kZS92ZWxvY2l0eS92ZWxvY2l0eS5qcz84MDFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vLi4vbGliL2NvZGVtaXJyb3JcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwidmVsb2NpdHlcIiwgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gcGFyc2VXb3JkcyhzdHIpIHtcbiAgICAgICAgdmFyIG9iaiA9IHt9LCB3b3JkcyA9IHN0ci5zcGxpdChcIiBcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpIG9ialt3b3Jkc1tpXV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHZhciBrZXl3b3JkcyA9IHBhcnNlV29yZHMoXCIjZW5kICNlbHNlICNicmVhayAjc3RvcCAjW1sgI11dIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiI3tlbmR9ICN7ZWxzZX0gI3ticmVha30gI3tzdG9wfVwiKTtcbiAgICB2YXIgZnVuY3Rpb25zID0gcGFyc2VXb3JkcyhcIiNpZiAjZWxzZWlmICNmb3JlYWNoICNzZXQgI2luY2x1ZGUgI3BhcnNlICNtYWNybyAjZGVmaW5lICNldmFsdWF0ZSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIje2lmfSAje2Vsc2VpZn0gI3tmb3JlYWNofSAje3NldH0gI3tpbmNsdWRlfSAje3BhcnNlfSAje21hY3JvfSAje2RlZmluZX0gI3tldmFsdWF0ZX1cIik7XG4gICAgdmFyIHNwZWNpYWxzID0gcGFyc2VXb3JkcyhcIiRmb3JlYWNoLmNvdW50ICRmb3JlYWNoLmhhc05leHQgJGZvcmVhY2guZmlyc3QgJGZvcmVhY2gubGFzdCAkZm9yZWFjaC50b3Btb3N0ICRmb3JlYWNoLnBhcmVudC5jb3VudCAkZm9yZWFjaC5wYXJlbnQuaGFzTmV4dCAkZm9yZWFjaC5wYXJlbnQuZmlyc3QgJGZvcmVhY2gucGFyZW50Lmxhc3QgJGZvcmVhY2gucGFyZW50ICR2ZWxvY2l0eUNvdW50ICQhYm9keUNvbnRlbnQgJGJvZHlDb250ZW50XCIpO1xuICAgIHZhciBpc09wZXJhdG9yQ2hhciA9IC9bK1xcLSomJT08PiE/OlxcL3xdLztcblxuICAgIGZ1bmN0aW9uIGNoYWluKHN0cmVhbSwgc3RhdGUsIGYpIHtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSBmO1xuICAgICAgICByZXR1cm4gZihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGJlZm9yZVBhcmFtcyA9IHN0YXRlLmJlZm9yZVBhcmFtcztcbiAgICAgICAgc3RhdGUuYmVmb3JlUGFyYW1zID0gZmFsc2U7XG4gICAgICAgIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIC8vIHN0YXJ0IG9mIHVucGFyc2VkIHN0cmluZz9cbiAgICAgICAgaWYgKChjaCA9PSBcIidcIikgJiYgIXN0YXRlLmluU3RyaW5nICYmIHN0YXRlLmluUGFyYW1zKSB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0VG9rZW5XYXNCdWlsdGluID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gY2hhaW4oc3RyZWFtLCBzdGF0ZSwgdG9rZW5TdHJpbmcoY2gpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdGFydCBvZiBwYXJzZWQgc3RyaW5nP1xuICAgICAgICBlbHNlIGlmICgoY2ggPT0gJ1wiJykpIHtcbiAgICAgICAgICAgIHN0YXRlLmxhc3RUb2tlbldhc0J1aWx0aW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pblN0cmluZykge1xuICAgICAgICAgICAgICAgIHN0YXRlLmluU3RyaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZS5pblBhcmFtcylcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhaW4oc3RyZWFtLCBzdGF0ZSwgdG9rZW5TdHJpbmcoY2gpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpcyBpdCBvbmUgb2YgdGhlIHNwZWNpYWwgc2lnbnMgW117fSgpLiw7PyBTZXBhcmF0b3I/XG4gICAgICAgIGVsc2UgaWYgKC9bXFxbXFxde31cXChcXCksO1xcLl0vLnRlc3QoY2gpKSB7XG4gICAgICAgICAgICBpZiAoY2ggPT0gXCIoXCIgJiYgYmVmb3JlUGFyYW1zKVxuICAgICAgICAgICAgICAgIHN0YXRlLmluUGFyYW1zID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoID09IFwiKVwiKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuaW5QYXJhbXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5sYXN0VG9rZW5XYXNCdWlsdGluID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN0YXJ0IG9mIGEgbnVtYmVyIHZhbHVlP1xuICAgICAgICBlbHNlIGlmICgvXFxkLy50ZXN0KGNoKSkge1xuICAgICAgICAgICAgc3RhdGUubGFzdFRva2VuV2FzQnVpbHRpbiA9IGZhbHNlO1xuICAgICAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwuXS8pO1xuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbXVsdGkgbGluZSBjb21tZW50P1xuICAgICAgICBlbHNlIGlmIChjaCA9PSBcIiNcIiAmJiBzdHJlYW0uZWF0KFwiKlwiKSkge1xuICAgICAgICAgICAgc3RhdGUubGFzdFRva2VuV2FzQnVpbHRpbiA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGNoYWluKHN0cmVhbSwgc3RhdGUsIHRva2VuQ29tbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdW5wYXJzZWQgY29udGVudD9cbiAgICAgICAgZWxzZSBpZiAoY2ggPT0gXCIjXCIgJiYgc3RyZWFtLm1hdGNoKC8gKlxcWyAqXFxbLykpIHtcbiAgICAgICAgICAgIHN0YXRlLmxhc3RUb2tlbldhc0J1aWx0aW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBjaGFpbihzdHJlYW0sIHN0YXRlLCB0b2tlblVucGFyc2VkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaW5nbGUgbGluZSBjb21tZW50P1xuICAgICAgICBlbHNlIGlmIChjaCA9PSBcIiNcIiAmJiBzdHJlYW0uZWF0KFwiI1wiKSkge1xuICAgICAgICAgICAgc3RhdGUubGFzdFRva2VuV2FzQnVpbHRpbiA9IGZhbHNlO1xuICAgICAgICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIHZhcmlhYmxlP1xuICAgICAgICBlbHNlIGlmIChjaCA9PSBcIiRcIikge1xuICAgICAgICAgICAgc3RyZWFtLmVhdChcIiFcIik7XG4gICAgICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXGRcXCRfXFwue30tXS8pO1xuICAgICAgICAgICAgLy8gaXMgaXQgb25lIG9mIHRoZSBzcGVjaWFscz9cbiAgICAgICAgICAgIGlmIChzcGVjaWFscyAmJiBzcGVjaWFscy5wcm9wZXJ0eUlzRW51bWVyYWJsZShzdHJlYW0uY3VycmVudCgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlLmxhc3RUb2tlbldhc0J1aWx0aW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0YXRlLmJlZm9yZVBhcmFtcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYnVpbHRpblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlzIGl0IGEgb3BlcmF0b3I/XG4gICAgICAgIGVsc2UgaWYgKGlzT3BlcmF0b3JDaGFyLnRlc3QoY2gpKSB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0VG9rZW5XYXNCdWlsdGluID0gZmFsc2U7XG4gICAgICAgICAgICBzdHJlYW0uZWF0V2hpbGUoaXNPcGVyYXRvckNoYXIpO1xuICAgICAgICAgICAgcmV0dXJuIFwib3BlcmF0b3JcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgd2hvbGUgd29yZFxuICAgICAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX3t9QF0vKTtcbiAgICAgICAgICAgIHZhciB3b3JkID0gc3RyZWFtLmN1cnJlbnQoKTtcbiAgICAgICAgICAgIC8vIGlzIGl0IG9uZSBvZiB0aGUgbGlzdGVkIGtleXdvcmRzP1xuICAgICAgICAgICAgaWYgKGtleXdvcmRzICYmIGtleXdvcmRzLnByb3BlcnR5SXNFbnVtZXJhYmxlKHdvcmQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICAgICAgICAgIC8vIGlzIGl0IG9uZSBvZiB0aGUgbGlzdGVkIGZ1bmN0aW9ucz9cbiAgICAgICAgICAgIGlmIChmdW5jdGlvbnMgJiYgZnVuY3Rpb25zLnByb3BlcnR5SXNFbnVtZXJhYmxlKHdvcmQpIHx8XG4gICAgICAgICAgICAgICAgICAgIChzdHJlYW0uY3VycmVudCgpLm1hdGNoKC9eI0A/W2EtejAtOV9dKyAqJC9pKSAmJiBzdHJlYW0ucGVlaygpPT1cIihcIikgJiZcbiAgICAgICAgICAgICAgICAgICAgICEoZnVuY3Rpb25zICYmIGZ1bmN0aW9ucy5wcm9wZXJ0eUlzRW51bWVyYWJsZSh3b3JkLnRvTG93ZXJDYXNlKCkpKSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmJlZm9yZVBhcmFtcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhdGUubGFzdFRva2VuV2FzQnVpbHRpbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5pblN0cmluZykge1xuICAgICAgICAgICAgICAgIHN0YXRlLmxhc3RUb2tlbldhc0J1aWx0aW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJlYW0ucG9zID4gd29yZC5sZW5ndGggJiYgc3RyZWFtLnN0cmluZy5jaGFyQXQoc3RyZWFtLnBvcy13b3JkLmxlbmd0aC0xKT09XCIuXCIgJiYgc3RhdGUubGFzdFRva2VuV2FzQnVpbHRpbilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJidWlsdGluXCI7XG4gICAgICAgICAgICAvLyBkZWZhdWx0OiBqdXN0IGEgXCJ3b3JkXCJcbiAgICAgICAgICAgIHN0YXRlLmxhc3RUb2tlbldhc0J1aWx0aW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9rZW5TdHJpbmcocXVvdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsIG5leHQsIGVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgobmV4dCA9PSBxdW90ZSkgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChxdW90ZT09J1wiJyAmJiBzdHJlYW0ucGVlaygpID09ICckJyAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pblN0cmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWQgJiYgbmV4dCA9PSBcIlxcXFxcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQpIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9rZW5Db21tZW50KHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgdmFyIG1heWJlRW5kID0gZmFsc2UsIGNoO1xuICAgICAgICB3aGlsZSAoY2ggPSBzdHJlYW0ubmV4dCgpKSB7XG4gICAgICAgICAgICBpZiAoY2ggPT0gXCIjXCIgJiYgbWF5YmVFbmQpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1heWJlRW5kID0gKGNoID09IFwiKlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9rZW5VbnBhcnNlZChzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIHZhciBtYXliZUVuZCA9IDAsIGNoO1xuICAgICAgICB3aGlsZSAoY2ggPSBzdHJlYW0ubmV4dCgpKSB7XG4gICAgICAgICAgICBpZiAoY2ggPT0gXCIjXCIgJiYgbWF5YmVFbmQgPT0gMikge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoID09IFwiXVwiKVxuICAgICAgICAgICAgICAgIG1heWJlRW5kKys7XG4gICAgICAgICAgICBlbHNlIGlmIChjaCAhPSBcIiBcIilcbiAgICAgICAgICAgICAgICBtYXliZUVuZCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgIH1cbiAgICAvLyBJbnRlcmZhY2VcblxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b2tlbml6ZTogdG9rZW5CYXNlLFxuICAgICAgICAgICAgICAgIGJlZm9yZVBhcmFtczogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5QYXJhbXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluU3RyaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsYXN0VG9rZW5XYXNCdWlsdGluOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmxvY2tDb21tZW50U3RhcnQ6IFwiIypcIixcbiAgICAgICAgYmxvY2tDb21tZW50RW5kOiBcIiojXCIsXG4gICAgICAgIGxpbmVDb21tZW50OiBcIiMjXCIsXG4gICAgICAgIGZvbGQ6IFwidmVsb2NpdHlcIlxuICAgIH07XG59KTtcblxuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC92ZWxvY2l0eVwiLCBcInZlbG9jaXR5XCIpO1xuXG59KTtcbiJdLCJuYW1lcyI6WyJtb2QiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIkNvZGVNaXJyb3IiLCJkZWZpbmVNb2RlIiwicGFyc2VXb3JkcyIsInN0ciIsIm9iaiIsIndvcmRzIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwia2V5d29yZHMiLCJmdW5jdGlvbnMiLCJzcGVjaWFscyIsImlzT3BlcmF0b3JDaGFyIiwiY2hhaW4iLCJzdHJlYW0iLCJzdGF0ZSIsImYiLCJ0b2tlbml6ZSIsInRva2VuQmFzZSIsImJlZm9yZVBhcmFtcyIsImNoIiwibmV4dCIsImluU3RyaW5nIiwiaW5QYXJhbXMiLCJsYXN0VG9rZW5XYXNCdWlsdGluIiwidG9rZW5TdHJpbmciLCJ0ZXN0IiwiZWF0V2hpbGUiLCJlYXQiLCJ0b2tlbkNvbW1lbnQiLCJtYXRjaCIsInRva2VuVW5wYXJzZWQiLCJza2lwVG9FbmQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImN1cnJlbnQiLCJ3b3JkIiwicGVlayIsInRvTG93ZXJDYXNlIiwicG9zIiwic3RyaW5nIiwiY2hhckF0IiwicXVvdGUiLCJlc2NhcGVkIiwiZW5kIiwibWF5YmVFbmQiLCJzdGFydFN0YXRlIiwidG9rZW4iLCJlYXRTcGFjZSIsImJsb2NrQ29tbWVudFN0YXJ0IiwiYmxvY2tDb21tZW50RW5kIiwibGluZUNvbW1lbnQiLCJmb2xkIiwiZGVmaW5lTUlNRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/velocity/velocity.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/velocity/velocity.js");
/******/ 	
/******/ })()
;