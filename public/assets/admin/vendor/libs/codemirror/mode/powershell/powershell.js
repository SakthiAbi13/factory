/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/powershell/powershell.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/powershell/powershell.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  'use strict';\n\n  if (( false ? 0 : _typeof(exports)) == 'object' && ( false ? 0 : _typeof(module)) == 'object') // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  'use strict';\n\n  CodeMirror.defineMode('powershell', function () {\n    function buildRegexp(patterns, options) {\n      options = options || {};\n      var prefix = options.prefix !== undefined ? options.prefix : '^';\n      var suffix = options.suffix !== undefined ? options.suffix : '\\\\b';\n\n      for (var i = 0; i < patterns.length; i++) {\n        if (patterns[i] instanceof RegExp) {\n          patterns[i] = patterns[i].source;\n        } else {\n          patterns[i] = patterns[i].replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n        }\n      }\n\n      return new RegExp(prefix + '(' + patterns.join('|') + ')' + suffix, 'i');\n    }\n\n    var notCharacterOrDash = '(?=[^A-Za-z\\\\d\\\\-_]|$)';\n    var varNames = /[\\w\\-:]/;\n    var keywords = buildRegexp([/begin|break|catch|continue|data|default|do|dynamicparam/, /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/, /param|process|return|switch|throw|trap|try|until|where|while/], {\n      suffix: notCharacterOrDash\n    });\n    var punctuation = /[\\[\\]{},;`\\\\\\.]|@[({]/;\n    var wordOperators = buildRegexp(['f', /b?not/, /[ic]?split/, 'join', /is(not)?/, 'as', /[ic]?(eq|ne|[gl][te])/, /[ic]?(not)?(like|match|contains)/, /[ic]?replace/, /b?(and|or|xor)/], {\n      prefix: '-'\n    });\n    var symbolOperators = /[+\\-*\\/%]=|\\+\\+|--|\\.\\.|[+\\-*&^%:=!|\\/]|<(?!#)|(?!#)>/;\n    var operators = buildRegexp([wordOperators, symbolOperators], {\n      suffix: ''\n    });\n    var numbers = /^((0x[\\da-f]+)|((\\d+\\.\\d+|\\d\\.|\\.\\d+|\\d+)(e[\\+\\-]?\\d+)?))[ld]?([kmgtp]b)?/i;\n    var identifiers = /^[A-Za-z\\_][A-Za-z\\-\\_\\d]*\\b/;\n    var symbolBuiltins = /[A-Z]:|%|\\?/i;\n    var namedBuiltins = buildRegexp([/Add-(Computer|Content|History|Member|PSSnapin|Type)/, /Checkpoint-Computer/, /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/, /Compare-Object/, /Complete-Transaction/, /Connect-PSSession/, /ConvertFrom-(Csv|Json|SecureString|StringData)/, /Convert-Path/, /ConvertTo-(Csv|Html|Json|SecureString|Xml)/, /Copy-Item(Property)?/, /Debug-Process/, /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/, /Disconnect-PSSession/, /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/, /(Enter|Exit)-PSSession/, /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/, /ForEach-Object/, /Format-(Custom|List|Table|Wide)/, new RegExp('Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential' + '|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job' + '|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration' + '|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)'), /Group-Object/, /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/, /ImportSystemModules/, /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/, /Join-Path/, /Limit-EventLog/, /Measure-(Command|Object)/, /Move-Item(Property)?/, new RegExp('New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile' + '|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)'), /Out-(Default|File|GridView|Host|Null|Printer|String)/, /Pause/, /(Pop|Push)-Location/, /Read-Host/, /Receive-(Job|PSSession)/, /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/, /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/, /Rename-(Computer|Item(Property)?)/, /Reset-ComputerMachinePassword/, /Resolve-Path/, /Restart-(Computer|Service)/, /Restore-Computer/, /Resume-(Job|Service)/, /Save-Help/, /Select-(Object|String|Xml)/, /Send-MailMessage/, new RegExp('Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug' + '|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)'), /Show-(Command|ControlPanelItem|EventLog)/, /Sort-Object/, /Split-Path/, /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/, /Stop-(Computer|Job|Process|Service|Transcript)/, /Suspend-(Job|Service)/, /TabExpansion2/, /Tee-Object/, /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/, /Trace-Command/, /Unblock-File/, /Undo-Transaction/, /Unregister-(Event|PSSessionConfiguration)/, /Update-(FormatData|Help|List|TypeData)/, /Use-Transaction/, /Wait-(Event|Job|Process)/, /Where-Object/, /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/, /cd|help|mkdir|more|oss|prompt/, /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/, /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/, /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/, /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/, /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/, /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/], {\n      prefix: '',\n      suffix: ''\n    });\n    var variableBuiltins = buildRegexp([/[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/, /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/, /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/, /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/, /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/, /WarningPreference|WhatIfPreference/, /Event|EventArgs|EventSubscriber|Sender/, /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/, /true|false|null/], {\n      prefix: '\\\\$',\n      suffix: ''\n    });\n    var builtins = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], {\n      suffix: notCharacterOrDash\n    });\n    var grammar = {\n      keyword: keywords,\n      number: numbers,\n      operator: operators,\n      builtin: builtins,\n      punctuation: punctuation,\n      identifier: identifiers\n    }; // tokenizers\n\n    function tokenBase(stream, state) {\n      // Handle Comments\n      //var ch = stream.peek();\n      var parent = state.returnStack[state.returnStack.length - 1];\n\n      if (parent && parent.shouldReturnFrom(state)) {\n        state.tokenize = parent.tokenize;\n        state.returnStack.pop();\n        return state.tokenize(stream, state);\n      }\n\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      if (stream.eat('(')) {\n        state.bracketNesting += 1;\n        return 'punctuation';\n      }\n\n      if (stream.eat(')')) {\n        state.bracketNesting -= 1;\n        return 'punctuation';\n      }\n\n      for (var key in grammar) {\n        if (stream.match(grammar[key])) {\n          return key;\n        }\n      }\n\n      var ch = stream.next(); // single-quote string\n\n      if (ch === \"'\") {\n        return tokenSingleQuoteString(stream, state);\n      }\n\n      if (ch === '$') {\n        return tokenVariable(stream, state);\n      } // double-quote string\n\n\n      if (ch === '\"') {\n        return tokenDoubleQuoteString(stream, state);\n      }\n\n      if (ch === '<' && stream.eat('#')) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n\n      if (ch === '#') {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (ch === '@') {\n        var quoteMatch = stream.eat(/[\"']/);\n\n        if (quoteMatch && stream.eol()) {\n          state.tokenize = tokenMultiString;\n          state.startQuote = quoteMatch[0];\n          return tokenMultiString(stream, state);\n        } else if (stream.eol()) {\n          return 'error';\n        } else if (stream.peek().match(/[({]/)) {\n          return 'punctuation';\n        } else if (stream.peek().match(varNames)) {\n          // splatted variable\n          return tokenVariable(stream, state);\n        }\n      }\n\n      return 'error';\n    }\n\n    function tokenSingleQuoteString(stream, state) {\n      var ch;\n\n      while ((ch = stream.peek()) != null) {\n        stream.next();\n\n        if (ch === \"'\" && !stream.eat(\"'\")) {\n          state.tokenize = tokenBase;\n          return 'string';\n        }\n      }\n\n      return 'error';\n    }\n\n    function tokenDoubleQuoteString(stream, state) {\n      var ch;\n\n      while ((ch = stream.peek()) != null) {\n        if (ch === '$') {\n          state.tokenize = tokenStringInterpolation;\n          return 'string';\n        }\n\n        stream.next();\n\n        if (ch === '`') {\n          stream.next();\n          continue;\n        }\n\n        if (ch === '\"' && !stream.eat('\"')) {\n          state.tokenize = tokenBase;\n          return 'string';\n        }\n      }\n\n      return 'error';\n    }\n\n    function tokenStringInterpolation(stream, state) {\n      return tokenInterpolation(stream, state, tokenDoubleQuoteString);\n    }\n\n    function tokenMultiStringReturn(stream, state) {\n      state.tokenize = tokenMultiString;\n      state.startQuote = '\"';\n      return tokenMultiString(stream, state);\n    }\n\n    function tokenHereStringInterpolation(stream, state) {\n      return tokenInterpolation(stream, state, tokenMultiStringReturn);\n    }\n\n    function tokenInterpolation(stream, state, parentTokenize) {\n      if (stream.match('$(')) {\n        var savedBracketNesting = state.bracketNesting;\n        state.returnStack.push({\n          /*jshint loopfunc:true */\n          shouldReturnFrom: function shouldReturnFrom(state) {\n            return state.bracketNesting === savedBracketNesting;\n          },\n          tokenize: parentTokenize\n        });\n        state.tokenize = tokenBase;\n        state.bracketNesting += 1;\n        return 'punctuation';\n      } else {\n        stream.next();\n        state.returnStack.push({\n          shouldReturnFrom: function shouldReturnFrom() {\n            return true;\n          },\n          tokenize: parentTokenize\n        });\n        state.tokenize = tokenVariable;\n        return state.tokenize(stream, state);\n      }\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == '>') {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch === '#';\n      }\n\n      return 'comment';\n    }\n\n    function tokenVariable(stream, state) {\n      var ch = stream.peek();\n\n      if (stream.eat('{')) {\n        state.tokenize = tokenVariableWithBraces;\n        return tokenVariableWithBraces(stream, state);\n      } else if (ch != undefined && ch.match(varNames)) {\n        stream.eatWhile(varNames);\n        state.tokenize = tokenBase;\n        return 'variable-2';\n      } else {\n        state.tokenize = tokenBase;\n        return 'error';\n      }\n    }\n\n    function tokenVariableWithBraces(stream, state) {\n      var ch;\n\n      while ((ch = stream.next()) != null) {\n        if (ch === '}') {\n          state.tokenize = tokenBase;\n          break;\n        }\n      }\n\n      return 'variable-2';\n    }\n\n    function tokenMultiString(stream, state) {\n      var quote = state.startQuote;\n\n      if (stream.sol() && stream.match(new RegExp(quote + '@'))) {\n        state.tokenize = tokenBase;\n      } else if (quote === '\"') {\n        while (!stream.eol()) {\n          var ch = stream.peek();\n\n          if (ch === '$') {\n            state.tokenize = tokenHereStringInterpolation;\n            return 'string';\n          }\n\n          stream.next();\n\n          if (ch === '`') {\n            stream.next();\n          }\n        }\n      } else {\n        stream.skipToEnd();\n      }\n\n      return 'string';\n    }\n\n    var external = {\n      startState: function startState() {\n        return {\n          returnStack: [],\n          bracketNesting: 0,\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: '<#',\n      blockCommentEnd: '#>',\n      lineComment: '#',\n      fold: 'brace'\n    };\n    return external;\n  });\n  CodeMirror.defineMIME('application/x-powershell', 'powershell');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/powershell/powershell.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/powershell/powershell.js");
/******/ 	
/******/ })()
;