/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.overlayMode = function (base, overlay, combine) {\n    return {\n      startState: function startState() {\n        return {\n          base: CodeMirror.startState(base),\n          overlay: CodeMirror.startState(overlay),\n          basePos: 0,\n          baseCur: null,\n          overlayPos: 0,\n          overlayCur: null,\n          streamSeen: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          base: CodeMirror.copyState(base, state.base),\n          overlay: CodeMirror.copyState(overlay, state.overlay),\n          basePos: state.basePos,\n          baseCur: null,\n          overlayPos: state.overlayPos,\n          overlayCur: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream != state.streamSeen || Math.min(state.basePos, state.overlayPos) < stream.start) {\n          state.streamSeen = stream;\n          state.basePos = state.overlayPos = stream.start;\n        }\n\n        if (stream.start == state.basePos) {\n          state.baseCur = base.token(stream, state.base);\n          state.basePos = stream.pos;\n        }\n\n        if (stream.start == state.overlayPos) {\n          stream.pos = stream.start;\n          state.overlayCur = overlay.token(stream, state.overlay);\n          state.overlayPos = stream.pos;\n        }\n\n        stream.pos = Math.min(state.basePos, state.overlayPos); // state.overlay.combineTokens always takes precedence over combine,\n        // unless set to null\n\n        if (state.overlayCur == null) return state.baseCur;else if (state.baseCur != null && state.overlay.combineTokens || combine && state.overlay.combineTokens == null) return state.baseCur + \" \" + state.overlayCur;else return state.overlayCur;\n      },\n      indent: base.indent && function (state, textAfter, line) {\n        return base.indent(state.base, textAfter, line);\n      },\n      electricChars: base.electricChars,\n      innerMode: function innerMode(state) {\n        return {\n          state: state.base,\n          mode: base\n        };\n      },\n      blankLine: function blankLine(state) {\n        var baseToken, overlayToken;\n        if (base.blankLine) baseToken = base.blankLine(state.base);\n        if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n        return overlayToken == null ? baseToken : combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken;\n      }\n    };\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/css/css.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/css/css.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"css\", function (config, parserConfig) {\n    var inline = parserConfig.inline;\n    if (!parserConfig.propertyKeywords) parserConfig = CodeMirror.resolveMode(\"text/css\");\n    var indentUnit = config.indentUnit,\n        tokenHooks = parserConfig.tokenHooks,\n        documentTypes = parserConfig.documentTypes || {},\n        mediaTypes = parserConfig.mediaTypes || {},\n        mediaFeatures = parserConfig.mediaFeatures || {},\n        mediaValueKeywords = parserConfig.mediaValueKeywords || {},\n        propertyKeywords = parserConfig.propertyKeywords || {},\n        nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\n        fontProperties = parserConfig.fontProperties || {},\n        counterDescriptors = parserConfig.counterDescriptors || {},\n        colorKeywords = parserConfig.colorKeywords || {},\n        valueKeywords = parserConfig.valueKeywords || {},\n        allowNested = parserConfig.allowNested,\n        lineComment = parserConfig.lineComment,\n        supportsAtComponent = parserConfig.supportsAtComponent === true,\n        highlightNonStandardPropertyKeywords = config.highlightNonStandardPropertyKeywords !== false;\n    var type, override;\n\n    function ret(style, tp) {\n      type = tp;\n      return style;\n    } // Tokenizers\n\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (tokenHooks[ch]) {\n        var result = tokenHooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (ch == \"@\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"def\", stream.current());\n      } else if (ch == \"=\" || (ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) {\n        return ret(null, \"compare\");\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \"#\") {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"atom\", \"hash\");\n      } else if (ch == \"!\") {\n        stream.match(/^\\s*\\w*/);\n        return ret(\"keyword\", \"important\");\n      } else if (/\\d/.test(ch) || ch == \".\" && stream.eat(/\\d/)) {\n        stream.eatWhile(/[\\w.%]/);\n        return ret(\"number\", \"unit\");\n      } else if (ch === \"-\") {\n        if (/[\\d.]/.test(stream.peek())) {\n          stream.eatWhile(/[\\w.%]/);\n          return ret(\"number\", \"unit\");\n        } else if (stream.match(/^-[\\w\\\\\\-]*/)) {\n          stream.eatWhile(/[\\w\\\\\\-]/);\n          if (stream.match(/^\\s*:/, false)) return ret(\"variable-2\", \"variable-definition\");\n          return ret(\"variable-2\", \"variable\");\n        } else if (stream.match(/^\\w+-/)) {\n          return ret(\"meta\", \"meta\");\n        }\n      } else if (/[,+>*\\/]/.test(ch)) {\n        return ret(null, \"select-op\");\n      } else if (ch == \".\" && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\n        return ret(\"qualifier\", \"qualifier\");\n      } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\n        return ret(null, ch);\n      } else if (stream.match(/^[\\w-.]+(?=\\()/)) {\n        if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {\n          state.tokenize = tokenParenthesized;\n        }\n\n        return ret(\"variable callee\", \"variable\");\n      } else if (/[\\w\\\\\\-]/.test(ch)) {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        return ret(\"property\", \"word\");\n      } else {\n        return ret(null, null);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            if (quote == \")\") stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenParenthesized(stream, state) {\n      stream.next(); // Must be '('\n\n      if (!stream.match(/^\\s*[\\\"\\')]/, false)) state.tokenize = tokenString(\")\");else state.tokenize = null;\n      return ret(null, \"(\");\n    } // Context management\n\n\n    function Context(type, indent, prev) {\n      this.type = type;\n      this.indent = indent;\n      this.prev = prev;\n    }\n\n    function pushContext(state, stream, type, indent) {\n      state.context = new Context(type, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);\n      return type;\n    }\n\n    function popContext(state) {\n      if (state.context.prev) state.context = state.context.prev;\n      return state.context.type;\n    }\n\n    function pass(type, stream, state) {\n      return states[state.context.type](type, stream, state);\n    }\n\n    function popAndPass(type, stream, state, n) {\n      for (var i = n || 1; i > 0; i--) {\n        state.context = state.context.prev;\n      }\n\n      return pass(type, stream, state);\n    } // Parser\n\n\n    function wordAsValue(stream) {\n      var word = stream.current().toLowerCase();\n      if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"variable\";\n    }\n\n    var states = {};\n\n    states.top = function (type, stream, state) {\n      if (type == \"{\") {\n        return pushContext(state, stream, \"block\");\n      } else if (type == \"}\" && state.context.prev) {\n        return popContext(state);\n      } else if (supportsAtComponent && /@component/i.test(type)) {\n        return pushContext(state, stream, \"atComponentBlock\");\n      } else if (/^@(-moz-)?document$/i.test(type)) {\n        return pushContext(state, stream, \"documentTypes\");\n      } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {\n        return pushContext(state, stream, \"atBlock\");\n      } else if (/^@(font-face|counter-style)/i.test(type)) {\n        state.stateArg = type;\n        return \"restricted_atBlock_before\";\n      } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {\n        return \"keyframes\";\n      } else if (type && type.charAt(0) == \"@\") {\n        return pushContext(state, stream, \"at\");\n      } else if (type == \"hash\") {\n        override = \"builtin\";\n      } else if (type == \"word\") {\n        override = \"tag\";\n      } else if (type == \"variable-definition\") {\n        return \"maybeprop\";\n      } else if (type == \"interpolation\") {\n        return pushContext(state, stream, \"interpolation\");\n      } else if (type == \":\") {\n        return \"pseudo\";\n      } else if (allowNested && type == \"(\") {\n        return pushContext(state, stream, \"parens\");\n      }\n\n      return state.context.type;\n    };\n\n    states.block = function (type, stream, state) {\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n\n        if (propertyKeywords.hasOwnProperty(word)) {\n          override = \"property\";\n          return \"maybeprop\";\n        } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\n          override = highlightNonStandardPropertyKeywords ? \"string-2\" : \"property\";\n          return \"maybeprop\";\n        } else if (allowNested) {\n          override = stream.match(/^\\s*:(?:\\s|$)/, false) ? \"property\" : \"tag\";\n          return \"block\";\n        } else {\n          override += \" error\";\n          return \"maybeprop\";\n        }\n      } else if (type == \"meta\") {\n        return \"block\";\n      } else if (!allowNested && (type == \"hash\" || type == \"qualifier\")) {\n        override = \"error\";\n        return \"block\";\n      } else {\n        return states.top(type, stream, state);\n      }\n    };\n\n    states.maybeprop = function (type, stream, state) {\n      if (type == \":\") return pushContext(state, stream, \"prop\");\n      return pass(type, stream, state);\n    };\n\n    states.prop = function (type, stream, state) {\n      if (type == \";\") return popContext(state);\n      if (type == \"{\" && allowNested) return pushContext(state, stream, \"propBlock\");\n      if (type == \"}\" || type == \"{\") return popAndPass(type, stream, state);\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n\n      if (type == \"hash\" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {\n        override += \" error\";\n      } else if (type == \"word\") {\n        wordAsValue(stream);\n      } else if (type == \"interpolation\") {\n        return pushContext(state, stream, \"interpolation\");\n      }\n\n      return \"prop\";\n    };\n\n    states.propBlock = function (type, _stream, state) {\n      if (type == \"}\") return popContext(state);\n\n      if (type == \"word\") {\n        override = \"property\";\n        return \"maybeprop\";\n      }\n\n      return state.context.type;\n    };\n\n    states.parens = function (type, stream, state) {\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n      if (type == \")\") return popContext(state);\n      if (type == \"(\") return pushContext(state, stream, \"parens\");\n      if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n      if (type == \"word\") wordAsValue(stream);\n      return \"parens\";\n    };\n\n    states.pseudo = function (type, stream, state) {\n      if (type == \"meta\") return \"pseudo\";\n\n      if (type == \"word\") {\n        override = \"variable-3\";\n        return state.context.type;\n      }\n\n      return pass(type, stream, state);\n    };\n\n    states.documentTypes = function (type, stream, state) {\n      if (type == \"word\" && documentTypes.hasOwnProperty(stream.current())) {\n        override = \"tag\";\n        return state.context.type;\n      } else {\n        return states.atBlock(type, stream, state);\n      }\n    };\n\n    states.atBlock = function (type, stream, state) {\n      if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n      if (type == \"}\" || type == \";\") return popAndPass(type, stream, state);\n      if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\");\n      if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n\n      if (type == \"word\") {\n        var word = stream.current().toLowerCase();\n        if (word == \"only\" || word == \"not\" || word == \"and\" || word == \"or\") override = \"keyword\";else if (mediaTypes.hasOwnProperty(word)) override = \"attribute\";else if (mediaFeatures.hasOwnProperty(word)) override = \"property\";else if (mediaValueKeywords.hasOwnProperty(word)) override = \"keyword\";else if (propertyKeywords.hasOwnProperty(word)) override = \"property\";else if (nonStandardPropertyKeywords.hasOwnProperty(word)) override = highlightNonStandardPropertyKeywords ? \"string-2\" : \"property\";else if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"error\";\n      }\n\n      return state.context.type;\n    };\n\n    states.atComponentBlock = function (type, stream, state) {\n      if (type == \"}\") return popAndPass(type, stream, state);\n      if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\", false);\n      if (type == \"word\") override = \"error\";\n      return state.context.type;\n    };\n\n    states.atBlock_parens = function (type, stream, state) {\n      if (type == \")\") return popContext(state);\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state, 2);\n      return states.atBlock(type, stream, state);\n    };\n\n    states.restricted_atBlock_before = function (type, stream, state) {\n      if (type == \"{\") return pushContext(state, stream, \"restricted_atBlock\");\n\n      if (type == \"word\" && state.stateArg == \"@counter-style\") {\n        override = \"variable\";\n        return \"restricted_atBlock_before\";\n      }\n\n      return pass(type, stream, state);\n    };\n\n    states.restricted_atBlock = function (type, stream, state) {\n      if (type == \"}\") {\n        state.stateArg = null;\n        return popContext(state);\n      }\n\n      if (type == \"word\") {\n        if (state.stateArg == \"@font-face\" && !fontProperties.hasOwnProperty(stream.current().toLowerCase()) || state.stateArg == \"@counter-style\" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())) override = \"error\";else override = \"property\";\n        return \"maybeprop\";\n      }\n\n      return \"restricted_atBlock\";\n    };\n\n    states.keyframes = function (type, stream, state) {\n      if (type == \"word\") {\n        override = \"variable\";\n        return \"keyframes\";\n      }\n\n      if (type == \"{\") return pushContext(state, stream, \"top\");\n      return pass(type, stream, state);\n    };\n\n    states.at = function (type, stream, state) {\n      if (type == \";\") return popContext(state);\n      if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n      if (type == \"word\") override = \"tag\";else if (type == \"hash\") override = \"builtin\";\n      return \"at\";\n    };\n\n    states.interpolation = function (type, stream, state) {\n      if (type == \"}\") return popContext(state);\n      if (type == \"{\" || type == \";\") return popAndPass(type, stream, state);\n      if (type == \"word\") override = \"variable\";else if (type != \"variable\" && type != \"(\" && type != \")\") override = \"error\";\n      return \"interpolation\";\n    };\n\n    return {\n      startState: function startState(base) {\n        return {\n          tokenize: null,\n          state: inline ? \"block\" : \"top\",\n          stateArg: null,\n          context: new Context(inline ? \"block\" : \"top\", base || 0, null)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.tokenize && stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n\n        if (style && _typeof(style) == \"object\") {\n          type = style[1];\n          style = style[0];\n        }\n\n        override = style;\n        if (type != \"comment\") state.state = states[state.state](type, stream, state);\n        return override;\n      },\n      indent: function indent(state, textAfter) {\n        var cx = state.context,\n            ch = textAfter && textAfter.charAt(0);\n        var indent = cx.indent;\n        if (cx.type == \"prop\" && (ch == \"}\" || ch == \")\")) cx = cx.prev;\n\n        if (cx.prev) {\n          if (ch == \"}\" && (cx.type == \"block\" || cx.type == \"top\" || cx.type == \"interpolation\" || cx.type == \"restricted_atBlock\")) {\n            // Resume indentation from parent context.\n            cx = cx.prev;\n            indent = cx.indent;\n          } else if (ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") || ch == \"{\" && (cx.type == \"at\" || cx.type == \"atBlock\")) {\n            // Dedent relative to current context.\n            indent = Math.max(0, cx.indent - indentUnit);\n          }\n        }\n\n        return indent;\n      },\n      electricChars: \"}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      lineComment: lineComment,\n      fold: \"brace\"\n    };\n  });\n\n  function keySet(array) {\n    var keys = {};\n\n    for (var i = 0; i < array.length; ++i) {\n      keys[array[i].toLowerCase()] = true;\n    }\n\n    return keys;\n  }\n\n  var documentTypes_ = [\"domain\", \"regexp\", \"url\", \"url-prefix\"],\n      documentTypes = keySet(documentTypes_);\n  var mediaTypes_ = [\"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\", \"tty\", \"tv\", \"embossed\"],\n      mediaTypes = keySet(mediaTypes_);\n  var mediaFeatures_ = [\"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\", \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\", \"min-device-height\", \"max-device-height\", \"aspect-ratio\", \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\", \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\", \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\", \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\", \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"orientation\", \"device-pixel-ratio\", \"min-device-pixel-ratio\", \"max-device-pixel-ratio\", \"pointer\", \"any-pointer\", \"hover\", \"any-hover\", \"prefers-color-scheme\", \"dynamic-range\", \"video-dynamic-range\"],\n      mediaFeatures = keySet(mediaFeatures_);\n  var mediaValueKeywords_ = [\"landscape\", \"portrait\", \"none\", \"coarse\", \"fine\", \"on-demand\", \"hover\", \"interlace\", \"progressive\", \"dark\", \"light\", \"standard\", \"high\"],\n      mediaValueKeywords = keySet(mediaValueKeywords_);\n  var propertyKeywords_ = [\"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\", \"alignment-baseline\", \"all\", \"anchor-point\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"appearance\", \"azimuth\", \"backdrop-filter\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-position-x\", \"background-position-y\", \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\", \"bleed\", \"block-size\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\", \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"caret-color\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"contain\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"dominant-baseline\", \"drop-initial-after-adjust\", \"drop-initial-after-align\", \"drop-initial-before-adjust\", \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\", \"elevation\", \"empty-cells\", \"fit\", \"fit-content\", \"fit-position\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-family\", \"font-feature-settings\", \"font-kerning\", \"font-language-override\", \"font-optical-sizing\", \"font-size\", \"font-size-adjust\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-variation-settings\", \"font-weight\", \"gap\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-gap\", \"grid-column-start\", \"grid-gap\", \"grid-row\", \"grid-row-end\", \"grid-row-gap\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"inline-box-align\", \"inset\", \"inset-block\", \"inset-block-end\", \"inset-block-start\", \"inset-inline\", \"inset-inline-end\", \"inset-inline-start\", \"isolation\", \"justify-content\", \"justify-items\", \"justify-self\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"line-height-step\", \"line-stacking\", \"line-stacking-ruby\", \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"marks\", \"marquee-direction\", \"marquee-loop\", \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"mask-clip\", \"mask-composite\", \"mask-image\", \"mask-mode\", \"mask-origin\", \"mask-position\", \"mask-repeat\", \"mask-size\", \"mask-type\", \"max-block-size\", \"max-height\", \"max-inline-size\", \"max-width\", \"min-block-size\", \"min-height\", \"min-inline-size\", \"min-width\", \"mix-blend-mode\", \"move-to\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\", \"offset\", \"offset-anchor\", \"offset-distance\", \"offset-path\", \"offset-position\", \"offset-rotate\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\", \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pitch\", \"pitch-range\", \"place-content\", \"place-items\", \"place-self\", \"play-during\", \"position\", \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\", \"region-break-before\", \"region-break-inside\", \"region-fragment\", \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\", \"right\", \"rotate\", \"rotation\", \"rotation-point\", \"row-gap\", \"ruby-align\", \"ruby-overhang\", \"ruby-position\", \"ruby-span\", \"scale\", \"scroll-behavior\", \"scroll-margin\", \"scroll-margin-block\", \"scroll-margin-block-end\", \"scroll-margin-block-start\", \"scroll-margin-bottom\", \"scroll-margin-inline\", \"scroll-margin-inline-end\", \"scroll-margin-inline-start\", \"scroll-margin-left\", \"scroll-margin-right\", \"scroll-margin-top\", \"scroll-padding\", \"scroll-padding-block\", \"scroll-padding-block-end\", \"scroll-padding-block-start\", \"scroll-padding-bottom\", \"scroll-padding-inline\", \"scroll-padding-inline-end\", \"scroll-padding-inline-start\", \"scroll-padding-left\", \"scroll-padding-right\", \"scroll-padding-top\", \"scroll-snap-align\", \"scroll-snap-type\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\", \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\", \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\", \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\", \"target-position\", \"text-align\", \"text-align-last\", \"text-combine-upright\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\", \"text-decoration-skip-ink\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\", \"text-indent\", \"text-justify\", \"text-orientation\", \"text-outline\", \"text-overflow\", \"text-rendering\", \"text-shadow\", \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\", \"text-wrap\", \"top\", \"touch-action\", \"transform\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"translate\", \"unicode-bidi\", \"user-select\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"writing-mode\", \"z-index\", // SVG-specific\n  \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\", \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\", \"color-interpolation\", \"color-interpolation-filters\", \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\", \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"paint-order\", \"shape-rendering\", \"stroke\", \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\", \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\", \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\"],\n      propertyKeywords = keySet(propertyKeywords_);\n  var nonStandardPropertyKeywords_ = [\"accent-color\", \"aspect-ratio\", \"border-block\", \"border-block-color\", \"border-block-end\", \"border-block-end-color\", \"border-block-end-style\", \"border-block-end-width\", \"border-block-start\", \"border-block-start-color\", \"border-block-start-style\", \"border-block-start-width\", \"border-block-style\", \"border-block-width\", \"border-inline\", \"border-inline-color\", \"border-inline-end\", \"border-inline-end-color\", \"border-inline-end-style\", \"border-inline-end-width\", \"border-inline-start\", \"border-inline-start-color\", \"border-inline-start-style\", \"border-inline-start-width\", \"border-inline-style\", \"border-inline-width\", \"content-visibility\", \"margin-block\", \"margin-block-end\", \"margin-block-start\", \"margin-inline\", \"margin-inline-end\", \"margin-inline-start\", \"overflow-anchor\", \"overscroll-behavior\", \"padding-block\", \"padding-block-end\", \"padding-block-start\", \"padding-inline\", \"padding-inline-end\", \"padding-inline-start\", \"scroll-snap-stop\", \"scrollbar-3d-light-color\", \"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\", \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\", \"scrollbar-track-color\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"shape-inside\", \"zoom\"],\n      nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\n  var fontProperties_ = [\"font-display\", \"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\", \"font-stretch\", \"font-weight\", \"font-style\"],\n      fontProperties = keySet(fontProperties_);\n  var counterDescriptors_ = [\"additive-symbols\", \"fallback\", \"negative\", \"pad\", \"prefix\", \"range\", \"speak-as\", \"suffix\", \"symbols\", \"system\"],\n      counterDescriptors = keySet(counterDescriptors_);\n  var colorKeywords_ = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkgrey\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkslategrey\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dimgrey\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightgrey\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightslategrey\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"slategrey\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"],\n      colorKeywords = keySet(colorKeywords_);\n  var valueKeywords_ = [\"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\", \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\", \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"auto-flow\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"axis-pan\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\", \"bengali\", \"blink\", \"block\", \"block-axis\", \"blur\", \"bold\", \"bolder\", \"border\", \"border-box\", \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"brightness\", \"bullets\", \"button\", \"button-bevel\", \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\", \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\", \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"color\", \"color-burn\", \"color-dodge\", \"column\", \"column-reverse\", \"compact\", \"condensed\", \"conic-gradient\", \"contain\", \"content\", \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"contrast\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\", \"cross\", \"crosshair\", \"cubic-bezier\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\", \"decimal-leading-zero\", \"default\", \"default-button\", \"dense\", \"destination-atop\", \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"difference\", \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"drop-shadow\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\", \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\", \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\", \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\", \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\", \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\", \"ethiopic-numeric\", \"ew-resize\", \"exclusion\", \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fill-box\", \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\", \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"grayscale\", \"graytext\", \"grid\", \"groove\", \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hard-light\", \"hebrew\", \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\", \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"hue-rotate\", \"icon\", \"ignore\", \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-grid\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\", \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\", \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\", \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\", \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\", \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lower-roman\", \"lowercase\", \"ltr\", \"luminosity\", \"malayalam\", \"manipulation\", \"match\", \"matrix\", \"matrix3d\", \"media-controls-background\", \"media-current-time-display\", \"media-fullscreen-button\", \"media-mute-button\", \"media-play-button\", \"media-return-to-realtime-button\", \"media-rewind-button\", \"media-seek-back-button\", \"media-seek-forward-button\", \"media-slider\", \"media-sliderthumb\", \"media-time-remaining-display\", \"media-volume-slider\", \"media-volume-slider-container\", \"media-volume-sliderthumb\", \"medium\", \"menu\", \"menulist\", \"menulist-button\", \"menulist-text\", \"menulist-textfield\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\", \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"multiple_mask_images\", \"multiply\", \"myanmar\", \"n-resize\", \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"opacity\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\", \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"pinch-zoom\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeating-conic-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\", \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\", \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"saturate\", \"saturation\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\", \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"self-start\", \"self-end\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"sepia\", \"serif\", \"show\", \"sidama\", \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\", \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"somali\", \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"space-around\", \"space-between\", \"space-evenly\", \"spell-out\", \"square\", \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"stroke-box\", \"sub\", \"subpixel-antialiased\", \"svg_masks\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"system-ui\", \"table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\", \"tamil\", \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\", \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\", \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\", \"trad-chinese-formal\", \"trad-chinese-informal\", \"transform\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"unidirectional-pan\", \"unset\", \"up\", \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\", \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"view-box\", \"visible\", \"visibleFill\", \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\", \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\"],\n      valueKeywords = keySet(valueKeywords_);\n  var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_).concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_).concat(valueKeywords_);\n  CodeMirror.registerHelper(\"hintWords\", \"css\", allWords);\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = null;\n        break;\n      }\n\n      maybeEnd = ch == \"*\";\n    }\n\n    return [\"comment\", \"comment\"];\n  }\n\n  CodeMirror.defineMIME(\"text/css\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\"\n  });\n  CodeMirror.defineMIME(\"text/x-scss\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    lineComment: \"//\",\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \":\": function _(stream) {\n        if (stream.match(/^\\s*\\{/, false)) return [null, null];\n        return false;\n      },\n      \"$\": function $(stream) {\n        stream.match(/^[\\w-]+/);\n        if (stream.match(/^\\s*:/, false)) return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"#\": function _(stream) {\n        if (!stream.eat(\"{\")) return false;\n        return [null, \"interpolation\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"scss\"\n  });\n  CodeMirror.defineMIME(\"text/x-less\", {\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    mediaValueKeywords: mediaValueKeywords,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    fontProperties: fontProperties,\n    allowNested: true,\n    lineComment: \"//\",\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return [\"comment\", \"comment\"];\n        } else if (stream.eat(\"*\")) {\n          state.tokenize = tokenCComment;\n          return tokenCComment(stream, state);\n        } else {\n          return [\"operator\", \"operator\"];\n        }\n      },\n      \"@\": function _(stream) {\n        if (stream.eat(\"{\")) return [null, \"interpolation\"];\n        if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/i, false)) return false;\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        if (stream.match(/^\\s*:/, false)) return [\"variable-2\", \"variable-definition\"];\n        return [\"variable-2\", \"variable\"];\n      },\n      \"&\": function _() {\n        return [\"atom\", \"atom\"];\n      }\n    },\n    name: \"css\",\n    helperType: \"less\"\n  });\n  CodeMirror.defineMIME(\"text/x-gss\", {\n    documentTypes: documentTypes,\n    mediaTypes: mediaTypes,\n    mediaFeatures: mediaFeatures,\n    propertyKeywords: propertyKeywords,\n    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n    fontProperties: fontProperties,\n    counterDescriptors: counterDescriptors,\n    colorKeywords: colorKeywords,\n    valueKeywords: valueKeywords,\n    supportsAtComponent: true,\n    tokenHooks: {\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n    },\n    name: \"css\",\n    helperType: \"gss\"\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/css/css.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/django/django.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/django/django.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../htmlmixed/htmlmixed */ \"./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js\"), __webpack_require__(/*! ../../addon/mode/overlay */ \"./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../htmlmixed/htmlmixed */ \"./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js\"), __webpack_require__(/*! ../../addon/mode/overlay */ \"./resources/assets/vendor/libs/codemirror/addon/mode/overlay.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"django:inner\", function () {\n    var keywords = [\"block\", \"endblock\", \"for\", \"endfor\", \"true\", \"false\", \"filter\", \"endfilter\", \"loop\", \"none\", \"self\", \"super\", \"if\", \"elif\", \"endif\", \"as\", \"else\", \"import\", \"with\", \"endwith\", \"without\", \"context\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"extends\", \"include\", \"load\", \"comment\", \"endcomment\", \"empty\", \"url\", \"static\", \"trans\", \"blocktrans\", \"endblocktrans\", \"now\", \"regroup\", \"lorem\", \"ifchanged\", \"endifchanged\", \"firstof\", \"debug\", \"cycle\", \"csrf_token\", \"autoescape\", \"endautoescape\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"verbatim\", \"endverbatim\", \"widthratio\"],\n        filters = [\"add\", \"addslashes\", \"capfirst\", \"center\", \"cut\", \"date\", \"default\", \"default_if_none\", \"dictsort\", \"dictsortreversed\", \"divisibleby\", \"escape\", \"escapejs\", \"filesizeformat\", \"first\", \"floatformat\", \"force_escape\", \"get_digit\", \"iriencode\", \"join\", \"last\", \"length\", \"length_is\", \"linebreaks\", \"linebreaksbr\", \"linenumbers\", \"ljust\", \"lower\", \"make_list\", \"phone2numeric\", \"pluralize\", \"pprint\", \"random\", \"removetags\", \"rjust\", \"safe\", \"safeseq\", \"slice\", \"slugify\", \"stringformat\", \"striptags\", \"time\", \"timesince\", \"timeuntil\", \"title\", \"truncatechars\", \"truncatechars_html\", \"truncatewords\", \"truncatewords_html\", \"unordered_list\", \"upper\", \"urlencode\", \"urlize\", \"urlizetrunc\", \"wordcount\", \"wordwrap\", \"yesno\"],\n        operators = [\"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"],\n        wordOperators = [\"in\", \"not\", \"or\", \"and\"];\n    keywords = new RegExp(\"^\\\\b(\" + keywords.join(\"|\") + \")\\\\b\");\n    filters = new RegExp(\"^\\\\b(\" + filters.join(\"|\") + \")\\\\b\");\n    operators = new RegExp(\"^\\\\b(\" + operators.join(\"|\") + \")\\\\b\");\n    wordOperators = new RegExp(\"^\\\\b(\" + wordOperators.join(\"|\") + \")\\\\b\"); // We have to return \"null\" instead of null, in order to avoid string\n    // styling as the default, when using Django templates inside HTML\n    // element attributes\n\n    function tokenBase(stream, state) {\n      // Attempt to identify a variable, template or comment tag respectively\n      if (stream.match(\"{{\")) {\n        state.tokenize = inVariable;\n        return \"tag\";\n      } else if (stream.match(\"{%\")) {\n        state.tokenize = inTag;\n        return \"tag\";\n      } else if (stream.match(\"{#\")) {\n        state.tokenize = inComment;\n        return \"comment\";\n      } // Ignore completely any stream series that do not match the\n      // Django template opening tags.\n\n\n      while (stream.next() != null && !stream.match(/\\{[{%#]/, false)) {}\n\n      return null;\n    } // A string can be included in either single or double quotes (this is\n    // the delimiter). Mark everything as a string until the start delimiter\n    // occurs again.\n\n\n    function inString(delimiter, previousTokenizer) {\n      return function (stream, state) {\n        if (!state.escapeNext && stream.eat(delimiter)) {\n          state.tokenize = previousTokenizer;\n        } else {\n          if (state.escapeNext) {\n            state.escapeNext = false;\n          }\n\n          var ch = stream.next(); // Take into account the backslash for escaping characters, such as\n          // the string delimiter.\n\n          if (ch == \"\\\\\") {\n            state.escapeNext = true;\n          }\n        }\n\n        return \"string\";\n      };\n    } // Apply Django template variable syntax highlighting\n\n\n    function inVariable(stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        } // Dot followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for property.\");\n        }\n      } // Attempt to match a pipe that precedes a filter\n\n\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        } // Pipe followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for filter.\");\n        }\n      } // Highlight properties\n\n\n      if (state.waitProperty) {\n        state.waitProperty = false;\n\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true; // A property can be followed by another property\n\n          state.waitPipe = true; // A property can be followed by a filter\n\n          return \"property\";\n        }\n      } // Highlight filters\n\n\n      if (state.waitFilter) {\n        state.waitFilter = false;\n\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      } // Ignore all white spaces\n\n\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      } // Identify numbers\n\n\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      } // Identify strings\n\n\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      } // Attempt to find the variable\n\n\n      if (stream.match(/\\b(\\w+)\\b/) && !state.foundVariable) {\n        state.waitDot = true;\n        state.waitPipe = true; // A property can be followed by a filter\n\n        return \"variable\";\n      } // If found closing tag reset\n\n\n      if (stream.match(\"}}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        state.tokenize = tokenBase;\n        return \"tag\";\n      } // If nothing was found, advance to the next character\n\n\n      stream.next();\n      return \"null\";\n    }\n\n    function inTag(stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        } // Dot followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for property.\");\n        }\n      } // Attempt to match a pipe that precedes a filter\n\n\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        } // Pipe followed by a non-word character should be considered an error.\n\n\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for filter.\");\n        }\n      } // Highlight properties\n\n\n      if (state.waitProperty) {\n        state.waitProperty = false;\n\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true; // A property can be followed by another property\n\n          state.waitPipe = true; // A property can be followed by a filter\n\n          return \"property\";\n        }\n      } // Highlight filters\n\n\n      if (state.waitFilter) {\n        state.waitFilter = false;\n\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      } // Ignore all white spaces\n\n\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      } // Identify numbers\n\n\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      } // Identify strings\n\n\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      } // Attempt to match an operator\n\n\n      if (stream.match(operators)) {\n        return \"operator\";\n      } // Attempt to match a word operator\n\n\n      if (stream.match(wordOperators)) {\n        return \"keyword\";\n      } // Attempt to match a keyword\n\n\n      var keywordMatch = stream.match(keywords);\n\n      if (keywordMatch) {\n        if (keywordMatch[0] == \"comment\") {\n          state.blockCommentTag = true;\n        }\n\n        return \"keyword\";\n      } // Attempt to match a variable\n\n\n      if (stream.match(/\\b(\\w+)\\b/)) {\n        state.waitDot = true;\n        state.waitPipe = true; // A property can be followed by a filter\n\n        return \"variable\";\n      } // If found closing tag reset\n\n\n      if (stream.match(\"%}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null; // If the tag that closes is a block comment tag, we want to mark the\n        // following code as comment, until the tag closes.\n\n        if (state.blockCommentTag) {\n          state.blockCommentTag = false; // Release the \"lock\"\n\n          state.tokenize = inBlockComment;\n        } else {\n          state.tokenize = tokenBase;\n        }\n\n        return \"tag\";\n      } // If nothing was found, advance to the next character\n\n\n      stream.next();\n      return \"null\";\n    } // Mark everything as comment inside the tag and the tag itself.\n\n\n    function inComment(stream, state) {\n      if (stream.match(/^.*?#\\}/)) state.tokenize = tokenBase;else stream.skipToEnd();\n      return \"comment\";\n    } // Mark everything as a comment until the `blockcomment` tag closes.\n\n\n    function inBlockComment(stream, state) {\n      if (stream.match(/\\{%\\s*endcomment\\s*%\\}/, false)) {\n        state.tokenize = inTag;\n        stream.match(\"{%\");\n        return \"tag\";\n      } else {\n        stream.next();\n        return \"comment\";\n      }\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function token(stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{% comment %}\",\n      blockCommentEnd: \"{% endcomment %}\"\n    };\n  });\n  CodeMirror.defineMode(\"django\", function (config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var djangoInner = CodeMirror.getMode(config, \"django:inner\");\n    return CodeMirror.overlayMode(htmlBase, djangoInner);\n  });\n  CodeMirror.defineMIME(\"text/x-django\", \"django\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/django/django.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../javascript/javascript */ \"./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\"), __webpack_require__(/*! ../css/css */ \"./resources/assets/vendor/libs/codemirror/mode/css/css.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag,\n      allowMissingTagName: parserConfig.allowMissingTagName\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter, line);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/htmlmixed/htmlmixed.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var trackScope = parserConfig.trackScope !== false;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\" && stream.peek() == \"!\") {\n        stream.skipToEnd();\n        return ret(\"meta\", \"meta\");\n      } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n        return ret(\"variable\", \"property\");\n      } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-|&?]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/`]/.test(ch)) {\n          for (;; --pos) {\n            if (pos == 0) return;\n            var next = stream.string.charAt(pos - 1);\n\n            if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n              pos--;\n              break;\n            }\n          }\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"import\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      if (!trackScope) return false;\n\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) {\n          if (v.name == varname) return true;\n        }\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n      if (!trackScope) return;\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    pushcontext.lex = pushblockcontext.lex = true;\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n          indent = outer.indented;\n        }\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, statement, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(maybeexpression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(maybeexpression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        if (sep && sep.indexOf(\";\") > -1) return pass(what);\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) {\n        cx.cc.push(arguments[i]);\n      }\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function maybetypeOrIn(type, value) {\n      if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (value == \"|\" || value == \"&\") return cont(typeexpr);\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n\n      if (type == \"quasi\") {\n        return pass(quasiType, afterType);\n      }\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprops(type) {\n      if (type.match(/[\\}\\)\\]]/)) return cont();\n      if (type == \",\" || type == \";\") return cont(typeprops);\n      return pass(typeprop, typeprops);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n      } else if (type == \"(\") {\n        return pass(functiondecl, typeprop);\n      } else if (!type.match(/[;\\}\\)\\],]/)) {\n        return cont();\n      }\n    }\n\n    function quasiType(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n      return cont(typeexpr, continueQuasiType);\n    }\n\n    function continueQuasiType(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasiType);\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      if (type == \"spread\") return cont(typearg);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n\n      if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, forspec2);\n      if (type == \"variable\") return cont(forspec2);\n      return pass(forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \")\") return cont();\n      if (type == \";\") return cont(forspec2);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression, forspec2);\n      }\n\n      return pass(expression, forspec2);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function functiondecl(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondecl);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondecl);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n\n    function typename(type, value) {\n      if (type == \"keyword\" || type == \"variable\") {\n        cx.marked = \"type\";\n        return cont(typename);\n      } else if (value == \"<\") {\n        return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n      }\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(classfield, classBody);\n      }\n\n      if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (isTS && type == \"(\") return pass(functiondecl, classBody);\n      if (type == \";\" || type == \",\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"!\") return cont(classfield);\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      var context = cx.state.lexical.prev,\n          isInterface = context && context.info == \"interface\";\n      return pass(isInterface ? functiondecl : functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      if (type == \".\") return pass(maybeoperatorComma);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && _typeof(parserConfig.globalVars) == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n          lexical = lexical.prev;\n        }\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function skipExpression(state) {\n        parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null));\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/manifest+json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/javascript/javascript.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/xml/xml.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/xml/xml.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function lower(tagName) {\n      return tagName && tagName.toLowerCase();\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName || \"\";\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(lower(parentTagName)) || !config.contextGrabbers[lower(parentTagName)].hasOwnProperty(lower(nextTagName))) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(lower(state.context.tagName))) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(lower(tagName))) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(lower(context.tagName))) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[lower(context.tagName)];\n            if (grabbers && grabbers.hasOwnProperty(lower(tagAfter[2]))) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/django/django.js");
/******/ 	
/******/ })()
;