/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/mode/markdown/markdown.js":
/*!***************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/markdown/markdown.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../meta */ \"./resources/assets/vendor/libs/codemirror/mode/meta.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ../xml/xml */ \"./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\"), __webpack_require__(/*! ../meta */ \"./resources/assets/vendor/libs/codemirror/mode/meta.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"markdown\", function (cmCfg, modeCfg) {\n    var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n    var htmlModeMissing = htmlMode.name == \"null\";\n\n    function getMode(name) {\n      if (CodeMirror.findModeByName) {\n        var found = CodeMirror.findModeByName(name);\n        if (found) name = found.mime || found.mimes[0];\n      }\n\n      var mode = CodeMirror.getMode(cmCfg, name);\n      return mode.name == \"null\" ? null : mode;\n    } // Should characters that affect highlighting be highlighted separate?\n    // Does not include characters that will be output (such as `1.` and `-` for lists)\n\n\n    if (modeCfg.highlightFormatting === undefined) modeCfg.highlightFormatting = false; // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n    // Excess `>` will emit `error` token.\n\n    if (modeCfg.maxBlockquoteDepth === undefined) modeCfg.maxBlockquoteDepth = 0; // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n\n    if (modeCfg.taskLists === undefined) modeCfg.taskLists = false; // Turn on strikethrough syntax\n\n    if (modeCfg.strikethrough === undefined) modeCfg.strikethrough = false;\n    if (modeCfg.emoji === undefined) modeCfg.emoji = false;\n    if (modeCfg.fencedCodeBlockHighlighting === undefined) modeCfg.fencedCodeBlockHighlighting = true;\n    if (modeCfg.fencedCodeBlockDefaultMode === undefined) modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n    if (modeCfg.xml === undefined) modeCfg.xml = true; // Allow token types to be overridden by user-provided token types.\n\n    if (modeCfg.tokenTypeOverrides === undefined) modeCfg.tokenTypeOverrides = {};\n    var tokenTypes = {\n      header: \"header\",\n      code: \"comment\",\n      quote: \"quote\",\n      list1: \"variable-2\",\n      list2: \"variable-3\",\n      list3: \"keyword\",\n      hr: \"hr\",\n      image: \"image\",\n      imageAltText: \"image-alt-text\",\n      imageMarker: \"image-marker\",\n      formatting: \"formatting\",\n      linkInline: \"link\",\n      linkEmail: \"link\",\n      linkText: \"link\",\n      linkHref: \"string\",\n      em: \"em\",\n      strong: \"strong\",\n      strikethrough: \"strikethrough\",\n      emoji: \"builtin\"\n    };\n\n    for (var tokenType in tokenTypes) {\n      if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n        tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n      }\n    }\n\n    var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/,\n        listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/,\n        taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n    ,\n        atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/,\n        setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/,\n        textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/,\n        fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/,\n        linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n    ,\n        punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n        expandedTab = \"    \"; // CommonMark specifies tab as 4 spaces\n\n    function switchInline(stream, state, f) {\n      state.f = state.inline = f;\n      return f(stream, state);\n    }\n\n    function switchBlock(stream, state, f) {\n      state.f = state.block = f;\n      return f(stream, state);\n    }\n\n    function lineIsEmpty(line) {\n      return !line || !/\\S/.test(line.string);\n    } // Blocks\n\n\n    function blankLine(state) {\n      // Reset linkTitle state\n      state.linkTitle = false;\n      state.linkHref = false;\n      state.linkText = false; // Reset EM state\n\n      state.em = false; // Reset STRONG state\n\n      state.strong = false; // Reset strikethrough state\n\n      state.strikethrough = false; // Reset state.quote\n\n      state.quote = 0; // Reset state.indentedCode\n\n      state.indentedCode = false;\n\n      if (state.f == htmlBlock) {\n        var exit = htmlModeMissing;\n\n        if (!exit) {\n          var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n          exit = inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText;\n        }\n\n        if (exit) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      } // Reset state.trailingSpace\n\n\n      state.trailingSpace = 0;\n      state.trailingSpaceNewLine = false; // Mark this line as blank\n\n      state.prevLine = state.thisLine;\n      state.thisLine = {\n        stream: null\n      };\n      return null;\n    }\n\n    function blockNormal(stream, state) {\n      var firstTokenOnLine = stream.column() === state.indentation;\n      var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n      var prevLineIsIndentedCode = state.indentedCode;\n      var prevLineIsHr = state.prevLine.hr;\n      var prevLineIsList = state.list !== false;\n      var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n      state.indentedCode = false;\n      var lineIndentation = state.indentation; // compute once per line (on first token)\n\n      if (state.indentationDiff === null) {\n        state.indentationDiff = state.indentation;\n\n        if (prevLineIsList) {\n          state.list = null; // While this list item's marker's indentation is less than the deepest\n          //  list item's content's indentation,pop the deepest list item\n          //  indentation off the stack, and update block indentation state\n\n          while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n            state.listStack.pop();\n\n            if (state.listStack.length) {\n              state.indentation = state.listStack[state.listStack.length - 1]; // less than the first list's indent -> the line is no longer a list\n            } else {\n              state.list = false;\n            }\n          }\n\n          if (state.list !== false) {\n            state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1];\n          }\n        }\n      } // not comprehensive (currently only for setext detection purposes)\n\n\n      var allowsInlineContinuation = !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header && (!prevLineIsList || !prevLineIsIndentedCode) && !state.prevLine.fencedCodeEnd;\n      var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) && state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n      var match = null;\n\n      if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd || state.prevLine.header || prevLineLineIsEmpty)) {\n        stream.skipToEnd();\n        state.indentedCode = true;\n        return tokenTypes.code;\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n        state.quote = 0;\n        state.header = match[1].length;\n        state.thisLine.header = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        state.f = state.inline;\n        return getType(state);\n      } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n        state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n        if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n        stream.eatSpace();\n        return getType(state);\n      } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n        var listType = match[1] ? \"ol\" : \"ul\";\n        state.indentation = lineIndentation + stream.current().length;\n        state.list = true;\n        state.quote = 0; // Add this list item's content's indentation to the stack\n\n        state.listStack.push(state.indentation); // Reset inline styles which shouldn't propagate across list items\n\n        state.em = false;\n        state.strong = false;\n        state.code = false;\n        state.strikethrough = false;\n\n        if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n          state.taskList = true;\n        }\n\n        state.f = state.inline;\n        if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n        return getType(state);\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n        state.quote = 0;\n        state.fencedEndRE = new RegExp(match[1] + \"+ *$\"); // try switching mode\n\n        state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2] || modeCfg.fencedCodeBlockDefaultMode);\n        if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n        state.f = state.block = local;\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        state.code = -1;\n        return getType(state); // SETEXT has lowest block-scope precedence after HR, so check it after\n        //  the others (code, blockquote, list...)\n      } else if ( // if setext set, indicates line after ---/===\n      state.setext || // line before ---/===\n      (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false && !state.code && !isHr && !linkDefRE.test(stream.string) && (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))) {\n        if (!state.setext) {\n          state.header = match[0].charAt(0) == '=' ? 1 : 2;\n          state.setext = state.header;\n        } else {\n          state.header = state.setext; // has no effect on type so we can reset it now\n\n          state.setext = 0;\n          stream.skipToEnd();\n          if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        }\n\n        state.thisLine.header = true;\n        state.f = state.inline;\n        return getType(state);\n      } else if (isHr) {\n        stream.skipToEnd();\n        state.hr = true;\n        state.thisLine.hr = true;\n        return tokenTypes.hr;\n      } else if (stream.peek() === '[') {\n        return switchInline(stream, state, footnoteLink);\n      }\n\n      return switchInline(stream, state, state.inline);\n    }\n\n    function htmlBlock(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState);\n\n      if (!htmlModeMissing) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n\n        if (inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText || state.md_inside && stream.current().indexOf(\">\") > -1) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      }\n\n      return style;\n    }\n\n    function local(stream, state) {\n      var currListInd = state.listStack[state.listStack.length - 1] || 0;\n      var hasExitedList = state.indentation < currListInd;\n      var maxFencedEndInd = currListInd + 3;\n\n      if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        var returnType;\n        if (!hasExitedList) returnType = getType(state);\n        state.localMode = state.localState = null;\n        state.block = blockNormal;\n        state.f = inlineNormal;\n        state.fencedEndRE = null;\n        state.code = 0;\n        state.thisLine.fencedCodeEnd = true;\n        if (hasExitedList) return switchBlock(stream, state, state.block);\n        return returnType;\n      } else if (state.localMode) {\n        return state.localMode.token(stream, state.localState);\n      } else {\n        stream.skipToEnd();\n        return tokenTypes.code;\n      }\n    } // Inline\n\n\n    function getType(state) {\n      var styles = [];\n\n      if (state.formatting) {\n        styles.push(tokenTypes.formatting);\n        if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n        for (var i = 0; i < state.formatting.length; i++) {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n          if (state.formatting[i] === \"header\") {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n          } // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n          // Add `error` instead if the maximum blockquote nesting depth is passed\n\n\n          if (state.formatting[i] === \"quote\") {\n            if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n              styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n            } else {\n              styles.push(\"error\");\n            }\n          }\n        }\n      }\n\n      if (state.taskOpen) {\n        styles.push(\"meta\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.taskClosed) {\n        styles.push(\"property\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.linkHref) {\n        styles.push(tokenTypes.linkHref, \"url\");\n      } else {\n        // Only apply inline styles to non-url text\n        if (state.strong) {\n          styles.push(tokenTypes.strong);\n        }\n\n        if (state.em) {\n          styles.push(tokenTypes.em);\n        }\n\n        if (state.strikethrough) {\n          styles.push(tokenTypes.strikethrough);\n        }\n\n        if (state.emoji) {\n          styles.push(tokenTypes.emoji);\n        }\n\n        if (state.linkText) {\n          styles.push(tokenTypes.linkText);\n        }\n\n        if (state.code) {\n          styles.push(tokenTypes.code);\n        }\n\n        if (state.image) {\n          styles.push(tokenTypes.image);\n        }\n\n        if (state.imageAltText) {\n          styles.push(tokenTypes.imageAltText, \"link\");\n        }\n\n        if (state.imageMarker) {\n          styles.push(tokenTypes.imageMarker);\n        }\n      }\n\n      if (state.header) {\n        styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header);\n      }\n\n      if (state.quote) {\n        styles.push(tokenTypes.quote); // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n\n        if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n          styles.push(tokenTypes.quote + \"-\" + state.quote);\n        } else {\n          styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n        }\n      }\n\n      if (state.list !== false) {\n        var listMod = (state.listStack.length - 1) % 3;\n\n        if (!listMod) {\n          styles.push(tokenTypes.list1);\n        } else if (listMod === 1) {\n          styles.push(tokenTypes.list2);\n        } else {\n          styles.push(tokenTypes.list3);\n        }\n      }\n\n      if (state.trailingSpaceNewLine) {\n        styles.push(\"trailing-space-new-line\");\n      } else if (state.trailingSpace) {\n        styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n      }\n\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    function handleText(stream, state) {\n      if (stream.match(textRE, true)) {\n        return getType(state);\n      }\n\n      return undefined;\n    }\n\n    function inlineNormal(stream, state) {\n      var style = state.text(stream, state);\n      if (typeof style !== 'undefined') return style;\n\n      if (state.list) {\n        // List marker (*, +, -, 1., etc)\n        state.list = null;\n        return getType(state);\n      }\n\n      if (state.taskList) {\n        var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n        if (taskOpen) state.taskOpen = true;else state.taskClosed = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"task\";\n        state.taskList = false;\n        return getType(state);\n      }\n\n      state.taskOpen = false;\n      state.taskClosed = false;\n\n      if (state.header && stream.match(/^#+$/, true)) {\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        return getType(state);\n      }\n\n      var ch = stream.next(); // Matches link titles present on next line\n\n      if (state.linkTitle) {\n        state.linkTitle = false;\n        var matchCh = ch;\n\n        if (ch === '(') {\n          matchCh = ')';\n        }\n\n        matchCh = (matchCh + '').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n        var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n\n        if (stream.match(new RegExp(regex), true)) {\n          return tokenTypes.linkHref;\n        }\n      } // If this block is changed, it may need to be updated in GFM mode\n\n\n      if (ch === '`') {\n        var previousFormatting = state.formatting;\n        if (modeCfg.highlightFormatting) state.formatting = \"code\";\n        stream.eatWhile('`');\n        var count = stream.current().length;\n\n        if (state.code == 0 && (!state.quote || count == 1)) {\n          state.code = count;\n          return getType(state);\n        } else if (count == state.code) {\n          // Must be exact\n          var t = getType(state);\n          state.code = 0;\n          return t;\n        } else {\n          state.formatting = previousFormatting;\n          return getType(state);\n        }\n      } else if (state.code) {\n        return getType(state);\n      }\n\n      if (ch === '\\\\') {\n        stream.next();\n\n        if (modeCfg.highlightFormatting) {\n          var type = getType(state);\n          var formattingEscape = tokenTypes.formatting + \"-escape\";\n          return type ? type + \" \" + formattingEscape : formattingEscape;\n        }\n      }\n\n      if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n        state.imageMarker = true;\n        state.image = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n        state.imageMarker = false;\n        state.imageAltText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.imageAltText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        var type = getType(state);\n        state.imageAltText = false;\n        state.image = false;\n        state.inline = state.f = linkHref;\n        return type;\n      }\n\n      if (ch === '[' && !state.image) {\n        if (state.linkText && stream.match(/^.*?\\]/)) return getType(state);\n        state.linkText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.linkText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        state.linkText = false;\n        state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal;\n        return type;\n      }\n\n      if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkEmail;\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n        var end = stream.string.indexOf(\">\", stream.pos);\n\n        if (end != -1) {\n          var atts = stream.string.substring(stream.start, end);\n          if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n        }\n\n        stream.backUp(1);\n        state.htmlState = CodeMirror.startState(htmlMode);\n        return switchBlock(stream, state, htmlBlock);\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n        state.md_inside = false;\n        return \"tag\";\n      } else if (ch === \"*\" || ch === \"_\") {\n        var len = 1,\n            before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2);\n\n        while (len < 3 && stream.eat(ch)) {\n          len++;\n        }\n\n        var after = stream.peek() || \" \"; // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n\n        var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before));\n        var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after));\n        var setEm = null,\n            setStrong = null;\n\n        if (len % 2) {\n          // Em\n          if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setEm = true;else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setEm = false;\n        }\n\n        if (len > 1) {\n          // Strong\n          if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setStrong = true;else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setStrong = false;\n        }\n\n        if (setStrong != null || setEm != null) {\n          if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\";\n          if (setEm === true) state.em = ch;\n          if (setStrong === true) state.strong = ch;\n          var t = getType(state);\n          if (setEm === false) state.em = false;\n          if (setStrong === false) state.strong = false;\n          return t;\n        }\n      } else if (ch === ' ') {\n        if (stream.eat('*') || stream.eat('_')) {\n          // Probably surrounded by spaces\n          if (stream.peek() === ' ') {\n            // Surrounded by spaces, ignore\n            return getType(state);\n          } else {\n            // Not surrounded by spaces, back up pointer\n            stream.backUp(1);\n          }\n        }\n      }\n\n      if (modeCfg.strikethrough) {\n        if (ch === '~' && stream.eatWhile(ch)) {\n          if (state.strikethrough) {\n            // Remove strikethrough\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            var t = getType(state);\n            state.strikethrough = false;\n            return t;\n          } else if (stream.match(/^[^\\s]/, false)) {\n            // Add strikethrough\n            state.strikethrough = true;\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            return getType(state);\n          }\n        } else if (ch === ' ') {\n          if (stream.match('~~', true)) {\n            // Probably surrounded by space\n            if (stream.peek() === ' ') {\n              // Surrounded by spaces, ignore\n              return getType(state);\n            } else {\n              // Not surrounded by spaces, back up pointer\n              stream.backUp(2);\n            }\n          }\n        }\n      }\n\n      if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n        state.emoji = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n        var retType = getType(state);\n        state.emoji = false;\n        return retType;\n      }\n\n      if (ch === ' ') {\n        if (stream.match(/^ +$/, false)) {\n          state.trailingSpace++;\n        } else if (state.trailingSpace) {\n          state.trailingSpaceNewLine = true;\n        }\n      }\n\n      return getType(state);\n    }\n\n    function linkInline(stream, state) {\n      var ch = stream.next();\n\n      if (ch === \">\") {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      stream.match(/^[^>]+/, true);\n      return tokenTypes.linkInline;\n    }\n\n    function linkHref(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.next();\n\n      if (ch === '(' || ch === '[') {\n        state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        state.linkHref = true;\n        return getType(state);\n      }\n\n      return 'error';\n    }\n\n    var linkRE = {\n      \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n      \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n    };\n\n    function getLinkHrefInside(endChar) {\n      return function (stream, state) {\n        var ch = stream.next();\n\n        if (ch === endChar) {\n          state.f = state.inline = inlineNormal;\n          if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n          var returnState = getType(state);\n          state.linkHref = false;\n          return returnState;\n        }\n\n        stream.match(linkRE[endChar]);\n        state.linkHref = true;\n        return getType(state);\n      };\n    }\n\n    function footnoteLink(stream, state) {\n      if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n        state.f = footnoteLinkInside;\n        stream.next(); // Consume [\n\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        state.linkText = true;\n        return getType(state);\n      }\n\n      return switchInline(stream, state, inlineNormal);\n    }\n\n    function footnoteLinkInside(stream, state) {\n      if (stream.match(']:', true)) {\n        state.f = state.inline = footnoteUrl;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var returnType = getType(state);\n        state.linkText = false;\n        return returnType;\n      }\n\n      stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n      return tokenTypes.linkText;\n    }\n\n    function footnoteUrl(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      } // Match URL\n\n\n      stream.match(/^[^\\s]+/, true); // Check for link title\n\n      if (stream.peek() === undefined) {\n        // End of line, set flag to check next line\n        state.linkTitle = true;\n      } else {\n        // More content on line, check if link title\n        stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\.)+\"|'(?:[^'\\\\]|\\\\.)+'|\\((?:[^)\\\\]|\\\\.)+\\)))?/, true);\n      }\n\n      state.f = state.inline = inlineNormal;\n      return tokenTypes.linkHref + \" url\";\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          f: blockNormal,\n          prevLine: {\n            stream: null\n          },\n          thisLine: {\n            stream: null\n          },\n          block: blockNormal,\n          htmlState: null,\n          indentation: 0,\n          inline: inlineNormal,\n          text: handleText,\n          formatting: false,\n          linkText: false,\n          linkHref: false,\n          linkTitle: false,\n          code: 0,\n          em: false,\n          strong: false,\n          header: 0,\n          setext: 0,\n          hr: false,\n          taskList: false,\n          list: false,\n          listStack: [],\n          quote: 0,\n          trailingSpace: 0,\n          trailingSpaceNewLine: false,\n          strikethrough: false,\n          emoji: false,\n          fencedEndRE: null\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f,\n          prevLine: s.prevLine,\n          thisLine: s.thisLine,\n          block: s.block,\n          htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n          indentation: s.indentation,\n          localMode: s.localMode,\n          localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n          inline: s.inline,\n          text: s.text,\n          formatting: false,\n          linkText: s.linkText,\n          linkTitle: s.linkTitle,\n          linkHref: s.linkHref,\n          code: s.code,\n          em: s.em,\n          strong: s.strong,\n          strikethrough: s.strikethrough,\n          emoji: s.emoji,\n          header: s.header,\n          setext: s.setext,\n          hr: s.hr,\n          taskList: s.taskList,\n          list: s.list,\n          listStack: s.listStack.slice(0),\n          quote: s.quote,\n          indentedCode: s.indentedCode,\n          trailingSpace: s.trailingSpace,\n          trailingSpaceNewLine: s.trailingSpaceNewLine,\n          md_inside: s.md_inside,\n          fencedEndRE: s.fencedEndRE\n        };\n      },\n      token: function token(stream, state) {\n        // Reset state.formatting\n        state.formatting = false;\n\n        if (stream != state.thisLine.stream) {\n          state.header = 0;\n          state.hr = false;\n\n          if (stream.match(/^\\s*$/, true)) {\n            blankLine(state);\n            return null;\n          }\n\n          state.prevLine = state.thisLine;\n          state.thisLine = {\n            stream: stream\n          }; // Reset state.taskList\n\n          state.taskList = false; // Reset state.trailingSpace\n\n          state.trailingSpace = 0;\n          state.trailingSpaceNewLine = false;\n\n          if (!state.localState) {\n            state.f = state.block;\n\n            if (state.f != htmlBlock) {\n              var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n              state.indentation = indentation;\n              state.indentationDiff = null;\n              if (indentation > 0) return null;\n            }\n          }\n        }\n\n        return state.f(stream, state);\n      },\n      innerMode: function innerMode(state) {\n        if (state.block == htmlBlock) return {\n          state: state.htmlState,\n          mode: htmlMode\n        };\n        if (state.localState) return {\n          state: state.localState,\n          mode: state.localMode\n        };\n        return {\n          state: state,\n          mode: mode\n        };\n      },\n      indent: function indent(state, textAfter, line) {\n        if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line);\n        if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);\n        return CodeMirror.Pass;\n      },\n      blankLine: blankLine,\n      getType: getType,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      fold: \"markdown\"\n    };\n    return mode;\n  }, \"xml\");\n  CodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n  CodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/markdown/markdown.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/meta.js":
/*!**************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/meta.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.modeInfo = [{\n    name: \"APL\",\n    mime: \"text/apl\",\n    mode: \"apl\",\n    ext: [\"dyalog\", \"apl\"]\n  }, {\n    name: \"PGP\",\n    mimes: [\"application/pgp\", \"application/pgp-encrypted\", \"application/pgp-keys\", \"application/pgp-signature\"],\n    mode: \"asciiarmor\",\n    ext: [\"asc\", \"pgp\", \"sig\"]\n  }, {\n    name: \"ASN.1\",\n    mime: \"text/x-ttcn-asn\",\n    mode: \"asn.1\",\n    ext: [\"asn\", \"asn1\"]\n  }, {\n    name: \"Asterisk\",\n    mime: \"text/x-asterisk\",\n    mode: \"asterisk\",\n    file: /^extensions\\.conf$/i\n  }, {\n    name: \"Brainfuck\",\n    mime: \"text/x-brainfuck\",\n    mode: \"brainfuck\",\n    ext: [\"b\", \"bf\"]\n  }, {\n    name: \"C\",\n    mime: \"text/x-csrc\",\n    mode: \"clike\",\n    ext: [\"c\", \"h\", \"ino\"]\n  }, {\n    name: \"C++\",\n    mime: \"text/x-c++src\",\n    mode: \"clike\",\n    ext: [\"cpp\", \"c++\", \"cc\", \"cxx\", \"hpp\", \"h++\", \"hh\", \"hxx\"],\n    alias: [\"cpp\"]\n  }, {\n    name: \"Cobol\",\n    mime: \"text/x-cobol\",\n    mode: \"cobol\",\n    ext: [\"cob\", \"cpy\", \"cbl\"]\n  }, {\n    name: \"C#\",\n    mime: \"text/x-csharp\",\n    mode: \"clike\",\n    ext: [\"cs\"],\n    alias: [\"csharp\", \"cs\"]\n  }, {\n    name: \"Clojure\",\n    mime: \"text/x-clojure\",\n    mode: \"clojure\",\n    ext: [\"clj\", \"cljc\", \"cljx\"]\n  }, {\n    name: \"ClojureScript\",\n    mime: \"text/x-clojurescript\",\n    mode: \"clojure\",\n    ext: [\"cljs\"]\n  }, {\n    name: \"Closure Stylesheets (GSS)\",\n    mime: \"text/x-gss\",\n    mode: \"css\",\n    ext: [\"gss\"]\n  }, {\n    name: \"CMake\",\n    mime: \"text/x-cmake\",\n    mode: \"cmake\",\n    ext: [\"cmake\", \"cmake.in\"],\n    file: /^CMakeLists\\.txt$/\n  }, {\n    name: \"CoffeeScript\",\n    mimes: [\"application/vnd.coffeescript\", \"text/coffeescript\", \"text/x-coffeescript\"],\n    mode: \"coffeescript\",\n    ext: [\"coffee\"],\n    alias: [\"coffee\", \"coffee-script\"]\n  }, {\n    name: \"Common Lisp\",\n    mime: \"text/x-common-lisp\",\n    mode: \"commonlisp\",\n    ext: [\"cl\", \"lisp\", \"el\"],\n    alias: [\"lisp\"]\n  }, {\n    name: \"Cypher\",\n    mime: \"application/x-cypher-query\",\n    mode: \"cypher\",\n    ext: [\"cyp\", \"cypher\"]\n  }, {\n    name: \"Cython\",\n    mime: \"text/x-cython\",\n    mode: \"python\",\n    ext: [\"pyx\", \"pxd\", \"pxi\"]\n  }, {\n    name: \"Crystal\",\n    mime: \"text/x-crystal\",\n    mode: \"crystal\",\n    ext: [\"cr\"]\n  }, {\n    name: \"CSS\",\n    mime: \"text/css\",\n    mode: \"css\",\n    ext: [\"css\"]\n  }, {\n    name: \"CQL\",\n    mime: \"text/x-cassandra\",\n    mode: \"sql\",\n    ext: [\"cql\"]\n  }, {\n    name: \"D\",\n    mime: \"text/x-d\",\n    mode: \"d\",\n    ext: [\"d\"]\n  }, {\n    name: \"Dart\",\n    mimes: [\"application/dart\", \"text/x-dart\"],\n    mode: \"dart\",\n    ext: [\"dart\"]\n  }, {\n    name: \"diff\",\n    mime: \"text/x-diff\",\n    mode: \"diff\",\n    ext: [\"diff\", \"patch\"]\n  }, {\n    name: \"Django\",\n    mime: \"text/x-django\",\n    mode: \"django\"\n  }, {\n    name: \"Dockerfile\",\n    mime: \"text/x-dockerfile\",\n    mode: \"dockerfile\",\n    file: /^Dockerfile$/\n  }, {\n    name: \"DTD\",\n    mime: \"application/xml-dtd\",\n    mode: \"dtd\",\n    ext: [\"dtd\"]\n  }, {\n    name: \"Dylan\",\n    mime: \"text/x-dylan\",\n    mode: \"dylan\",\n    ext: [\"dylan\", \"dyl\", \"intr\"]\n  }, {\n    name: \"EBNF\",\n    mime: \"text/x-ebnf\",\n    mode: \"ebnf\"\n  }, {\n    name: \"ECL\",\n    mime: \"text/x-ecl\",\n    mode: \"ecl\",\n    ext: [\"ecl\"]\n  }, {\n    name: \"edn\",\n    mime: \"application/edn\",\n    mode: \"clojure\",\n    ext: [\"edn\"]\n  }, {\n    name: \"Eiffel\",\n    mime: \"text/x-eiffel\",\n    mode: \"eiffel\",\n    ext: [\"e\"]\n  }, {\n    name: \"Elm\",\n    mime: \"text/x-elm\",\n    mode: \"elm\",\n    ext: [\"elm\"]\n  }, {\n    name: \"Embedded JavaScript\",\n    mime: \"application/x-ejs\",\n    mode: \"htmlembedded\",\n    ext: [\"ejs\"]\n  }, {\n    name: \"Embedded Ruby\",\n    mime: \"application/x-erb\",\n    mode: \"htmlembedded\",\n    ext: [\"erb\"]\n  }, {\n    name: \"Erlang\",\n    mime: \"text/x-erlang\",\n    mode: \"erlang\",\n    ext: [\"erl\"]\n  }, {\n    name: \"Esper\",\n    mime: \"text/x-esper\",\n    mode: \"sql\"\n  }, {\n    name: \"Factor\",\n    mime: \"text/x-factor\",\n    mode: \"factor\",\n    ext: [\"factor\"]\n  }, {\n    name: \"FCL\",\n    mime: \"text/x-fcl\",\n    mode: \"fcl\"\n  }, {\n    name: \"Forth\",\n    mime: \"text/x-forth\",\n    mode: \"forth\",\n    ext: [\"forth\", \"fth\", \"4th\"]\n  }, {\n    name: \"Fortran\",\n    mime: \"text/x-fortran\",\n    mode: \"fortran\",\n    ext: [\"f\", \"for\", \"f77\", \"f90\", \"f95\"]\n  }, {\n    name: \"F#\",\n    mime: \"text/x-fsharp\",\n    mode: \"mllike\",\n    ext: [\"fs\"],\n    alias: [\"fsharp\"]\n  }, {\n    name: \"Gas\",\n    mime: \"text/x-gas\",\n    mode: \"gas\",\n    ext: [\"s\"]\n  }, {\n    name: \"Gherkin\",\n    mime: \"text/x-feature\",\n    mode: \"gherkin\",\n    ext: [\"feature\"]\n  }, {\n    name: \"GitHub Flavored Markdown\",\n    mime: \"text/x-gfm\",\n    mode: \"gfm\",\n    file: /^(readme|contributing|history)\\.md$/i\n  }, {\n    name: \"Go\",\n    mime: \"text/x-go\",\n    mode: \"go\",\n    ext: [\"go\"]\n  }, {\n    name: \"Groovy\",\n    mime: \"text/x-groovy\",\n    mode: \"groovy\",\n    ext: [\"groovy\", \"gradle\"],\n    file: /^Jenkinsfile$/\n  }, {\n    name: \"HAML\",\n    mime: \"text/x-haml\",\n    mode: \"haml\",\n    ext: [\"haml\"]\n  }, {\n    name: \"Haskell\",\n    mime: \"text/x-haskell\",\n    mode: \"haskell\",\n    ext: [\"hs\"]\n  }, {\n    name: \"Haskell (Literate)\",\n    mime: \"text/x-literate-haskell\",\n    mode: \"haskell-literate\",\n    ext: [\"lhs\"]\n  }, {\n    name: \"Haxe\",\n    mime: \"text/x-haxe\",\n    mode: \"haxe\",\n    ext: [\"hx\"]\n  }, {\n    name: \"HXML\",\n    mime: \"text/x-hxml\",\n    mode: \"haxe\",\n    ext: [\"hxml\"]\n  }, {\n    name: \"ASP.NET\",\n    mime: \"application/x-aspx\",\n    mode: \"htmlembedded\",\n    ext: [\"aspx\"],\n    alias: [\"asp\", \"aspx\"]\n  }, {\n    name: \"HTML\",\n    mime: \"text/html\",\n    mode: \"htmlmixed\",\n    ext: [\"html\", \"htm\", \"handlebars\", \"hbs\"],\n    alias: [\"xhtml\"]\n  }, {\n    name: \"HTTP\",\n    mime: \"message/http\",\n    mode: \"http\"\n  }, {\n    name: \"IDL\",\n    mime: \"text/x-idl\",\n    mode: \"idl\",\n    ext: [\"pro\"]\n  }, {\n    name: \"Pug\",\n    mime: \"text/x-pug\",\n    mode: \"pug\",\n    ext: [\"jade\", \"pug\"],\n    alias: [\"jade\"]\n  }, {\n    name: \"Java\",\n    mime: \"text/x-java\",\n    mode: \"clike\",\n    ext: [\"java\"]\n  }, {\n    name: \"Java Server Pages\",\n    mime: \"application/x-jsp\",\n    mode: \"htmlembedded\",\n    ext: [\"jsp\"],\n    alias: [\"jsp\"]\n  }, {\n    name: \"JavaScript\",\n    mimes: [\"text/javascript\", \"text/ecmascript\", \"application/javascript\", \"application/x-javascript\", \"application/ecmascript\"],\n    mode: \"javascript\",\n    ext: [\"js\"],\n    alias: [\"ecmascript\", \"js\", \"node\"]\n  }, {\n    name: \"JSON\",\n    mimes: [\"application/json\", \"application/x-json\"],\n    mode: \"javascript\",\n    ext: [\"json\", \"map\"],\n    alias: [\"json5\"]\n  }, {\n    name: \"JSON-LD\",\n    mime: \"application/ld+json\",\n    mode: \"javascript\",\n    ext: [\"jsonld\"],\n    alias: [\"jsonld\"]\n  }, {\n    name: \"JSX\",\n    mime: \"text/jsx\",\n    mode: \"jsx\",\n    ext: [\"jsx\"]\n  }, {\n    name: \"Jinja2\",\n    mime: \"text/jinja2\",\n    mode: \"jinja2\",\n    ext: [\"j2\", \"jinja\", \"jinja2\"]\n  }, {\n    name: \"Julia\",\n    mime: \"text/x-julia\",\n    mode: \"julia\",\n    ext: [\"jl\"],\n    alias: [\"jl\"]\n  }, {\n    name: \"Kotlin\",\n    mime: \"text/x-kotlin\",\n    mode: \"clike\",\n    ext: [\"kt\"]\n  }, {\n    name: \"LESS\",\n    mime: \"text/x-less\",\n    mode: \"css\",\n    ext: [\"less\"]\n  }, {\n    name: \"LiveScript\",\n    mime: \"text/x-livescript\",\n    mode: \"livescript\",\n    ext: [\"ls\"],\n    alias: [\"ls\"]\n  }, {\n    name: \"Lua\",\n    mime: \"text/x-lua\",\n    mode: \"lua\",\n    ext: [\"lua\"]\n  }, {\n    name: \"Markdown\",\n    mime: \"text/x-markdown\",\n    mode: \"markdown\",\n    ext: [\"markdown\", \"md\", \"mkd\"]\n  }, {\n    name: \"mIRC\",\n    mime: \"text/mirc\",\n    mode: \"mirc\"\n  }, {\n    name: \"MariaDB SQL\",\n    mime: \"text/x-mariadb\",\n    mode: \"sql\"\n  }, {\n    name: \"Mathematica\",\n    mime: \"text/x-mathematica\",\n    mode: \"mathematica\",\n    ext: [\"m\", \"nb\", \"wl\", \"wls\"]\n  }, {\n    name: \"Modelica\",\n    mime: \"text/x-modelica\",\n    mode: \"modelica\",\n    ext: [\"mo\"]\n  }, {\n    name: \"MUMPS\",\n    mime: \"text/x-mumps\",\n    mode: \"mumps\",\n    ext: [\"mps\"]\n  }, {\n    name: \"MS SQL\",\n    mime: \"text/x-mssql\",\n    mode: \"sql\"\n  }, {\n    name: \"mbox\",\n    mime: \"application/mbox\",\n    mode: \"mbox\",\n    ext: [\"mbox\"]\n  }, {\n    name: \"MySQL\",\n    mime: \"text/x-mysql\",\n    mode: \"sql\"\n  }, {\n    name: \"Nginx\",\n    mime: \"text/x-nginx-conf\",\n    mode: \"nginx\",\n    file: /nginx.*\\.conf$/i\n  }, {\n    name: \"NSIS\",\n    mime: \"text/x-nsis\",\n    mode: \"nsis\",\n    ext: [\"nsh\", \"nsi\"]\n  }, {\n    name: \"NTriples\",\n    mimes: [\"application/n-triples\", \"application/n-quads\", \"text/n-triples\"],\n    mode: \"ntriples\",\n    ext: [\"nt\", \"nq\"]\n  }, {\n    name: \"Objective-C\",\n    mime: \"text/x-objectivec\",\n    mode: \"clike\",\n    ext: [\"m\"],\n    alias: [\"objective-c\", \"objc\"]\n  }, {\n    name: \"Objective-C++\",\n    mime: \"text/x-objectivec++\",\n    mode: \"clike\",\n    ext: [\"mm\"],\n    alias: [\"objective-c++\", \"objc++\"]\n  }, {\n    name: \"OCaml\",\n    mime: \"text/x-ocaml\",\n    mode: \"mllike\",\n    ext: [\"ml\", \"mli\", \"mll\", \"mly\"]\n  }, {\n    name: \"Octave\",\n    mime: \"text/x-octave\",\n    mode: \"octave\",\n    ext: [\"m\"]\n  }, {\n    name: \"Oz\",\n    mime: \"text/x-oz\",\n    mode: \"oz\",\n    ext: [\"oz\"]\n  }, {\n    name: \"Pascal\",\n    mime: \"text/x-pascal\",\n    mode: \"pascal\",\n    ext: [\"p\", \"pas\"]\n  }, {\n    name: \"PEG.js\",\n    mime: \"null\",\n    mode: \"pegjs\",\n    ext: [\"jsonld\"]\n  }, {\n    name: \"Perl\",\n    mime: \"text/x-perl\",\n    mode: \"perl\",\n    ext: [\"pl\", \"pm\"]\n  }, {\n    name: \"PHP\",\n    mimes: [\"text/x-php\", \"application/x-httpd-php\", \"application/x-httpd-php-open\"],\n    mode: \"php\",\n    ext: [\"php\", \"php3\", \"php4\", \"php5\", \"php7\", \"phtml\"]\n  }, {\n    name: \"Pig\",\n    mime: \"text/x-pig\",\n    mode: \"pig\",\n    ext: [\"pig\"]\n  }, {\n    name: \"Plain Text\",\n    mime: \"text/plain\",\n    mode: \"null\",\n    ext: [\"txt\", \"text\", \"conf\", \"def\", \"list\", \"log\"]\n  }, {\n    name: \"PLSQL\",\n    mime: \"text/x-plsql\",\n    mode: \"sql\",\n    ext: [\"pls\"]\n  }, {\n    name: \"PostgreSQL\",\n    mime: \"text/x-pgsql\",\n    mode: \"sql\"\n  }, {\n    name: \"PowerShell\",\n    mime: \"application/x-powershell\",\n    mode: \"powershell\",\n    ext: [\"ps1\", \"psd1\", \"psm1\"]\n  }, {\n    name: \"Properties files\",\n    mime: \"text/x-properties\",\n    mode: \"properties\",\n    ext: [\"properties\", \"ini\", \"in\"],\n    alias: [\"ini\", \"properties\"]\n  }, {\n    name: \"ProtoBuf\",\n    mime: \"text/x-protobuf\",\n    mode: \"protobuf\",\n    ext: [\"proto\"]\n  }, {\n    name: \"Python\",\n    mime: \"text/x-python\",\n    mode: \"python\",\n    ext: [\"BUILD\", \"bzl\", \"py\", \"pyw\"],\n    file: /^(BUCK|BUILD)$/\n  }, {\n    name: \"Puppet\",\n    mime: \"text/x-puppet\",\n    mode: \"puppet\",\n    ext: [\"pp\"]\n  }, {\n    name: \"Q\",\n    mime: \"text/x-q\",\n    mode: \"q\",\n    ext: [\"q\"]\n  }, {\n    name: \"R\",\n    mime: \"text/x-rsrc\",\n    mode: \"r\",\n    ext: [\"r\", \"R\"],\n    alias: [\"rscript\"]\n  }, {\n    name: \"reStructuredText\",\n    mime: \"text/x-rst\",\n    mode: \"rst\",\n    ext: [\"rst\"],\n    alias: [\"rst\"]\n  }, {\n    name: \"RPM Changes\",\n    mime: \"text/x-rpm-changes\",\n    mode: \"rpm\"\n  }, {\n    name: \"RPM Spec\",\n    mime: \"text/x-rpm-spec\",\n    mode: \"rpm\",\n    ext: [\"spec\"]\n  }, {\n    name: \"Ruby\",\n    mime: \"text/x-ruby\",\n    mode: \"ruby\",\n    ext: [\"rb\"],\n    alias: [\"jruby\", \"macruby\", \"rake\", \"rb\", \"rbx\"]\n  }, {\n    name: \"Rust\",\n    mime: \"text/x-rustsrc\",\n    mode: \"rust\",\n    ext: [\"rs\"]\n  }, {\n    name: \"SAS\",\n    mime: \"text/x-sas\",\n    mode: \"sas\",\n    ext: [\"sas\"]\n  }, {\n    name: \"Sass\",\n    mime: \"text/x-sass\",\n    mode: \"sass\",\n    ext: [\"sass\"]\n  }, {\n    name: \"Scala\",\n    mime: \"text/x-scala\",\n    mode: \"clike\",\n    ext: [\"scala\"]\n  }, {\n    name: \"Scheme\",\n    mime: \"text/x-scheme\",\n    mode: \"scheme\",\n    ext: [\"scm\", \"ss\"]\n  }, {\n    name: \"SCSS\",\n    mime: \"text/x-scss\",\n    mode: \"css\",\n    ext: [\"scss\"]\n  }, {\n    name: \"Shell\",\n    mimes: [\"text/x-sh\", \"application/x-sh\"],\n    mode: \"shell\",\n    ext: [\"sh\", \"ksh\", \"bash\"],\n    alias: [\"bash\", \"sh\", \"zsh\"],\n    file: /^PKGBUILD$/\n  }, {\n    name: \"Sieve\",\n    mime: \"application/sieve\",\n    mode: \"sieve\",\n    ext: [\"siv\", \"sieve\"]\n  }, {\n    name: \"Slim\",\n    mimes: [\"text/x-slim\", \"application/x-slim\"],\n    mode: \"slim\",\n    ext: [\"slim\"]\n  }, {\n    name: \"Smalltalk\",\n    mime: \"text/x-stsrc\",\n    mode: \"smalltalk\",\n    ext: [\"st\"]\n  }, {\n    name: \"Smarty\",\n    mime: \"text/x-smarty\",\n    mode: \"smarty\",\n    ext: [\"tpl\"]\n  }, {\n    name: \"Solr\",\n    mime: \"text/x-solr\",\n    mode: \"solr\"\n  }, {\n    name: \"SML\",\n    mime: \"text/x-sml\",\n    mode: \"mllike\",\n    ext: [\"sml\", \"sig\", \"fun\", \"smackspec\"]\n  }, {\n    name: \"Soy\",\n    mime: \"text/x-soy\",\n    mode: \"soy\",\n    ext: [\"soy\"],\n    alias: [\"closure template\"]\n  }, {\n    name: \"SPARQL\",\n    mime: \"application/sparql-query\",\n    mode: \"sparql\",\n    ext: [\"rq\", \"sparql\"],\n    alias: [\"sparul\"]\n  }, {\n    name: \"Spreadsheet\",\n    mime: \"text/x-spreadsheet\",\n    mode: \"spreadsheet\",\n    alias: [\"excel\", \"formula\"]\n  }, {\n    name: \"SQL\",\n    mime: \"text/x-sql\",\n    mode: \"sql\",\n    ext: [\"sql\"]\n  }, {\n    name: \"SQLite\",\n    mime: \"text/x-sqlite\",\n    mode: \"sql\"\n  }, {\n    name: \"Squirrel\",\n    mime: \"text/x-squirrel\",\n    mode: \"clike\",\n    ext: [\"nut\"]\n  }, {\n    name: \"Stylus\",\n    mime: \"text/x-styl\",\n    mode: \"stylus\",\n    ext: [\"styl\"]\n  }, {\n    name: \"Swift\",\n    mime: \"text/x-swift\",\n    mode: \"swift\",\n    ext: [\"swift\"]\n  }, {\n    name: \"sTeX\",\n    mime: \"text/x-stex\",\n    mode: \"stex\"\n  }, {\n    name: \"LaTeX\",\n    mime: \"text/x-latex\",\n    mode: \"stex\",\n    ext: [\"text\", \"ltx\", \"tex\"],\n    alias: [\"tex\"]\n  }, {\n    name: \"SystemVerilog\",\n    mime: \"text/x-systemverilog\",\n    mode: \"verilog\",\n    ext: [\"v\", \"sv\", \"svh\"]\n  }, {\n    name: \"Tcl\",\n    mime: \"text/x-tcl\",\n    mode: \"tcl\",\n    ext: [\"tcl\"]\n  }, {\n    name: \"Textile\",\n    mime: \"text/x-textile\",\n    mode: \"textile\",\n    ext: [\"textile\"]\n  }, {\n    name: \"TiddlyWiki\",\n    mime: \"text/x-tiddlywiki\",\n    mode: \"tiddlywiki\"\n  }, {\n    name: \"Tiki wiki\",\n    mime: \"text/tiki\",\n    mode: \"tiki\"\n  }, {\n    name: \"TOML\",\n    mime: \"text/x-toml\",\n    mode: \"toml\",\n    ext: [\"toml\"]\n  }, {\n    name: \"Tornado\",\n    mime: \"text/x-tornado\",\n    mode: \"tornado\"\n  }, {\n    name: \"troff\",\n    mime: \"text/troff\",\n    mode: \"troff\",\n    ext: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n  }, {\n    name: \"TTCN\",\n    mime: \"text/x-ttcn\",\n    mode: \"ttcn\",\n    ext: [\"ttcn\", \"ttcn3\", \"ttcnpp\"]\n  }, {\n    name: \"TTCN_CFG\",\n    mime: \"text/x-ttcn-cfg\",\n    mode: \"ttcn-cfg\",\n    ext: [\"cfg\"]\n  }, {\n    name: \"Turtle\",\n    mime: \"text/turtle\",\n    mode: \"turtle\",\n    ext: [\"ttl\"]\n  }, {\n    name: \"TypeScript\",\n    mime: \"application/typescript\",\n    mode: \"javascript\",\n    ext: [\"ts\"],\n    alias: [\"ts\"]\n  }, {\n    name: \"TypeScript-JSX\",\n    mime: \"text/typescript-jsx\",\n    mode: \"jsx\",\n    ext: [\"tsx\"],\n    alias: [\"tsx\"]\n  }, {\n    name: \"Twig\",\n    mime: \"text/x-twig\",\n    mode: \"twig\"\n  }, {\n    name: \"Web IDL\",\n    mime: \"text/x-webidl\",\n    mode: \"webidl\",\n    ext: [\"webidl\"]\n  }, {\n    name: \"VB.NET\",\n    mime: \"text/x-vb\",\n    mode: \"vb\",\n    ext: [\"vb\"]\n  }, {\n    name: \"VBScript\",\n    mime: \"text/vbscript\",\n    mode: \"vbscript\",\n    ext: [\"vbs\"]\n  }, {\n    name: \"Velocity\",\n    mime: \"text/velocity\",\n    mode: \"velocity\",\n    ext: [\"vtl\"]\n  }, {\n    name: \"Verilog\",\n    mime: \"text/x-verilog\",\n    mode: \"verilog\",\n    ext: [\"v\"]\n  }, {\n    name: \"VHDL\",\n    mime: \"text/x-vhdl\",\n    mode: \"vhdl\",\n    ext: [\"vhd\", \"vhdl\"]\n  }, {\n    name: \"Vue.js Component\",\n    mimes: [\"script/x-vue\", \"text/x-vue\"],\n    mode: \"vue\",\n    ext: [\"vue\"]\n  }, {\n    name: \"XML\",\n    mimes: [\"application/xml\", \"text/xml\"],\n    mode: \"xml\",\n    ext: [\"xml\", \"xsl\", \"xsd\", \"svg\"],\n    alias: [\"rss\", \"wsdl\", \"xsd\"]\n  }, {\n    name: \"XQuery\",\n    mime: \"application/xquery\",\n    mode: \"xquery\",\n    ext: [\"xy\", \"xquery\"]\n  }, {\n    name: \"Yacas\",\n    mime: \"text/x-yacas\",\n    mode: \"yacas\",\n    ext: [\"ys\"]\n  }, {\n    name: \"YAML\",\n    mimes: [\"text/x-yaml\", \"text/yaml\"],\n    mode: \"yaml\",\n    ext: [\"yaml\", \"yml\"],\n    alias: [\"yml\"]\n  }, {\n    name: \"Z80\",\n    mime: \"text/x-z80\",\n    mode: \"z80\",\n    ext: [\"z80\"]\n  }, {\n    name: \"mscgen\",\n    mime: \"text/x-mscgen\",\n    mode: \"mscgen\",\n    ext: [\"mscgen\", \"mscin\", \"msc\"]\n  }, {\n    name: \"xu\",\n    mime: \"text/x-xu\",\n    mode: \"mscgen\",\n    ext: [\"xu\"]\n  }, {\n    name: \"msgenny\",\n    mime: \"text/x-msgenny\",\n    mode: \"mscgen\",\n    ext: [\"msgenny\"]\n  }, {\n    name: \"WebAssembly\",\n    mime: \"text/webassembly\",\n    mode: \"wast\",\n    ext: [\"wat\", \"wast\"]\n  }]; // Ensure all modes have a mime property for backwards compatibility\n\n  for (var i = 0; i < CodeMirror.modeInfo.length; i++) {\n    var info = CodeMirror.modeInfo[i];\n    if (info.mimes) info.mime = info.mimes[0];\n  }\n\n  CodeMirror.findModeByMIME = function (mime) {\n    mime = mime.toLowerCase();\n\n    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {\n      var info = CodeMirror.modeInfo[i];\n      if (info.mime == mime) return info;\n      if (info.mimes) for (var j = 0; j < info.mimes.length; j++) {\n        if (info.mimes[j] == mime) return info;\n      }\n    }\n\n    if (/\\+xml$/.test(mime)) return CodeMirror.findModeByMIME(\"application/xml\");\n    if (/\\+json$/.test(mime)) return CodeMirror.findModeByMIME(\"application/json\");\n  };\n\n  CodeMirror.findModeByExtension = function (ext) {\n    ext = ext.toLowerCase();\n\n    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {\n      var info = CodeMirror.modeInfo[i];\n      if (info.ext) for (var j = 0; j < info.ext.length; j++) {\n        if (info.ext[j] == ext) return info;\n      }\n    }\n  };\n\n  CodeMirror.findModeByFileName = function (filename) {\n    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {\n      var info = CodeMirror.modeInfo[i];\n      if (info.file && info.file.test(filename)) return info;\n    }\n\n    var dot = filename.lastIndexOf(\".\");\n    var ext = dot > -1 && filename.substring(dot + 1, filename.length);\n    if (ext) return CodeMirror.findModeByExtension(ext);\n  };\n\n  CodeMirror.findModeByName = function (name) {\n    name = name.toLowerCase();\n\n    for (var i = 0; i < CodeMirror.modeInfo.length; i++) {\n      var info = CodeMirror.modeInfo[i];\n      if (info.name.toLowerCase() == name) return info;\n      if (info.alias) for (var j = 0; j < info.alias.length; j++) {\n        if (info.alias[j].toLowerCase() == name) return info;\n      }\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/meta.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/mode/xml/xml.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/mode/xml/xml.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function lower(tagName) {\n      return tagName && tagName.toLowerCase();\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName || \"\";\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(lower(parentTagName)) || !config.contextGrabbers[lower(parentTagName)].hasOwnProperty(lower(nextTagName))) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(lower(state.context.tagName))) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(lower(tagName))) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(lower(context.tagName))) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[lower(context.tagName)];\n            if (grabbers && grabbers.hasOwnProperty(lower(tagAfter[2]))) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/mode/xml/xml.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/mode/markdown/markdown.js");
/******/ 	
/******/ })()
;