/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/fold/brace-fold.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/fold/brace-fold.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function bracketFolding(pairs) {\n    return function (cm, start) {\n      var line = start.line,\n          lineText = cm.getLine(line);\n\n      function findOpening(pair) {\n        var tokenType;\n\n        for (var at = start.ch, pass = 0;;) {\n          var found = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n\n          if (found == -1) {\n            if (pass == 1) break;\n            pass = 1;\n            at = lineText.length;\n            continue;\n          }\n\n          if (pass == 1 && found < start.ch) break;\n          tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n          if (!/^(comment|string)/.test(tokenType)) return {\n            ch: found + 1,\n            tokenType: tokenType,\n            pair: pair\n          };\n          at = found - 1;\n        }\n      }\n\n      function findRange(found) {\n        var count = 1,\n            lastLine = cm.lastLine(),\n            end,\n            startCh = found.ch,\n            endCh;\n\n        outer: for (var i = line; i <= lastLine; ++i) {\n          var text = cm.getLine(i),\n              pos = i == line ? startCh : 0;\n\n          for (;;) {\n            var nextOpen = text.indexOf(found.pair[0], pos),\n                nextClose = text.indexOf(found.pair[1], pos);\n            if (nextOpen < 0) nextOpen = text.length;\n            if (nextClose < 0) nextClose = text.length;\n            pos = Math.min(nextOpen, nextClose);\n            if (pos == text.length) break;\n\n            if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == found.tokenType) {\n              if (pos == nextOpen) ++count;else if (! --count) {\n                end = i;\n                endCh = pos;\n                break outer;\n              }\n            }\n\n            ++pos;\n          }\n        }\n\n        if (end == null || line == end) return null;\n        return {\n          from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)\n        };\n      }\n\n      var found = [];\n\n      for (var i = 0; i < pairs.length; i++) {\n        var open = findOpening(pairs[i]);\n        if (open) found.push(open);\n      }\n\n      found.sort(function (a, b) {\n        return a.ch - b.ch;\n      });\n\n      for (var i = 0; i < found.length; i++) {\n        var range = findRange(found[i]);\n        if (range) return range;\n      }\n\n      return null;\n    };\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n  CodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n  CodeMirror.registerHelper(\"fold\", \"import\", function (cm, start) {\n    function hasImport(line) {\n      if (line < cm.firstLine() || line > cm.lastLine()) return null;\n      var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n      if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n      if (start.type != \"keyword\" || start.string != \"import\") return null; // Now find closing semicolon, return its position\n\n      for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n        var text = cm.getLine(i),\n            semi = text.indexOf(\";\");\n        if (semi != -1) return {\n          startCh: start.end,\n          end: CodeMirror.Pos(i, semi)\n        };\n      }\n    }\n\n    var startLine = start.line,\n        has = hasImport(startLine),\n        prev;\n    if (!has || hasImport(startLine - 1) || (prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1) return null;\n\n    for (var end = has.end;;) {\n      var next = hasImport(end.line + 1);\n      if (next == null) break;\n      end = next.end;\n    }\n\n    return {\n      from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)),\n      to: end\n    };\n  });\n  CodeMirror.registerHelper(\"fold\", \"include\", function (cm, start) {\n    function hasInclude(line) {\n      if (line < cm.firstLine() || line > cm.lastLine()) return null;\n      var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n      if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n      if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n    }\n\n    var startLine = start.line,\n        has = hasInclude(startLine);\n    if (has == null || hasInclude(startLine - 1) != null) return null;\n\n    for (var end = startLine;;) {\n      var next = hasInclude(end + 1);\n      if (next == null) break;\n      ++end;\n    }\n\n    return {\n      from: CodeMirror.Pos(startLine, has + 1),\n      to: cm.clipPos(CodeMirror.Pos(end))\n    };\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/fold/brace-fold.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/addon/fold/brace-fold.js");
/******/ 	
/******/ })()
;