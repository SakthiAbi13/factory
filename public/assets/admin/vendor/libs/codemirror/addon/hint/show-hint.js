/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/hint/show-hint.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/hint/show-hint.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// declare global: DOMRect\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\"; // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n\n  CodeMirror.showHint = function (cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {\n      hint: getHints\n    };\n    if (options) for (var prop in options) {\n      newOpts[prop] = options[prop];\n    }\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function (options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections();\n    if (selections.length > 1) return; // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return; // Don't try with cross-line selections\n\n      for (var i = 0; i < selections.length; i++) {\n        if (selections[i].head.line != selections[i].anchor.line) return;\n      }\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n  CodeMirror.defineExtension(\"closeHint\", function () {\n    if (this.state.completionActive) this.state.completionActive.close();\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    if (this.options.updateOnCursorActivity) {\n      var self = this;\n      cm.on(\"cursorActivity\", this.activityFunc = function () {\n        self.cursorActivity();\n      });\n    }\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function (fn) {\n    return setTimeout(fn, 1000 / 60);\n  };\n\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n  Completion.prototype = {\n    close: function close() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n\n      if (this.options.updateOnCursorActivity) {\n        this.cm.off(\"cursorActivity\", this.activityFunc);\n      }\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n    active: function active() {\n      return this.cm.state.completionActive == this;\n    },\n    pick: function pick(data, i) {\n      var completion = data.list[i],\n          self = this;\n      this.cm.operation(function () {\n        if (completion.hint) completion.hint(self.cm, data, completion);else self.cm.replaceRange(getText(completion), completion.from || data.from, completion.to || data.to, \"complete\");\n        CodeMirror.signal(data, \"pick\", completion);\n        self.cm.scrollIntoView();\n      });\n\n      if (this.options.closeOnPick) {\n        this.close();\n      }\n    },\n    cursorActivity: function cursorActivity() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var identStart = this.startPos;\n\n      if (this.data) {\n        identStart = this.data.from;\n      }\n\n      var pos = this.cm.getCursor(),\n          line = this.cm.getLine(pos.line);\n\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch || pos.ch < identStart.ch || this.cm.somethingSelected() || !pos.ch || this.options.closeCharacters.test(line.charAt(pos.ch - 1))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function () {\n          self.update();\n        });\n        if (this.widget) this.widget.disable();\n      }\n    },\n    update: function update(first) {\n      if (this.tick == null) return;\n      var self = this,\n          myTick = ++this.tick;\n      fetchHints(this.options.hint, this.cm, this.options, function (data) {\n        if (self.tick == myTick) self.finishUpdate(data, first);\n      });\n    },\n    finishUpdate: function finishUpdate(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n      var picked = this.widget && this.widget.picked || first && this.options.completeSingle;\n      if (this.widget) this.widget.close();\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n\n    for (var prop in defaultOptions) {\n      out[prop] = defaultOptions[prop];\n    }\n\n    if (editor) for (var prop in editor) {\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    }\n    if (options) for (var prop in options) {\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    }\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos);\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function Up() {\n        handle.moveFocus(-1);\n      },\n      Down: function Down() {\n        handle.moveFocus(1);\n      },\n      PageUp: function PageUp() {\n        handle.moveFocus(-handle.menuSize() + 1, true);\n      },\n      PageDown: function PageDown() {\n        handle.moveFocus(handle.menuSize() - 1, true);\n      },\n      Home: function Home() {\n        handle.setFocus(0);\n      },\n      End: function End() {\n        handle.setFocus(handle.length - 1);\n      },\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var mac = /Mac/.test(navigator.platform);\n\n    if (mac) {\n      baseMap[\"Ctrl-P\"] = function () {\n        handle.moveFocus(-1);\n      };\n\n      baseMap[\"Ctrl-N\"] = function () {\n        handle.moveFocus(1);\n      };\n    }\n\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\") bound = function bound(cm) {\n        return val(cm, handle);\n      }; // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val)) bound = baseMap[val];else bound = val;\n      ourMap[key] = bound;\n    }\n\n    if (custom) for (var key in custom) {\n      if (custom.hasOwnProperty(key)) addBinding(key, custom[key]);\n    }\n    var extra = completion.options.extraKeys;\n    if (extra) for (var key in extra) {\n      if (extra.hasOwnProperty(key)) addBinding(key, extra[key]);\n    }\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.id = \"cm-complete-\" + Math.floor(Math.random(1e6));\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this,\n        cm = completion.cm;\n    var ownerDocument = cm.getInputField().ownerDocument;\n    var parentWindow = ownerDocument.defaultView || ownerDocument.parentWindow;\n    var hints = this.hints = ownerDocument.createElement(\"ul\");\n    hints.setAttribute(\"role\", \"listbox\");\n    hints.setAttribute(\"aria-expanded\", \"true\");\n    hints.id = this.id;\n    var theme = completion.cm.options.theme;\n    hints.className = \"CodeMirror-hints \" + theme;\n    this.selectedHint = data.selectedHint || 0;\n    var completions = data.list;\n\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(ownerDocument.createElement(\"li\")),\n          cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (i == this.selectedHint) elt.setAttribute(\"aria-selected\", \"true\");\n      elt.id = this.id + \"-\" + i;\n      elt.setAttribute(\"role\", \"option\");\n      if (cur.render) cur.render(elt, data, cur);else elt.appendChild(ownerDocument.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var container = completion.options.container || ownerDocument.body;\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left,\n        top = pos.bottom,\n        below = true;\n    var offsetLeft = 0,\n        offsetTop = 0;\n\n    if (container !== ownerDocument.body) {\n      // We offset the cursor position because left and top are relative to the offsetParent's top left corner.\n      var isContainerPositioned = ['absolute', 'relative', 'fixed'].indexOf(parentWindow.getComputedStyle(container).position) !== -1;\n      var offsetParent = isContainerPositioned ? container : container.offsetParent;\n      var offsetParentPosition = offsetParent.getBoundingClientRect();\n      var bodyPosition = ownerDocument.body.getBoundingClientRect();\n      offsetLeft = offsetParentPosition.left - bodyPosition.left - offsetParent.scrollLeft;\n      offsetTop = offsetParentPosition.top - bodyPosition.top - offsetParent.scrollTop;\n    }\n\n    hints.style.left = left - offsetLeft + \"px\";\n    hints.style.top = top - offsetTop + \"px\"; // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n\n    var winW = parentWindow.innerWidth || Math.max(ownerDocument.body.offsetWidth, ownerDocument.documentElement.offsetWidth);\n    var winH = parentWindow.innerHeight || Math.max(ownerDocument.body.offsetHeight, ownerDocument.documentElement.offsetHeight);\n    container.appendChild(hints);\n    cm.getInputField().setAttribute(\"aria-autocomplete\", \"list\");\n    cm.getInputField().setAttribute(\"aria-owns\", this.id);\n    cm.getInputField().setAttribute(\"aria-activedescendant\", this.id + \"-\" + this.selectedHint);\n    var box = completion.options.moveOnOverlap ? hints.getBoundingClientRect() : new DOMRect();\n    var scrolls = completion.options.paddingForScrollbar ? hints.scrollHeight > hints.clientHeight + 1 : false; // Compute in the timeout to avoid reflow on init\n\n    var startScroll;\n    setTimeout(function () {\n      startScroll = cm.getScrollInfo();\n    });\n    var overlapY = box.bottom - winH;\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top,\n          curTop = pos.top - (pos.bottom - box.top);\n\n      if (curTop - height > 0) {\n        // Fits above cursor\n        hints.style.top = (top = pos.top - height - offsetTop) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = winH - 5 + \"px\";\n        hints.style.top = (top = pos.bottom - box.top - offsetTop) + \"px\";\n        var cursor = cm.getCursor();\n\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left - offsetLeft) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n\n    var overlapX = box.right - winW;\n    if (scrolls) overlapX += cm.display.nativeBarWidth;\n\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = winW - 5 + \"px\";\n        overlapX -= box.right - box.left - winW;\n      }\n\n      hints.style.left = (left = pos.left - overlapX - offsetLeft) + \"px\";\n    }\n\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling) {\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\";\n    }\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function moveFocus(n, avoidWrap) {\n        widget.changeActive(widget.selectedHint + n, avoidWrap);\n      },\n      setFocus: function setFocus(n) {\n        widget.changeActive(n);\n      },\n      menuSize: function menuSize() {\n        return widget.screenAmount();\n      },\n      length: completions.length,\n      close: function close() {\n        completion.close();\n      },\n      pick: function pick() {\n        widget.pick();\n      },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function () {\n        closingOnBlur = setTimeout(function () {\n          completion.close();\n        }, 100);\n      });\n      cm.on(\"focus\", this.onFocus = function () {\n        clearTimeout(closingOnBlur);\n      });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function () {\n      var curScroll = cm.getScrollInfo(),\n          editor = cm.getWrapperElement().getBoundingClientRect();\n      if (!startScroll) startScroll = cm.getScrollInfo();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (parentWindow.pageYOffset || (ownerDocument.documentElement || ownerDocument.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = left + startScroll.left - curScroll.left + \"px\";\n    });\n    CodeMirror.on(hints, \"dblclick\", function (e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        widget.pick();\n      }\n    });\n    CodeMirror.on(hints, \"click\", function (e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n    CodeMirror.on(hints, \"mousedown\", function () {\n      setTimeout(function () {\n        cm.focus();\n      }, 20);\n    }); // The first hint doesn't need to be scrolled to on init\n\n    var selectedHintRange = this.getSelectedHintRange();\n\n    if (selectedHintRange.from !== 0 || selectedHintRange.to !== 0) {\n      this.scrollToActive();\n    }\n\n    CodeMirror.signal(data, \"select\", completions[this.selectedHint], hints.childNodes[this.selectedHint]);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function close() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      if (this.hints.parentNode) this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var input = this.completion.cm.getInputField();\n      input.removeAttribute(\"aria-activedescendant\");\n      input.removeAttribute(\"aria-owns\");\n      var cm = this.completion.cm;\n\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n\n      cm.off(\"scroll\", this.onScroll);\n    },\n    disable: function disable() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {\n        Enter: function Enter() {\n          widget.picked = true;\n        }\n      };\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n    pick: function pick() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n    changeActive: function changeActive(i, avoidWrap) {\n      if (i >= this.data.list.length) i = avoidWrap ? this.data.list.length - 1 : 0;else if (i < 0) i = avoidWrap ? 0 : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n\n      if (node) {\n        node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n        node.removeAttribute(\"aria-selected\");\n      }\n\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      node.setAttribute(\"aria-selected\", \"true\");\n      this.completion.cm.getInputField().setAttribute(\"aria-activedescendant\", node.id);\n      this.scrollToActive();\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n    scrollToActive: function scrollToActive() {\n      var selectedHintRange = this.getSelectedHintRange();\n      var node1 = this.hints.childNodes[selectedHintRange.from];\n      var node2 = this.hints.childNodes[selectedHintRange.to];\n      var firstNode = this.hints.firstChild;\n      if (node1.offsetTop < this.hints.scrollTop) this.hints.scrollTop = node1.offsetTop - firstNode.offsetTop;else if (node2.offsetTop + node2.offsetHeight > this.hints.scrollTop + this.hints.clientHeight) this.hints.scrollTop = node2.offsetTop + node2.offsetHeight - this.hints.clientHeight + firstNode.offsetTop;\n    },\n    screenAmount: function screenAmount() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    },\n    getSelectedHintRange: function getSelectedHintRange() {\n      var margin = this.completion.options.scrollMargin || 0;\n      return {\n        from: Math.max(0, this.selectedHint - margin),\n        to: Math.min(this.data.list.length - 1, this.selectedHint + margin)\n      };\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers;\n    var result = [];\n\n    for (var i = 0; i < helpers.length; i++) {\n      if (helpers[i].supportsSelection) result.push(helpers[i]);\n    }\n\n    return result;\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options);\n    } else {\n      var result = hint(cm, options);\n      if (result && result.then) result.then(callback);else callback(result);\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"),\n        words;\n\n    if (helpers.length) {\n      var resolved = function resolved(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n\n        function run(i) {\n          if (i == app.length) return callback(null);\n          fetchHints(app[i], cm, options, function (result) {\n            if (result && result.list.length > 0) callback(result);else run(i + 1);\n          });\n        }\n\n        run(0);\n      };\n\n      resolved.async = true;\n      resolved.supportsSelection = true;\n      return resolved;\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function (cm) {\n        return CodeMirror.hint.fromList(cm, {\n          words: words\n        });\n      };\n    } else if (CodeMirror.hint.anyword) {\n      return function (cm, options) {\n        return CodeMirror.hint.anyword(cm, options);\n      };\n    } else {\n      return function () {};\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function (cm, options) {\n    var cur = cm.getCursor(),\n        token = cm.getTokenAt(cur);\n    var term,\n        from = CodeMirror.Pos(cur.line, token.start),\n        to = cur;\n\n    if (token.start < cur.ch && /\\w/.test(token.string.charAt(cur.ch - token.start - 1))) {\n      term = token.string.substr(0, cur.ch - token.start);\n    } else {\n      term = \"\";\n      from = cur;\n    }\n\n    var found = [];\n\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term) found.push(word);\n    }\n\n    if (found.length) return {\n      list: found,\n      from: from,\n      to: to\n    };\n  });\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnPick: true,\n    closeOnUnfocus: true,\n    updateOnCursorActivity: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null,\n    paddingForScrollbar: true,\n    moveOnOverlap: true\n  };\n  CodeMirror.defineOption(\"hintOptions\", null);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/hint/show-hint.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/addon/hint/show-hint.js");
/******/ 	
/******/ })()
;