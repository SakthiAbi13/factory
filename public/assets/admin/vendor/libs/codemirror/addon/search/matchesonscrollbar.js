/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/scroll/annotatescrollbar.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/scroll/annotatescrollbar.js ***!
  \***********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function (options) {\n    if (typeof options == \"string\") options = {\n      className: options\n    };\n    return new Annotation(this, options);\n  });\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function () {\n        self.redraw();\n      }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function () {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function () {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false) cm.on(\"changes\", this.changeHandler = function () {\n      scheduleRedraw(250);\n    });\n  }\n\n  Annotation.prototype.computeScale = function () {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) / cm.getScrollerElement().scrollHeight;\n\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function (annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function (compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm,\n        hScale = this.hScale;\n    var frag = document.createDocumentFragment(),\n        anns = this.annotations;\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null,\n        curLineObj = null;\n\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(pos.line);\n        var visual = cm.getLineHandleVisualStart(curLineObj);\n\n        if (visual != curLineObj) {\n          curLine = cm.getLineNumber(visual);\n          curLineObj = visual;\n        }\n      }\n\n      if (curLineObj.widgets && curLineObj.widgets.length || wrapping && curLineObj.height > singleLineH) return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine();\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \" + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function () {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"changes\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/scroll/annotatescrollbar.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/addon/search/matchesonscrollbar.js":
/*!************************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/search/matchesonscrollbar.js ***!
  \************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(/*! ./searchcursor */ \"./resources/assets/vendor/libs/codemirror/addon/search/searchcursor.js\"), __webpack_require__(/*! ../scroll/annotatescrollbar */ \"./resources/assets/vendor/libs/codemirror/addon/scroll/annotatescrollbar.js\"));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), __webpack_require__(/*! ./searchcursor */ \"./resources/assets/vendor/libs/codemirror/addon/search/searchcursor.js\"), __webpack_require__(/*! ../scroll/annotatescrollbar */ \"./resources/assets/vendor/libs/codemirror/addon/scroll/annotatescrollbar.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"showMatchesOnScrollbar\", function (query, caseFold, options) {\n    if (typeof options == \"string\") options = {\n      className: options\n    };\n    if (!options) options = {};\n    return new SearchAnnotation(this, query, caseFold, options);\n  });\n\n  function SearchAnnotation(cm, query, caseFold, options) {\n    this.cm = cm;\n    this.options = options;\n    var annotateOptions = {\n      listenForChanges: false\n    };\n\n    for (var prop in options) {\n      annotateOptions[prop] = options[prop];\n    }\n\n    if (!annotateOptions.className) annotateOptions.className = \"CodeMirror-search-match\";\n    this.annotation = cm.annotateScrollbar(annotateOptions);\n    this.query = query;\n    this.caseFold = caseFold;\n    this.gap = {\n      from: cm.firstLine(),\n      to: cm.lastLine() + 1\n    };\n    this.matches = [];\n    this.update = null;\n    this.findMatches();\n    this.annotation.update(this.matches);\n    var self = this;\n    cm.on(\"change\", this.changeHandler = function (_cm, change) {\n      self.onChange(change);\n    });\n  }\n\n  var MAX_MATCHES = 1000;\n\n  SearchAnnotation.prototype.findMatches = function () {\n    if (!this.gap) return;\n\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match.from.line >= this.gap.to) break;\n      if (match.to.line >= this.gap.from) this.matches.splice(i--, 1);\n    }\n\n    var cursor = this.cm.getSearchCursor(this.query, CodeMirror.Pos(this.gap.from, 0), {\n      caseFold: this.caseFold,\n      multiline: this.options.multiline\n    });\n    var maxMatches = this.options && this.options.maxMatches || MAX_MATCHES;\n\n    while (cursor.findNext()) {\n      var match = {\n        from: cursor.from(),\n        to: cursor.to()\n      };\n      if (match.from.line >= this.gap.to) break;\n      this.matches.splice(i++, 0, match);\n      if (this.matches.length > maxMatches) break;\n    }\n\n    this.gap = null;\n  };\n\n  function offsetLine(line, changeStart, sizeChange) {\n    if (line <= changeStart) return line;\n    return Math.max(changeStart, line + sizeChange);\n  }\n\n  SearchAnnotation.prototype.onChange = function (change) {\n    var startLine = change.from.line;\n    var endLine = CodeMirror.changeEnd(change).line;\n    var sizeChange = endLine - change.to.line;\n\n    if (this.gap) {\n      this.gap.from = Math.min(offsetLine(this.gap.from, startLine, sizeChange), change.from.line);\n      this.gap.to = Math.max(offsetLine(this.gap.to, startLine, sizeChange), change.from.line);\n    } else {\n      this.gap = {\n        from: change.from.line,\n        to: endLine + 1\n      };\n    }\n\n    if (sizeChange) for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      var newFrom = offsetLine(match.from.line, startLine, sizeChange);\n      if (newFrom != match.from.line) match.from = CodeMirror.Pos(newFrom, match.from.ch);\n      var newTo = offsetLine(match.to.line, startLine, sizeChange);\n      if (newTo != match.to.line) match.to = CodeMirror.Pos(newTo, match.to.ch);\n    }\n    clearTimeout(this.update);\n    var self = this;\n    this.update = setTimeout(function () {\n      self.updateAfterChange();\n    }, 250);\n  };\n\n  SearchAnnotation.prototype.updateAfterChange = function () {\n    this.findMatches();\n    this.annotation.update(this.matches);\n  };\n\n  SearchAnnotation.prototype.clear = function () {\n    this.cm.off(\"change\", this.changeHandler);\n    this.annotation.clear();\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/search/matchesonscrollbar.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/addon/search/searchcursor.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/search/searchcursor.js ***!
  \******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags;\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\") + (regexp.global ? \"g\" : \"\") + (regexp.multiline ? \"m\" : \"\");\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp),\n        target = current;\n\n    for (var i = 0; i < flags.length; i++) {\n      if (target.indexOf(flags.charAt(i)) == -1) target += flags.charAt(i);\n    }\n\n    return current == target ? regexp : new RegExp(regexp.source, target);\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source);\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch;\n      var string = doc.getLine(line),\n          match = regexp.exec(string);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start);\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n        chunk = 1;\n\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break;\n        var curLine = doc.getLine(line++);\n        string = string == null ? curLine : string + \"\\n\" + curLine;\n      }\n\n      chunk = chunk * 2;\n      regexp.lastIndex = start.ch;\n      var match = regexp.exec(string);\n\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n            inside = match[0].split(\"\\n\");\n        var startLine = start.line + before.length - 1,\n            startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match,\n        from = 0;\n\n    while (from <= string.length) {\n      regexp.lastIndex = from;\n      var newMatch = regexp.exec(string);\n      if (!newMatch) break;\n      var end = newMatch.index + newMatch[0].length;\n      if (end > string.length - endMargin) break;\n      if (!match || end > match.index + match[0].length) match = newMatch;\n      from = newMatch.index + 1;\n    }\n\n    return match;\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\");\n\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line);\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch);\n      if (match) return {\n        from: Pos(line, match.index),\n        to: Pos(line, match.index + match[0].length),\n        match: match\n      };\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start);\n    regexp = ensureFlags(regexp, \"gm\");\n    var string,\n        chunkSize = 1,\n        endMargin = doc.getLine(start.line).length - start.ch;\n\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--);\n        string = string == null ? curLine : curLine + \"\\n\" + string;\n      }\n\n      chunkSize *= 2;\n      var match = lastMatchIn(string, regexp, endMargin);\n\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"),\n            inside = match[0].split(\"\\n\");\n        var startLine = line + before.length,\n            startCh = before[before.length - 1].length;\n        return {\n          from: Pos(startLine, startCh),\n          to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n          match: match\n        };\n      }\n    }\n  }\n\n  var doFold, noFold;\n\n  if (String.prototype.normalize) {\n    doFold = function doFold(str) {\n      return str.normalize(\"NFD\").toLowerCase();\n    };\n\n    noFold = function noFold(str) {\n      return str.normalize(\"NFD\");\n    };\n  } else {\n    doFold = function doFold(str) {\n      return str.toLowerCase();\n    };\n\n    noFold = function noFold(str) {\n      return str;\n    };\n  } // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n\n\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos;\n\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min;\n      var mid = min + max >> 1;\n      var len = foldFunc(orig.slice(0, mid)).length;\n      if (len == pos) return mid;else if (len > pos) max = mid;else min = mid + 1;\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch),\n          string = fold(orig);\n\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0]);\n        if (found == -1) continue search;\n        var start = adjustPos(orig, string, found, fold) + ch;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)\n        };\n      } else {\n        var cutFrom = string.length - lines[0].length;\n        if (string.slice(cutFrom) != lines[0]) continue search;\n\n        for (var i = 1; i < lines.length - 1; i++) {\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search;\n        }\n\n        var end = doc.getLine(line + lines.length - 1),\n            endString = fold(end),\n            lastLine = lines[lines.length - 1];\n        if (endString.slice(0, lastLine.length) != lastLine) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n          to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))\n        };\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null;\n    var fold = caseFold ? doFold : noFold;\n    var lines = fold(query).split(/\\r|\\n\\r?/);\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line);\n      if (ch > -1) orig = orig.slice(0, ch);\n      var string = fold(orig);\n\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0]);\n        if (found == -1) continue search;\n        return {\n          from: Pos(line, adjustPos(orig, string, found, fold)),\n          to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))\n        };\n      } else {\n        var lastLine = lines[lines.length - 1];\n        if (string.slice(0, lastLine.length) != lastLine) continue search;\n\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++) {\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search;\n        }\n\n        var top = doc.getLine(line + 1 - lines.length),\n            topString = fold(top);\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search;\n        return {\n          from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n          to: Pos(line, adjustPos(orig, string, lastLine.length, fold))\n        };\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false;\n    this.afterEmptyMatch = false;\n    this.doc = doc;\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {\n      from: pos,\n      to: pos\n    };\n    var caseFold;\n\n    if (_typeof(options) == \"object\") {\n      caseFold = options.caseFold;\n    } else {\n      // Backwards compat for when caseFold was the 4th argument\n      caseFold = options;\n      options = null;\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false;\n\n      this.matches = function (reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold);\n      };\n    } else {\n      query = ensureFlags(query, \"gm\");\n      if (!options || options.multiline !== false) this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos);\n      };else this.matches = function (reverse, pos) {\n        return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos);\n      };\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function findNext() {\n      return this.find(false);\n    },\n    findPrevious: function findPrevious() {\n      return this.find(true);\n    },\n    find: function find(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch);\n\n        if (reverse) {\n          head.ch--;\n\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n          return this.atOccurrence = false;\n        }\n      }\n\n      var result = this.matches(reverse, head);\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0;\n\n      if (result) {\n        this.pos = result;\n        this.atOccurrence = true;\n        return this.pos.match || true;\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0);\n        this.pos = {\n          from: end,\n          to: end\n        };\n        return this.atOccurrence = false;\n      }\n    },\n    from: function from() {\n      if (this.atOccurrence) return this.pos.from;\n    },\n    to: function to() {\n      if (this.atOccurrence) return this.pos.to;\n    },\n    replace: function replace(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1, lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n  CodeMirror.defineExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function (query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n  CodeMirror.defineExtension(\"selectMatches\", function (query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({\n        anchor: cur.from(),\n        head: cur.to()\n      });\n    }\n\n    if (ranges.length) this.setSelections(ranges, 0);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/search/searchcursor.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/addon/search/matchesonscrollbar.js");
/******/ 	
/******/ })()
;