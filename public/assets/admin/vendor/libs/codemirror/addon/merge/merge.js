/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/merge/merge.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/merge/merge.js ***!
  \**********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// declare global: diff_match_patch, DIFF_INSERT, DIFF_DELETE, DIFF_EQUAL\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))); // Note non-packaged dependency diff_match_patch\n  else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'diff_match_patch'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  var svgNS = \"http://www.w3.org/2000/svg\";\n\n  function DiffView(mv, type) {\n    this.mv = mv;\n    this.type = type;\n    this.classes = type == \"left\" ? {\n      chunk: \"CodeMirror-merge-l-chunk\",\n      start: \"CodeMirror-merge-l-chunk-start\",\n      end: \"CodeMirror-merge-l-chunk-end\",\n      insert: \"CodeMirror-merge-l-inserted\",\n      del: \"CodeMirror-merge-l-deleted\",\n      connect: \"CodeMirror-merge-l-connect\"\n    } : {\n      chunk: \"CodeMirror-merge-r-chunk\",\n      start: \"CodeMirror-merge-r-chunk-start\",\n      end: \"CodeMirror-merge-r-chunk-end\",\n      insert: \"CodeMirror-merge-r-inserted\",\n      del: \"CodeMirror-merge-r-deleted\",\n      connect: \"CodeMirror-merge-r-connect\"\n    };\n  }\n\n  DiffView.prototype = {\n    constructor: DiffView,\n    init: function init(pane, orig, options) {\n      this.edit = this.mv.edit;\n      ;\n      (this.edit.state.diffViews || (this.edit.state.diffViews = [])).push(this);\n      this.orig = CodeMirror(pane, copyObj({\n        value: orig,\n        readOnly: !this.mv.options.allowEditingOriginals\n      }, copyObj(options)));\n\n      if (this.mv.options.connect == \"align\") {\n        if (!this.edit.state.trackAlignable) this.edit.state.trackAlignable = new TrackAlignable(this.edit);\n        this.orig.state.trackAlignable = new TrackAlignable(this.orig);\n      }\n\n      this.lockButton.title = this.edit.phrase(\"Toggle locked scrolling\");\n      this.orig.state.diffViews = [this];\n      var classLocation = options.chunkClassLocation || \"background\";\n      if (Object.prototype.toString.call(classLocation) != \"[object Array]\") classLocation = [classLocation];\n      this.classes.classLocation = classLocation;\n      this.diff = getDiff(asString(orig), asString(options.value), this.mv.options.ignoreWhitespace);\n      this.chunks = getChunks(this.diff);\n      this.diffOutOfDate = this.dealigned = false;\n      this.needsScrollSync = null;\n      this.showDifferences = options.showDifferences !== false;\n    },\n    registerEvents: function registerEvents(otherDv) {\n      this.forceUpdate = registerUpdate(this);\n      setScrollLock(this, true, false);\n      registerScroll(this, otherDv);\n    },\n    setShowDifferences: function setShowDifferences(val) {\n      val = val !== false;\n\n      if (val != this.showDifferences) {\n        this.showDifferences = val;\n        this.forceUpdate(\"full\");\n      }\n    }\n  };\n\n  function ensureDiff(dv) {\n    if (dv.diffOutOfDate) {\n      dv.diff = getDiff(dv.orig.getValue(), dv.edit.getValue(), dv.mv.options.ignoreWhitespace);\n      dv.chunks = getChunks(dv.diff);\n      dv.diffOutOfDate = false;\n      CodeMirror.signal(dv.edit, \"updateDiff\", dv.diff);\n    }\n  }\n\n  var updating = false;\n\n  function registerUpdate(dv) {\n    var edit = {\n      from: 0,\n      to: 0,\n      marked: []\n    };\n    var orig = {\n      from: 0,\n      to: 0,\n      marked: []\n    };\n    var debounceChange,\n        updatingFast = false;\n\n    function update(mode) {\n      updating = true;\n      updatingFast = false;\n\n      if (mode == \"full\") {\n        if (dv.svg) clear(dv.svg);\n        if (dv.copyButtons) clear(dv.copyButtons);\n        clearMarks(dv.edit, edit.marked, dv.classes);\n        clearMarks(dv.orig, orig.marked, dv.classes);\n        edit.from = edit.to = orig.from = orig.to = 0;\n      }\n\n      ensureDiff(dv);\n\n      if (dv.showDifferences) {\n        updateMarks(dv.edit, dv.diff, edit, DIFF_INSERT, dv.classes);\n        updateMarks(dv.orig, dv.diff, orig, DIFF_DELETE, dv.classes);\n      }\n\n      if (dv.mv.options.connect == \"align\") alignChunks(dv);\n      makeConnections(dv);\n      if (dv.needsScrollSync != null) syncScroll(dv, dv.needsScrollSync);\n      updating = false;\n    }\n\n    function setDealign(fast) {\n      if (updating) return;\n      dv.dealigned = true;\n      set(fast);\n    }\n\n    function set(fast) {\n      if (updating || updatingFast) return;\n      clearTimeout(debounceChange);\n      if (fast === true) updatingFast = true;\n      debounceChange = setTimeout(update, fast === true ? 20 : 250);\n    }\n\n    function change(_cm, change) {\n      if (!dv.diffOutOfDate) {\n        dv.diffOutOfDate = true;\n        edit.from = edit.to = orig.from = orig.to = 0;\n      } // Update faster when a line was added/removed\n\n\n      setDealign(change.text.length - 1 != change.to.line - change.from.line);\n    }\n\n    function swapDoc() {\n      dv.diffOutOfDate = true;\n      dv.dealigned = true;\n      update(\"full\");\n    }\n\n    dv.edit.on(\"change\", change);\n    dv.orig.on(\"change\", change);\n    dv.edit.on(\"swapDoc\", swapDoc);\n    dv.orig.on(\"swapDoc\", swapDoc);\n\n    if (dv.mv.options.connect == \"align\") {\n      CodeMirror.on(dv.edit.state.trackAlignable, \"realign\", setDealign);\n      CodeMirror.on(dv.orig.state.trackAlignable, \"realign\", setDealign);\n    }\n\n    dv.edit.on(\"viewportChange\", function () {\n      set(false);\n    });\n    dv.orig.on(\"viewportChange\", function () {\n      set(false);\n    });\n    update();\n    return update;\n  }\n\n  function registerScroll(dv, otherDv) {\n    dv.edit.on(\"scroll\", function () {\n      syncScroll(dv, true) && makeConnections(dv);\n    });\n    dv.orig.on(\"scroll\", function () {\n      syncScroll(dv, false) && makeConnections(dv);\n      if (otherDv) syncScroll(otherDv, true) && makeConnections(otherDv);\n    });\n  }\n\n  function syncScroll(dv, toOrig) {\n    // Change handler will do a refresh after a timeout when diff is out of date\n    if (dv.diffOutOfDate) {\n      if (dv.lockScroll && dv.needsScrollSync == null) dv.needsScrollSync = toOrig;\n      return false;\n    }\n\n    dv.needsScrollSync = null;\n    if (!dv.lockScroll) return true;\n    var editor,\n        other,\n        now = +new Date();\n\n    if (toOrig) {\n      editor = dv.edit;\n      other = dv.orig;\n    } else {\n      editor = dv.orig;\n      other = dv.edit;\n    } // Don't take action if the position of this editor was recently set\n    // (to prevent feedback loops)\n\n\n    if (editor.state.scrollSetBy == dv && (editor.state.scrollSetAt || 0) + 250 > now) return false;\n    var sInfo = editor.getScrollInfo();\n\n    if (dv.mv.options.connect == \"align\") {\n      targetPos = sInfo.top;\n    } else {\n      var halfScreen = .5 * sInfo.clientHeight,\n          midY = sInfo.top + halfScreen;\n      var mid = editor.lineAtHeight(midY, \"local\");\n      var around = chunkBoundariesAround(dv.chunks, mid, toOrig);\n      var off = getOffsets(editor, toOrig ? around.edit : around.orig);\n      var offOther = getOffsets(other, toOrig ? around.orig : around.edit);\n      var ratio = (midY - off.top) / (off.bot - off.top);\n      var targetPos = offOther.top - halfScreen + ratio * (offOther.bot - offOther.top);\n      var botDist, mix; // Some careful tweaking to make sure no space is left out of view\n      // when scrolling to top or bottom.\n\n      if (targetPos > sInfo.top && (mix = sInfo.top / halfScreen) < 1) {\n        targetPos = targetPos * mix + sInfo.top * (1 - mix);\n      } else if ((botDist = sInfo.height - sInfo.clientHeight - sInfo.top) < halfScreen) {\n        var otherInfo = other.getScrollInfo();\n        var botDistOther = otherInfo.height - otherInfo.clientHeight - targetPos;\n        if (botDistOther > botDist && (mix = botDist / halfScreen) < 1) targetPos = targetPos * mix + (otherInfo.height - otherInfo.clientHeight - botDist) * (1 - mix);\n      }\n    }\n\n    other.scrollTo(sInfo.left, targetPos);\n    other.state.scrollSetAt = now;\n    other.state.scrollSetBy = dv;\n    return true;\n  }\n\n  function getOffsets(editor, around) {\n    var bot = around.after;\n    if (bot == null) bot = editor.lastLine() + 1;\n    return {\n      top: editor.heightAtLine(around.before || 0, \"local\"),\n      bot: editor.heightAtLine(bot, \"local\")\n    };\n  }\n\n  function setScrollLock(dv, val, action) {\n    dv.lockScroll = val;\n    if (val && action != false) syncScroll(dv, DIFF_INSERT) && makeConnections(dv);\n    (val ? CodeMirror.addClass : CodeMirror.rmClass)(dv.lockButton, \"CodeMirror-merge-scrolllock-enabled\");\n  } // Updating the marks for editor content\n\n\n  function removeClass(editor, line, classes) {\n    var locs = classes.classLocation;\n\n    for (var i = 0; i < locs.length; i++) {\n      editor.removeLineClass(line, locs[i], classes.chunk);\n      editor.removeLineClass(line, locs[i], classes.start);\n      editor.removeLineClass(line, locs[i], classes.end);\n    }\n  }\n\n  function clearMarks(editor, arr, classes) {\n    for (var i = 0; i < arr.length; ++i) {\n      var mark = arr[i];\n      if (mark instanceof CodeMirror.TextMarker) mark.clear();else if (mark.parent) removeClass(editor, mark, classes);\n    }\n\n    arr.length = 0;\n  } // FIXME maybe add a margin around viewport to prevent too many updates\n\n\n  function updateMarks(editor, diff, state, type, classes) {\n    var vp = editor.getViewport();\n    editor.operation(function () {\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        clearMarks(editor, state.marked, classes);\n        markChanges(editor, diff, type, state.marked, vp.from, vp.to, classes);\n        state.from = vp.from;\n        state.to = vp.to;\n      } else {\n        if (vp.from < state.from) {\n          markChanges(editor, diff, type, state.marked, vp.from, state.from, classes);\n          state.from = vp.from;\n        }\n\n        if (vp.to > state.to) {\n          markChanges(editor, diff, type, state.marked, state.to, vp.to, classes);\n          state.to = vp.to;\n        }\n      }\n    });\n  }\n\n  function addClass(editor, lineNr, classes, main, start, end) {\n    var locs = classes.classLocation,\n        line = editor.getLineHandle(lineNr);\n\n    for (var i = 0; i < locs.length; i++) {\n      if (main) editor.addLineClass(line, locs[i], classes.chunk);\n      if (start) editor.addLineClass(line, locs[i], classes.start);\n      if (end) editor.addLineClass(line, locs[i], classes.end);\n    }\n\n    return line;\n  }\n\n  function markChanges(editor, diff, type, marks, from, to, classes) {\n    var pos = Pos(0, 0);\n    var top = Pos(from, 0),\n        bot = editor.clipPos(Pos(to - 1));\n    var cls = type == DIFF_DELETE ? classes.del : classes.insert;\n\n    function markChunk(start, end) {\n      var bfrom = Math.max(from, start),\n          bto = Math.min(to, end);\n\n      for (var i = bfrom; i < bto; ++i) {\n        marks.push(addClass(editor, i, classes, true, i == start, i == end - 1));\n      } // When the chunk is empty, make sure a horizontal line shows up\n\n\n      if (start == end && bfrom == end && bto == end) {\n        if (bfrom) marks.push(addClass(editor, bfrom - 1, classes, false, false, true));else marks.push(addClass(editor, bfrom, classes, false, true, false));\n      }\n    }\n\n    var chunkStart = 0,\n        pending = false;\n\n    for (var i = 0; i < diff.length; ++i) {\n      var part = diff[i],\n          tp = part[0],\n          str = part[1];\n\n      if (tp == DIFF_EQUAL) {\n        var cleanFrom = pos.line + (startOfLineClean(diff, i) ? 0 : 1);\n        moveOver(pos, str);\n        var cleanTo = pos.line + (endOfLineClean(diff, i) ? 1 : 0);\n\n        if (cleanTo > cleanFrom) {\n          if (pending) {\n            markChunk(chunkStart, cleanFrom);\n            pending = false;\n          }\n\n          chunkStart = cleanTo;\n        }\n      } else {\n        pending = true;\n\n        if (tp == type) {\n          var end = moveOver(pos, str, true);\n          var a = posMax(top, pos),\n              b = posMin(bot, end);\n          if (!posEq(a, b)) marks.push(editor.markText(a, b, {\n            className: cls\n          }));\n          pos = end;\n        }\n      }\n    }\n\n    if (pending) markChunk(chunkStart, pos.line + 1);\n  } // Updating the gap between editor and original\n\n\n  function makeConnections(dv) {\n    if (!dv.showDifferences) return;\n\n    if (dv.svg) {\n      clear(dv.svg);\n      var w = dv.gap.offsetWidth;\n      attrs(dv.svg, \"width\", w, \"height\", dv.gap.offsetHeight);\n    }\n\n    if (dv.copyButtons) clear(dv.copyButtons);\n    var vpEdit = dv.edit.getViewport(),\n        vpOrig = dv.orig.getViewport();\n    var outerTop = dv.mv.wrap.getBoundingClientRect().top;\n    var sTopEdit = outerTop - dv.edit.getScrollerElement().getBoundingClientRect().top + dv.edit.getScrollInfo().top;\n    var sTopOrig = outerTop - dv.orig.getScrollerElement().getBoundingClientRect().top + dv.orig.getScrollInfo().top;\n\n    for (var i = 0; i < dv.chunks.length; i++) {\n      var ch = dv.chunks[i];\n      if (ch.editFrom <= vpEdit.to && ch.editTo >= vpEdit.from && ch.origFrom <= vpOrig.to && ch.origTo >= vpOrig.from) drawConnectorsForChunk(dv, ch, sTopOrig, sTopEdit, w);\n    }\n  }\n\n  function getMatchingOrigLine(editLine, chunks) {\n    var editStart = 0,\n        origStart = 0;\n\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      if (chunk.editTo > editLine && chunk.editFrom <= editLine) return null;\n      if (chunk.editFrom > editLine) break;\n      editStart = chunk.editTo;\n      origStart = chunk.origTo;\n    }\n\n    return origStart + (editLine - editStart);\n  } // Combines information about chunks and widgets/markers to return\n  // an array of lines, in a single editor, that probably need to be\n  // aligned with their counterparts in the editor next to it.\n\n\n  function alignableFor(cm, chunks, isOrig) {\n    var tracker = cm.state.trackAlignable;\n    var start = cm.firstLine(),\n        trackI = 0;\n    var result = [];\n\n    for (var i = 0;; i++) {\n      var chunk = chunks[i];\n      var chunkStart = !chunk ? 1e9 : isOrig ? chunk.origFrom : chunk.editFrom;\n\n      for (; trackI < tracker.alignable.length; trackI += 2) {\n        var n = tracker.alignable[trackI] + 1;\n        if (n <= start) continue;\n        if (n <= chunkStart) result.push(n);else break;\n      }\n\n      if (!chunk) break;\n      result.push(start = isOrig ? chunk.origTo : chunk.editTo);\n    }\n\n    return result;\n  } // Given information about alignable lines in two editors, fill in\n  // the result (an array of three-element arrays) to reflect the\n  // lines that need to be aligned with each other.\n\n\n  function mergeAlignable(result, origAlignable, chunks, setIndex) {\n    var rI = 0,\n        origI = 0,\n        chunkI = 0,\n        diff = 0;\n\n    outer: for (;; rI++) {\n      var nextR = result[rI],\n          nextO = origAlignable[origI];\n      if (!nextR && nextO == null) break;\n      var rLine = nextR ? nextR[0] : 1e9,\n          oLine = nextO == null ? 1e9 : nextO;\n\n      while (chunkI < chunks.length) {\n        var chunk = chunks[chunkI];\n\n        if (chunk.origFrom <= oLine && chunk.origTo > oLine) {\n          origI++;\n          rI--;\n          continue outer;\n        }\n\n        if (chunk.editTo > rLine) {\n          if (chunk.editFrom <= rLine) continue outer;\n          break;\n        }\n\n        diff += chunk.origTo - chunk.origFrom - (chunk.editTo - chunk.editFrom);\n        chunkI++;\n      }\n\n      if (rLine == oLine - diff) {\n        nextR[setIndex] = oLine;\n        origI++;\n      } else if (rLine < oLine - diff) {\n        nextR[setIndex] = rLine + diff;\n      } else {\n        var record = [oLine - diff, null, null];\n        record[setIndex] = oLine;\n        result.splice(rI, 0, record);\n        origI++;\n      }\n    }\n  }\n\n  function findAlignedLines(dv, other) {\n    var alignable = alignableFor(dv.edit, dv.chunks, false),\n        result = [];\n    if (other) for (var i = 0, j = 0; i < other.chunks.length; i++) {\n      var n = other.chunks[i].editTo;\n\n      while (j < alignable.length && alignable[j] < n) {\n        j++;\n      }\n\n      if (j == alignable.length || alignable[j] != n) alignable.splice(j++, 0, n);\n    }\n\n    for (var i = 0; i < alignable.length; i++) {\n      result.push([alignable[i], null, null]);\n    }\n\n    mergeAlignable(result, alignableFor(dv.orig, dv.chunks, true), dv.chunks, 1);\n    if (other) mergeAlignable(result, alignableFor(other.orig, other.chunks, true), other.chunks, 2);\n    return result;\n  }\n\n  function alignChunks(dv, force) {\n    if (!dv.dealigned && !force) return;\n    if (!dv.orig.curOp) return dv.orig.operation(function () {\n      alignChunks(dv, force);\n    });\n    dv.dealigned = false;\n    var other = dv.mv.left == dv ? dv.mv.right : dv.mv.left;\n\n    if (other) {\n      ensureDiff(other);\n      other.dealigned = false;\n    }\n\n    var linesToAlign = findAlignedLines(dv, other); // Clear old aligners\n\n    var aligners = dv.mv.aligners;\n\n    for (var i = 0; i < aligners.length; i++) {\n      aligners[i].clear();\n    }\n\n    aligners.length = 0;\n    var cm = [dv.edit, dv.orig],\n        scroll = [],\n        offset = [];\n    if (other) cm.push(other.orig);\n\n    for (var i = 0; i < cm.length; i++) {\n      scroll.push(cm[i].getScrollInfo().top);\n      offset.push(-cm[i].getScrollerElement().getBoundingClientRect().top);\n    }\n\n    if (offset[0] != offset[1] || cm.length == 3 && offset[1] != offset[2]) alignLines(cm, offset, [0, 0, 0], aligners);\n\n    for (var ln = 0; ln < linesToAlign.length; ln++) {\n      alignLines(cm, offset, linesToAlign[ln], aligners);\n    }\n\n    for (var i = 0; i < cm.length; i++) {\n      cm[i].scrollTo(null, scroll[i]);\n    }\n  }\n\n  function alignLines(cm, cmOffset, lines, aligners) {\n    var maxOffset = -1e8,\n        offset = [];\n\n    for (var i = 0; i < cm.length; i++) {\n      if (lines[i] != null) {\n        var off = cm[i].heightAtLine(lines[i], \"local\") - cmOffset[i];\n        offset[i] = off;\n        maxOffset = Math.max(maxOffset, off);\n      }\n    }\n\n    for (var i = 0; i < cm.length; i++) {\n      if (lines[i] != null) {\n        var diff = maxOffset - offset[i];\n        if (diff > 1) aligners.push(padAbove(cm[i], lines[i], diff));\n      }\n    }\n  }\n\n  function padAbove(cm, line, size) {\n    var above = true;\n\n    if (line > cm.lastLine()) {\n      line--;\n      above = false;\n    }\n\n    var elt = document.createElement(\"div\");\n    elt.className = \"CodeMirror-merge-spacer\";\n    elt.style.height = size + \"px\";\n    elt.style.minWidth = \"1px\";\n    return cm.addLineWidget(line, elt, {\n      height: size,\n      above: above,\n      mergeSpacer: true,\n      handleMouseEvents: true\n    });\n  }\n\n  function drawConnectorsForChunk(dv, chunk, sTopOrig, sTopEdit, w) {\n    var flip = dv.type == \"left\";\n    var top = dv.orig.heightAtLine(chunk.origFrom, \"local\", true) - sTopOrig;\n\n    if (dv.svg) {\n      var topLpx = top;\n      var topRpx = dv.edit.heightAtLine(chunk.editFrom, \"local\", true) - sTopEdit;\n\n      if (flip) {\n        var tmp = topLpx;\n        topLpx = topRpx;\n        topRpx = tmp;\n      }\n\n      var botLpx = dv.orig.heightAtLine(chunk.origTo, \"local\", true) - sTopOrig;\n      var botRpx = dv.edit.heightAtLine(chunk.editTo, \"local\", true) - sTopEdit;\n\n      if (flip) {\n        var tmp = botLpx;\n        botLpx = botRpx;\n        botRpx = tmp;\n      }\n\n      var curveTop = \" C \" + w / 2 + \" \" + topRpx + \" \" + w / 2 + \" \" + topLpx + \" \" + (w + 2) + \" \" + topLpx;\n      var curveBot = \" C \" + w / 2 + \" \" + botLpx + \" \" + w / 2 + \" \" + botRpx + \" -1 \" + botRpx;\n      attrs(dv.svg.appendChild(document.createElementNS(svgNS, \"path\")), \"d\", \"M -1 \" + topRpx + curveTop + \" L \" + (w + 2) + \" \" + botLpx + curveBot + \" z\", \"class\", dv.classes.connect);\n    }\n\n    if (dv.copyButtons) {\n      var copy = dv.copyButtons.appendChild(elt(\"div\", dv.type == \"left\" ? \"\\u21DD\" : \"\\u21DC\", \"CodeMirror-merge-copy\"));\n      var editOriginals = dv.mv.options.allowEditingOriginals;\n      copy.title = dv.edit.phrase(editOriginals ? \"Push to left\" : \"Revert chunk\");\n      copy.chunk = chunk;\n      copy.style.top = (chunk.origTo > chunk.origFrom ? top : dv.edit.heightAtLine(chunk.editFrom, \"local\") - sTopEdit) + \"px\";\n      copy.setAttribute(\"role\", \"button\");\n\n      if (editOriginals) {\n        var topReverse = dv.edit.heightAtLine(chunk.editFrom, \"local\") - sTopEdit;\n        var copyReverse = dv.copyButtons.appendChild(elt(\"div\", dv.type == \"right\" ? \"\\u21DD\" : \"\\u21DC\", \"CodeMirror-merge-copy-reverse\"));\n        copyReverse.title = \"Push to right\";\n        copyReverse.chunk = {\n          editFrom: chunk.origFrom,\n          editTo: chunk.origTo,\n          origFrom: chunk.editFrom,\n          origTo: chunk.editTo\n        };\n        copyReverse.style.top = topReverse + \"px\";\n        dv.type == \"right\" ? copyReverse.style.left = \"2px\" : copyReverse.style.right = \"2px\";\n        copyReverse.setAttribute(\"role\", \"button\");\n      }\n    }\n  }\n\n  function copyChunk(dv, to, from, chunk) {\n    if (dv.diffOutOfDate) return;\n    var origStart = chunk.origTo > from.lastLine() ? Pos(chunk.origFrom - 1) : Pos(chunk.origFrom, 0);\n    var origEnd = Pos(chunk.origTo, 0);\n    var editStart = chunk.editTo > to.lastLine() ? Pos(chunk.editFrom - 1) : Pos(chunk.editFrom, 0);\n    var editEnd = Pos(chunk.editTo, 0);\n    var handler = dv.mv.options.revertChunk;\n    if (handler) handler(dv.mv, from, origStart, origEnd, to, editStart, editEnd);else to.replaceRange(from.getRange(origStart, origEnd), editStart, editEnd);\n  } // Merge view, containing 0, 1, or 2 diff views.\n\n\n  var MergeView = CodeMirror.MergeView = function (node, options) {\n    if (!(this instanceof MergeView)) return new MergeView(node, options);\n    this.options = options;\n    var origLeft = options.origLeft,\n        origRight = options.origRight == null ? options.orig : options.origRight;\n    var hasLeft = origLeft != null,\n        hasRight = origRight != null;\n    var panes = 1 + (hasLeft ? 1 : 0) + (hasRight ? 1 : 0);\n    var wrap = [],\n        left = this.left = null,\n        right = this.right = null;\n    var self = this;\n\n    if (hasLeft) {\n      left = this.left = new DiffView(this, \"left\");\n      var leftPane = elt(\"div\", null, \"CodeMirror-merge-pane CodeMirror-merge-left\");\n      wrap.push(leftPane);\n      wrap.push(buildGap(left));\n    }\n\n    var editPane = elt(\"div\", null, \"CodeMirror-merge-pane CodeMirror-merge-editor\");\n    wrap.push(editPane);\n\n    if (hasRight) {\n      right = this.right = new DiffView(this, \"right\");\n      wrap.push(buildGap(right));\n      var rightPane = elt(\"div\", null, \"CodeMirror-merge-pane CodeMirror-merge-right\");\n      wrap.push(rightPane);\n    }\n\n    (hasRight ? rightPane : editPane).className += \" CodeMirror-merge-pane-rightmost\";\n    wrap.push(elt(\"div\", null, null, \"height: 0; clear: both;\"));\n    var wrapElt = this.wrap = node.appendChild(elt(\"div\", wrap, \"CodeMirror-merge CodeMirror-merge-\" + panes + \"pane\"));\n    this.edit = CodeMirror(editPane, copyObj(options));\n    if (left) left.init(leftPane, origLeft, options);\n    if (right) right.init(rightPane, origRight, options);\n    if (options.collapseIdentical) this.editor().operation(function () {\n      collapseIdenticalStretches(self, options.collapseIdentical);\n    });\n\n    if (options.connect == \"align\") {\n      this.aligners = [];\n      alignChunks(this.left || this.right, true);\n    }\n\n    if (left) left.registerEvents(right);\n    if (right) right.registerEvents(left);\n\n    var onResize = function onResize() {\n      if (left) makeConnections(left);\n      if (right) makeConnections(right);\n    };\n\n    CodeMirror.on(window, \"resize\", onResize);\n    var resizeInterval = setInterval(function () {\n      for (var p = wrapElt.parentNode; p && p != document.body; p = p.parentNode) {}\n\n      if (!p) {\n        clearInterval(resizeInterval);\n        CodeMirror.off(window, \"resize\", onResize);\n      }\n    }, 5000);\n  };\n\n  function buildGap(dv) {\n    var lock = dv.lockButton = elt(\"div\", null, \"CodeMirror-merge-scrolllock\");\n    lock.setAttribute(\"role\", \"button\");\n    var lockWrap = elt(\"div\", [lock], \"CodeMirror-merge-scrolllock-wrap\");\n    CodeMirror.on(lock, \"click\", function () {\n      setScrollLock(dv, !dv.lockScroll);\n    });\n    var gapElts = [lockWrap];\n\n    if (dv.mv.options.revertButtons !== false) {\n      dv.copyButtons = elt(\"div\", null, \"CodeMirror-merge-copybuttons-\" + dv.type);\n      CodeMirror.on(dv.copyButtons, \"click\", function (e) {\n        var node = e.target || e.srcElement;\n        if (!node.chunk) return;\n\n        if (node.className == \"CodeMirror-merge-copy-reverse\") {\n          copyChunk(dv, dv.orig, dv.edit, node.chunk);\n          return;\n        }\n\n        copyChunk(dv, dv.edit, dv.orig, node.chunk);\n      });\n      gapElts.unshift(dv.copyButtons);\n    }\n\n    if (dv.mv.options.connect != \"align\") {\n      var svg = document.createElementNS && document.createElementNS(svgNS, \"svg\");\n      if (svg && !svg.createSVGRect) svg = null;\n      dv.svg = svg;\n      if (svg) gapElts.push(svg);\n    }\n\n    return dv.gap = elt(\"div\", gapElts, \"CodeMirror-merge-gap\");\n  }\n\n  MergeView.prototype = {\n    constructor: MergeView,\n    editor: function editor() {\n      return this.edit;\n    },\n    rightOriginal: function rightOriginal() {\n      return this.right && this.right.orig;\n    },\n    leftOriginal: function leftOriginal() {\n      return this.left && this.left.orig;\n    },\n    setShowDifferences: function setShowDifferences(val) {\n      if (this.right) this.right.setShowDifferences(val);\n      if (this.left) this.left.setShowDifferences(val);\n    },\n    rightChunks: function rightChunks() {\n      if (this.right) {\n        ensureDiff(this.right);\n        return this.right.chunks;\n      }\n    },\n    leftChunks: function leftChunks() {\n      if (this.left) {\n        ensureDiff(this.left);\n        return this.left.chunks;\n      }\n    }\n  };\n\n  function asString(obj) {\n    if (typeof obj == \"string\") return obj;else return obj.getValue();\n  } // Operations on diffs\n\n\n  var dmp;\n\n  function getDiff(a, b, ignoreWhitespace) {\n    if (!dmp) dmp = new diff_match_patch();\n    var diff = dmp.diff_main(a, b); // The library sometimes leaves in empty parts, which confuse the algorithm\n\n    for (var i = 0; i < diff.length; ++i) {\n      var part = diff[i];\n\n      if (ignoreWhitespace ? !/[^ \\t]/.test(part[1]) : !part[1]) {\n        diff.splice(i--, 1);\n      } else if (i && diff[i - 1][0] == part[0]) {\n        diff.splice(i--, 1);\n        diff[i][1] += part[1];\n      }\n    }\n\n    return diff;\n  }\n\n  function getChunks(diff) {\n    var chunks = [];\n    if (!diff.length) return chunks;\n    var startEdit = 0,\n        startOrig = 0;\n    var edit = Pos(0, 0),\n        orig = Pos(0, 0);\n\n    for (var i = 0; i < diff.length; ++i) {\n      var part = diff[i],\n          tp = part[0];\n\n      if (tp == DIFF_EQUAL) {\n        var startOff = !startOfLineClean(diff, i) || edit.line < startEdit || orig.line < startOrig ? 1 : 0;\n        var cleanFromEdit = edit.line + startOff,\n            cleanFromOrig = orig.line + startOff;\n        moveOver(edit, part[1], null, orig);\n        var endOff = endOfLineClean(diff, i) ? 1 : 0;\n        var cleanToEdit = edit.line + endOff,\n            cleanToOrig = orig.line + endOff;\n\n        if (cleanToEdit > cleanFromEdit) {\n          if (i) chunks.push({\n            origFrom: startOrig,\n            origTo: cleanFromOrig,\n            editFrom: startEdit,\n            editTo: cleanFromEdit\n          });\n          startEdit = cleanToEdit;\n          startOrig = cleanToOrig;\n        }\n      } else {\n        moveOver(tp == DIFF_INSERT ? edit : orig, part[1]);\n      }\n    }\n\n    if (startEdit <= edit.line || startOrig <= orig.line) chunks.push({\n      origFrom: startOrig,\n      origTo: orig.line + 1,\n      editFrom: startEdit,\n      editTo: edit.line + 1\n    });\n    return chunks;\n  }\n\n  function endOfLineClean(diff, i) {\n    if (i == diff.length - 1) return true;\n    var next = diff[i + 1][1];\n    if (next.length == 1 && i < diff.length - 2 || next.charCodeAt(0) != 10) return false;\n    if (i == diff.length - 2) return true;\n    next = diff[i + 2][1];\n    return (next.length > 1 || i == diff.length - 3) && next.charCodeAt(0) == 10;\n  }\n\n  function startOfLineClean(diff, i) {\n    if (i == 0) return true;\n    var last = diff[i - 1][1];\n    if (last.charCodeAt(last.length - 1) != 10) return false;\n    if (i == 1) return true;\n    last = diff[i - 2][1];\n    return last.charCodeAt(last.length - 1) == 10;\n  }\n\n  function chunkBoundariesAround(chunks, n, nInEdit) {\n    var beforeE, afterE, beforeO, afterO;\n\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      var fromLocal = nInEdit ? chunk.editFrom : chunk.origFrom;\n      var toLocal = nInEdit ? chunk.editTo : chunk.origTo;\n\n      if (afterE == null) {\n        if (fromLocal > n) {\n          afterE = chunk.editFrom;\n          afterO = chunk.origFrom;\n        } else if (toLocal > n) {\n          afterE = chunk.editTo;\n          afterO = chunk.origTo;\n        }\n      }\n\n      if (toLocal <= n) {\n        beforeE = chunk.editTo;\n        beforeO = chunk.origTo;\n      } else if (fromLocal <= n) {\n        beforeE = chunk.editFrom;\n        beforeO = chunk.origFrom;\n      }\n    }\n\n    return {\n      edit: {\n        before: beforeE,\n        after: afterE\n      },\n      orig: {\n        before: beforeO,\n        after: afterO\n      }\n    };\n  }\n\n  function collapseSingle(cm, from, to) {\n    cm.addLineClass(from, \"wrap\", \"CodeMirror-merge-collapsed-line\");\n    var widget = document.createElement(\"span\");\n    widget.className = \"CodeMirror-merge-collapsed-widget\";\n    widget.title = cm.phrase(\"Identical text collapsed. Click to expand.\");\n    var mark = cm.markText(Pos(from, 0), Pos(to - 1), {\n      inclusiveLeft: true,\n      inclusiveRight: true,\n      replacedWith: widget,\n      clearOnEnter: true\n    });\n\n    function clear() {\n      mark.clear();\n      cm.removeLineClass(from, \"wrap\", \"CodeMirror-merge-collapsed-line\");\n    }\n\n    if (mark.explicitlyCleared) clear();\n    CodeMirror.on(widget, \"click\", clear);\n    mark.on(\"clear\", clear);\n    CodeMirror.on(widget, \"click\", clear);\n    return {\n      mark: mark,\n      clear: clear\n    };\n  }\n\n  function collapseStretch(size, editors) {\n    var marks = [];\n\n    function clear() {\n      for (var i = 0; i < marks.length; i++) {\n        marks[i].clear();\n      }\n    }\n\n    for (var i = 0; i < editors.length; i++) {\n      var editor = editors[i];\n      var mark = collapseSingle(editor.cm, editor.line, editor.line + size);\n      marks.push(mark);\n      mark.mark.on(\"clear\", clear);\n    }\n\n    return marks[0].mark;\n  }\n\n  function unclearNearChunks(dv, margin, off, clear) {\n    for (var i = 0; i < dv.chunks.length; i++) {\n      var chunk = dv.chunks[i];\n\n      for (var l = chunk.editFrom - margin; l < chunk.editTo + margin; l++) {\n        var pos = l + off;\n        if (pos >= 0 && pos < clear.length) clear[pos] = false;\n      }\n    }\n  }\n\n  function collapseIdenticalStretches(mv, margin) {\n    if (typeof margin != \"number\") margin = 2;\n    var clear = [],\n        edit = mv.editor(),\n        off = edit.firstLine();\n\n    for (var l = off, e = edit.lastLine(); l <= e; l++) {\n      clear.push(true);\n    }\n\n    if (mv.left) unclearNearChunks(mv.left, margin, off, clear);\n    if (mv.right) unclearNearChunks(mv.right, margin, off, clear);\n\n    for (var i = 0; i < clear.length; i++) {\n      if (clear[i]) {\n        var line = i + off;\n\n        for (var size = 1; i < clear.length - 1 && clear[i + 1]; i++, size++) {}\n\n        if (size > margin) {\n          var editors = [{\n            line: line,\n            cm: edit\n          }];\n          if (mv.left) editors.push({\n            line: getMatchingOrigLine(line, mv.left.chunks),\n            cm: mv.left.orig\n          });\n          if (mv.right) editors.push({\n            line: getMatchingOrigLine(line, mv.right.chunks),\n            cm: mv.right.orig\n          });\n          var mark = collapseStretch(size, editors);\n          if (mv.options.onCollapse) mv.options.onCollapse(mv, line, size, mark);\n        }\n      }\n    }\n  } // General utilities\n\n\n  function elt(tag, content, className, style) {\n    var e = document.createElement(tag);\n    if (className) e.className = className;\n    if (style) e.style.cssText = style;\n    if (typeof content == \"string\") e.appendChild(document.createTextNode(content));else if (content) for (var i = 0; i < content.length; ++i) {\n      e.appendChild(content[i]);\n    }\n    return e;\n  }\n\n  function clear(node) {\n    for (var count = node.childNodes.length; count > 0; --count) {\n      node.removeChild(node.firstChild);\n    }\n  }\n\n  function attrs(elt) {\n    for (var i = 1; i < arguments.length; i += 2) {\n      elt.setAttribute(arguments[i], arguments[i + 1]);\n    }\n  }\n\n  function copyObj(obj, target) {\n    if (!target) target = {};\n\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) target[prop] = obj[prop];\n    }\n\n    return target;\n  }\n\n  function moveOver(pos, str, copy, other) {\n    var out = copy ? Pos(pos.line, pos.ch) : pos,\n        at = 0;\n\n    for (;;) {\n      var nl = str.indexOf(\"\\n\", at);\n      if (nl == -1) break;\n      ++out.line;\n      if (other) ++other.line;\n      at = nl + 1;\n    }\n\n    out.ch = (at ? 0 : out.ch) + (str.length - at);\n    if (other) other.ch = (at ? 0 : other.ch) + (str.length - at);\n    return out;\n  } // Tracks collapsed markers and line widgets, in order to be able to\n  // accurately align the content of two editors.\n\n\n  var F_WIDGET = 1,\n      F_WIDGET_BELOW = 2,\n      F_MARKER = 4;\n\n  function TrackAlignable(cm) {\n    this.cm = cm;\n    this.alignable = [];\n    this.height = cm.doc.height;\n    var self = this;\n    cm.on(\"markerAdded\", function (_, marker) {\n      if (!marker.collapsed) return;\n      var found = marker.find(1);\n      if (found != null) self.set(found.line, F_MARKER);\n    });\n    cm.on(\"markerCleared\", function (_, marker, _min, max) {\n      if (max != null && marker.collapsed) self.check(max, F_MARKER, self.hasMarker);\n    });\n    cm.on(\"markerChanged\", this.signal.bind(this));\n    cm.on(\"lineWidgetAdded\", function (_, widget, lineNo) {\n      if (widget.mergeSpacer) return;\n      if (widget.above) self.set(lineNo - 1, F_WIDGET_BELOW);else self.set(lineNo, F_WIDGET);\n    });\n    cm.on(\"lineWidgetCleared\", function (_, widget, lineNo) {\n      if (widget.mergeSpacer) return;\n      if (widget.above) self.check(lineNo - 1, F_WIDGET_BELOW, self.hasWidgetBelow);else self.check(lineNo, F_WIDGET, self.hasWidget);\n    });\n    cm.on(\"lineWidgetChanged\", this.signal.bind(this));\n    cm.on(\"change\", function (_, change) {\n      var start = change.from.line,\n          nBefore = change.to.line - change.from.line;\n      var nAfter = change.text.length - 1,\n          end = start + nAfter;\n      if (nBefore || nAfter) self.map(start, nBefore, nAfter);\n      self.check(end, F_MARKER, self.hasMarker);\n      if (nBefore || nAfter) self.check(change.from.line, F_MARKER, self.hasMarker);\n    });\n    cm.on(\"viewportChange\", function () {\n      if (self.cm.doc.height != self.height) self.signal();\n    });\n  }\n\n  TrackAlignable.prototype = {\n    signal: function signal() {\n      CodeMirror.signal(this, \"realign\");\n      this.height = this.cm.doc.height;\n    },\n    set: function set(n, flags) {\n      var pos = -1;\n\n      for (; pos < this.alignable.length; pos += 2) {\n        var diff = this.alignable[pos] - n;\n\n        if (diff == 0) {\n          if ((this.alignable[pos + 1] & flags) == flags) return;\n          this.alignable[pos + 1] |= flags;\n          this.signal();\n          return;\n        }\n\n        if (diff > 0) break;\n      }\n\n      this.signal();\n      this.alignable.splice(pos, 0, n, flags);\n    },\n    find: function find(n) {\n      for (var i = 0; i < this.alignable.length; i += 2) {\n        if (this.alignable[i] == n) return i;\n      }\n\n      return -1;\n    },\n    check: function check(n, flag, pred) {\n      var found = this.find(n);\n      if (found == -1 || !(this.alignable[found + 1] & flag)) return;\n\n      if (!pred.call(this, n)) {\n        this.signal();\n        var flags = this.alignable[found + 1] & ~flag;\n        if (flags) this.alignable[found + 1] = flags;else this.alignable.splice(found, 2);\n      }\n    },\n    hasMarker: function hasMarker(n) {\n      var handle = this.cm.getLineHandle(n);\n      if (handle.markedSpans) for (var i = 0; i < handle.markedSpans.length; i++) {\n        if (handle.markedSpans[i].marker.collapsed && handle.markedSpans[i].to != null) return true;\n      }\n      return false;\n    },\n    hasWidget: function hasWidget(n) {\n      var handle = this.cm.getLineHandle(n);\n      if (handle.widgets) for (var i = 0; i < handle.widgets.length; i++) {\n        if (!handle.widgets[i].above && !handle.widgets[i].mergeSpacer) return true;\n      }\n      return false;\n    },\n    hasWidgetBelow: function hasWidgetBelow(n) {\n      if (n == this.cm.lastLine()) return false;\n      var handle = this.cm.getLineHandle(n + 1);\n      if (handle.widgets) for (var i = 0; i < handle.widgets.length; i++) {\n        if (handle.widgets[i].above && !handle.widgets[i].mergeSpacer) return true;\n      }\n      return false;\n    },\n    map: function map(from, nBefore, nAfter) {\n      var diff = nAfter - nBefore,\n          to = from + nBefore,\n          widgetFrom = -1,\n          widgetTo = -1;\n\n      for (var i = 0; i < this.alignable.length; i += 2) {\n        var n = this.alignable[i];\n        if (n == from && this.alignable[i + 1] & F_WIDGET_BELOW) widgetFrom = i;\n        if (n == to && this.alignable[i + 1] & F_WIDGET_BELOW) widgetTo = i;\n        if (n <= from) continue;else if (n < to) this.alignable.splice(i--, 2);else this.alignable[i] += diff;\n      }\n\n      if (widgetFrom > -1) {\n        var flags = this.alignable[widgetFrom + 1];\n        if (flags == F_WIDGET_BELOW) this.alignable.splice(widgetFrom, 2);else this.alignable[widgetFrom + 1] = flags & ~F_WIDGET_BELOW;\n      }\n\n      if (widgetTo > -1 && nAfter) this.set(from + nAfter, F_WIDGET_BELOW);\n    }\n  };\n\n  function posMin(a, b) {\n    return (a.line - b.line || a.ch - b.ch) < 0 ? a : b;\n  }\n\n  function posMax(a, b) {\n    return (a.line - b.line || a.ch - b.ch) > 0 ? a : b;\n  }\n\n  function posEq(a, b) {\n    return a.line == b.line && a.ch == b.ch;\n  }\n\n  function findPrevDiff(chunks, start, isOrig) {\n    for (var i = chunks.length - 1; i >= 0; i--) {\n      var chunk = chunks[i];\n      var to = (isOrig ? chunk.origTo : chunk.editTo) - 1;\n      if (to < start) return to;\n    }\n  }\n\n  function findNextDiff(chunks, start, isOrig) {\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      var from = isOrig ? chunk.origFrom : chunk.editFrom;\n      if (from > start) return from;\n    }\n  }\n\n  function goNearbyDiff(cm, dir) {\n    var found = null,\n        views = cm.state.diffViews,\n        line = cm.getCursor().line;\n    if (views) for (var i = 0; i < views.length; i++) {\n      var dv = views[i],\n          isOrig = cm == dv.orig;\n      ensureDiff(dv);\n      var pos = dir < 0 ? findPrevDiff(dv.chunks, line, isOrig) : findNextDiff(dv.chunks, line, isOrig);\n      if (pos != null && (found == null || (dir < 0 ? pos > found : pos < found))) found = pos;\n    }\n    if (found != null) cm.setCursor(found, 0);else return CodeMirror.Pass;\n  }\n\n  CodeMirror.commands.goNextDiff = function (cm) {\n    return goNearbyDiff(cm, 1);\n  };\n\n  CodeMirror.commands.goPrevDiff = function (cm) {\n    return goNearbyDiff(cm, -1);\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/merge/merge.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/addon/merge/merge.js");
/******/ 	
/******/ })()
;