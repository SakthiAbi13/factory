/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/tern/tern.js":
/*!********************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/tern/tern.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Glue code between CodeMirror and Tern.\n//\n// Create a CodeMirror.TernServer to wrap an actual Tern server,\n// register open documents (CodeMirror.Doc instances) with it, and\n// call its methods to activate the assisting functions that Tern\n// provides.\n//\n// Options supported (all optional):\n// * defs: An array of JSON definition data structures.\n// * plugins: An object mapping plugin names to configuration\n//   options.\n// * getFile: A function(name, c) that can be used to access files in\n//   the project that haven't been loaded yet. Simply do c(null) to\n//   indicate that a file is not available.\n// * fileFilter: A function(value, docName, doc) that will be applied\n//   to documents before passing them on to Tern.\n// * switchToDoc: A function(name, doc) that should, when providing a\n//   multi-file view, switch the view or focus to the named file.\n// * showError: A function(editor, message) that can be used to\n//   override the way errors are displayed.\n// * completionTip: Customize the content in tooltips for completions.\n//   Is passed a single argument—the completion's data as returned by\n//   Tern—and may return a string, DOM node, or null to indicate that\n//   no tip should be shown. By default the docstring is shown.\n// * typeTip: Like completionTip, but for the tooltips shown for type\n//   queries.\n// * responseFilter: A function(doc, query, request, error, data) that\n//   will be applied to the Tern responses before treating them\n//\n//\n// It is possible to run the Tern server in a web worker by specifying\n// these additional options:\n// * useWorker: Set to true to enable web worker mode. You'll probably\n//   want to feature detect the actual value you use here, for example\n//   !!window.Worker.\n// * workerScript: The main script of the worker. Point this to\n//   wherever you are hosting worker.js from this directory.\n// * workerDeps: An array of paths pointing (relative to workerScript)\n//   to the Acorn and Tern libraries and any Tern plugins you want to\n//   load. Or, if you minified those into a single script and included\n//   them in the workerScript, simply leave this undefined.\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\"; // declare global: tern\n\n  CodeMirror.TernServer = function (options) {\n    var self = this;\n    this.options = options || {};\n    var plugins = this.options.plugins || (this.options.plugins = {});\n    if (!plugins.doc_comment) plugins.doc_comment = true;\n    this.docs = Object.create(null);\n\n    if (this.options.useWorker) {\n      this.server = new WorkerServer(this);\n    } else {\n      this.server = new tern.Server({\n        getFile: function getFile(name, c) {\n          return _getFile(self, name, c);\n        },\n        async: true,\n        defs: this.options.defs || [],\n        plugins: plugins\n      });\n    }\n\n    this.trackChange = function (doc, change) {\n      trackChange(self, doc, change);\n    };\n\n    this.cachedArgHints = null;\n    this.activeArgHints = null;\n    this.jumpStack = [];\n\n    this.getHint = function (cm, c) {\n      return hint(self, cm, c);\n    };\n\n    this.getHint.async = true;\n  };\n\n  CodeMirror.TernServer.prototype = {\n    addDoc: function addDoc(name, doc) {\n      var data = {\n        doc: doc,\n        name: name,\n        changed: null\n      };\n      this.server.addFile(name, docValue(this, data));\n      CodeMirror.on(doc, \"change\", this.trackChange);\n      return this.docs[name] = data;\n    },\n    delDoc: function delDoc(id) {\n      var found = resolveDoc(this, id);\n      if (!found) return;\n      CodeMirror.off(found.doc, \"change\", this.trackChange);\n      delete this.docs[found.name];\n      this.server.delFile(found.name);\n    },\n    hideDoc: function hideDoc(id) {\n      closeArgHints(this);\n      var found = resolveDoc(this, id);\n      if (found && found.changed) sendDoc(this, found);\n    },\n    complete: function complete(cm) {\n      cm.showHint({\n        hint: this.getHint\n      });\n    },\n    showType: function showType(cm, pos, c) {\n      showContextInfo(this, cm, pos, \"type\", c);\n    },\n    showDocs: function showDocs(cm, pos, c) {\n      showContextInfo(this, cm, pos, \"documentation\", c);\n    },\n    updateArgHints: function updateArgHints(cm) {\n      _updateArgHints(this, cm);\n    },\n    jumpToDef: function jumpToDef(cm) {\n      _jumpToDef(this, cm);\n    },\n    jumpBack: function jumpBack(cm) {\n      _jumpBack(this, cm);\n    },\n    rename: function rename(cm) {\n      _rename(this, cm);\n    },\n    selectName: function selectName(cm) {\n      _selectName(this, cm);\n    },\n    request: function request(cm, query, c, pos) {\n      var self = this;\n      var doc = findDoc(this, cm.getDoc());\n      var request = buildRequest(this, doc, query, pos);\n      var extraOptions = request.query && this.options.queryOptions && this.options.queryOptions[request.query.type];\n      if (extraOptions) for (var prop in extraOptions) {\n        request.query[prop] = extraOptions[prop];\n      }\n      this.server.request(request, function (error, data) {\n        if (!error && self.options.responseFilter) data = self.options.responseFilter(doc, query, request, error, data);\n        c(error, data);\n      });\n    },\n    destroy: function destroy() {\n      closeArgHints(this);\n\n      if (this.worker) {\n        this.worker.terminate();\n        this.worker = null;\n      }\n    }\n  };\n  var Pos = CodeMirror.Pos;\n  var cls = \"CodeMirror-Tern-\";\n  var bigDoc = 250;\n\n  function _getFile(ts, name, c) {\n    var buf = ts.docs[name];\n    if (buf) c(docValue(ts, buf));else if (ts.options.getFile) ts.options.getFile(name, c);else c(null);\n  }\n\n  function findDoc(ts, doc, name) {\n    for (var n in ts.docs) {\n      var cur = ts.docs[n];\n      if (cur.doc == doc) return cur;\n    }\n\n    if (!name) for (var i = 0;; ++i) {\n      n = \"[doc\" + (i || \"\") + \"]\";\n\n      if (!ts.docs[n]) {\n        name = n;\n        break;\n      }\n    }\n    return ts.addDoc(name, doc);\n  }\n\n  function resolveDoc(ts, id) {\n    if (typeof id == \"string\") return ts.docs[id];\n    if (id instanceof CodeMirror) id = id.getDoc();\n    if (id instanceof CodeMirror.Doc) return findDoc(ts, id);\n  }\n\n  function trackChange(ts, doc, change) {\n    var data = findDoc(ts, doc);\n    var argHints = ts.cachedArgHints;\n    if (argHints && argHints.doc == doc && cmpPos(argHints.start, change.to) >= 0) ts.cachedArgHints = null;\n    var changed = data.changed;\n    if (changed == null) data.changed = changed = {\n      from: change.from.line,\n      to: change.from.line\n    };\n    var end = change.from.line + (change.text.length - 1);\n    if (change.from.line < changed.to) changed.to = changed.to - (change.to.line - end);\n    if (end >= changed.to) changed.to = end + 1;\n    if (changed.from > change.from.line) changed.from = change.from.line;\n    if (doc.lineCount() > bigDoc && change.to - changed.from > 100) setTimeout(function () {\n      if (data.changed && data.changed.to - data.changed.from > 100) sendDoc(ts, data);\n    }, 200);\n  }\n\n  function sendDoc(ts, doc) {\n    ts.server.request({\n      files: [{\n        type: \"full\",\n        name: doc.name,\n        text: docValue(ts, doc)\n      }]\n    }, function (error) {\n      if (error) window.console.error(error);else doc.changed = null;\n    });\n  } // Completion\n\n\n  function hint(ts, cm, c) {\n    ts.request(cm, {\n      type: \"completions\",\n      types: true,\n      docs: true,\n      urls: true\n    }, function (error, data) {\n      if (error) return showError(ts, cm, error);\n      var completions = [],\n          after = \"\";\n      var from = data.start,\n          to = data.end;\n      if (cm.getRange(Pos(from.line, from.ch - 2), from) == \"[\\\"\" && cm.getRange(to, Pos(to.line, to.ch + 2)) != \"\\\"]\") after = \"\\\"]\";\n\n      for (var i = 0; i < data.completions.length; ++i) {\n        var completion = data.completions[i],\n            className = typeToIcon(completion.type);\n        if (data.guess) className += \" \" + cls + \"guess\";\n        completions.push({\n          text: completion.name + after,\n          displayText: completion.displayName || completion.name,\n          className: className,\n          data: completion\n        });\n      }\n\n      var obj = {\n        from: from,\n        to: to,\n        list: completions\n      };\n      var tooltip = null;\n      CodeMirror.on(obj, \"close\", function () {\n        remove(tooltip);\n      });\n      CodeMirror.on(obj, \"update\", function () {\n        remove(tooltip);\n      });\n      CodeMirror.on(obj, \"select\", function (cur, node) {\n        remove(tooltip);\n        var content = ts.options.completionTip ? ts.options.completionTip(cur.data) : cur.data.doc;\n\n        if (content) {\n          tooltip = makeTooltip(node.parentNode.getBoundingClientRect().right + window.pageXOffset, node.getBoundingClientRect().top + window.pageYOffset, content, cm, cls + \"hint-doc\");\n        }\n      });\n      c(obj);\n    });\n  }\n\n  function typeToIcon(type) {\n    var suffix;\n    if (type == \"?\") suffix = \"unknown\";else if (type == \"number\" || type == \"string\" || type == \"bool\") suffix = type;else if (/^fn\\(/.test(type)) suffix = \"fn\";else if (/^\\[/.test(type)) suffix = \"array\";else suffix = \"object\";\n    return cls + \"completion \" + cls + \"completion-\" + suffix;\n  } // Type queries\n\n\n  function showContextInfo(ts, cm, pos, queryName, c) {\n    ts.request(cm, queryName, function (error, data) {\n      if (error) return showError(ts, cm, error);\n\n      if (ts.options.typeTip) {\n        var tip = ts.options.typeTip(data);\n      } else {\n        var tip = elt(\"span\", null, elt(\"strong\", null, data.type || \"not found\"));\n        if (data.doc) tip.appendChild(document.createTextNode(\" — \" + data.doc));\n\n        if (data.url) {\n          tip.appendChild(document.createTextNode(\" \"));\n          var child = tip.appendChild(elt(\"a\", null, \"[docs]\"));\n          child.href = data.url;\n          child.target = \"_blank\";\n        }\n      }\n\n      tempTooltip(cm, tip, ts);\n      if (c) c();\n    }, pos);\n  } // Maintaining argument hints\n\n\n  function _updateArgHints(ts, cm) {\n    closeArgHints(ts);\n    if (cm.somethingSelected()) return;\n    var state = cm.getTokenAt(cm.getCursor()).state;\n    var inner = CodeMirror.innerMode(cm.getMode(), state);\n    if (inner.mode.name != \"javascript\") return;\n    var lex = inner.state.lexical;\n    if (lex.info != \"call\") return;\n    var ch,\n        argPos = lex.pos || 0,\n        tabSize = cm.getOption(\"tabSize\");\n\n    for (var line = cm.getCursor().line, e = Math.max(0, line - 9), found = false; line >= e; --line) {\n      var str = cm.getLine(line),\n          extra = 0;\n\n      for (var pos = 0;;) {\n        var tab = str.indexOf(\"\\t\", pos);\n        if (tab == -1) break;\n        extra += tabSize - (tab + extra) % tabSize - 1;\n        pos = tab + 1;\n      }\n\n      ch = lex.column - extra;\n\n      if (str.charAt(ch) == \"(\") {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) return;\n    var start = Pos(line, ch);\n    var cache = ts.cachedArgHints;\n    if (cache && cache.doc == cm.getDoc() && cmpPos(start, cache.start) == 0) return showArgHints(ts, cm, argPos);\n    ts.request(cm, {\n      type: \"type\",\n      preferFunction: true,\n      end: start\n    }, function (error, data) {\n      if (error || !data.type || !/^fn\\(/.test(data.type)) return;\n      ts.cachedArgHints = {\n        start: start,\n        type: parseFnType(data.type),\n        name: data.exprName || data.name || \"fn\",\n        guess: data.guess,\n        doc: cm.getDoc()\n      };\n      showArgHints(ts, cm, argPos);\n    });\n  }\n\n  function showArgHints(ts, cm, pos) {\n    closeArgHints(ts);\n    var cache = ts.cachedArgHints,\n        tp = cache.type;\n    var tip = elt(\"span\", cache.guess ? cls + \"fhint-guess\" : null, elt(\"span\", cls + \"fname\", cache.name), \"(\");\n\n    for (var i = 0; i < tp.args.length; ++i) {\n      if (i) tip.appendChild(document.createTextNode(\", \"));\n      var arg = tp.args[i];\n      tip.appendChild(elt(\"span\", cls + \"farg\" + (i == pos ? \" \" + cls + \"farg-current\" : \"\"), arg.name || \"?\"));\n\n      if (arg.type != \"?\") {\n        tip.appendChild(document.createTextNode(\":\\xA0\"));\n        tip.appendChild(elt(\"span\", cls + \"type\", arg.type));\n      }\n    }\n\n    tip.appendChild(document.createTextNode(tp.rettype ? \") ->\\xA0\" : \")\"));\n    if (tp.rettype) tip.appendChild(elt(\"span\", cls + \"type\", tp.rettype));\n    var place = cm.cursorCoords(null, \"page\");\n    var tooltip = ts.activeArgHints = makeTooltip(place.right + 1, place.bottom, tip, cm);\n    setTimeout(function () {\n      tooltip.clear = onEditorActivity(cm, function () {\n        if (ts.activeArgHints == tooltip) closeArgHints(ts);\n      });\n    }, 20);\n  }\n\n  function parseFnType(text) {\n    var args = [],\n        pos = 3;\n\n    function skipMatching(upto) {\n      var depth = 0,\n          start = pos;\n\n      for (;;) {\n        var next = text.charAt(pos);\n        if (upto.test(next) && !depth) return text.slice(start, pos);\n        if (/[{\\[\\(]/.test(next)) ++depth;else if (/[}\\]\\)]/.test(next)) --depth;\n        ++pos;\n      }\n    } // Parse arguments\n\n\n    if (text.charAt(pos) != \")\") for (;;) {\n      var name = text.slice(pos).match(/^([^, \\(\\[\\{]+): /);\n\n      if (name) {\n        pos += name[0].length;\n        name = name[1];\n      }\n\n      args.push({\n        name: name,\n        type: skipMatching(/[\\),]/)\n      });\n      if (text.charAt(pos) == \")\") break;\n      pos += 2;\n    }\n    var rettype = text.slice(pos).match(/^\\) -> (.*)$/);\n    return {\n      args: args,\n      rettype: rettype && rettype[1]\n    };\n  } // Moving to the definition of something\n\n\n  function _jumpToDef(ts, cm) {\n    function inner(varName) {\n      var req = {\n        type: \"definition\",\n        variable: varName || null\n      };\n      var doc = findDoc(ts, cm.getDoc());\n      ts.server.request(buildRequest(ts, doc, req), function (error, data) {\n        if (error) return showError(ts, cm, error);\n\n        if (!data.file && data.url) {\n          window.open(data.url);\n          return;\n        }\n\n        if (data.file) {\n          var localDoc = ts.docs[data.file],\n              found;\n\n          if (localDoc && (found = findContext(localDoc.doc, data))) {\n            ts.jumpStack.push({\n              file: doc.name,\n              start: cm.getCursor(\"from\"),\n              end: cm.getCursor(\"to\")\n            });\n            moveTo(ts, doc, localDoc, found.start, found.end);\n            return;\n          }\n        }\n\n        showError(ts, cm, \"Could not find a definition.\");\n      });\n    }\n\n    if (!atInterestingExpression(cm)) dialog(cm, \"Jump to variable\", function (name) {\n      if (name) inner(name);\n    });else inner();\n  }\n\n  function _jumpBack(ts, cm) {\n    var pos = ts.jumpStack.pop(),\n        doc = pos && ts.docs[pos.file];\n    if (!doc) return;\n    moveTo(ts, findDoc(ts, cm.getDoc()), doc, pos.start, pos.end);\n  }\n\n  function moveTo(ts, curDoc, doc, start, end) {\n    doc.doc.setSelection(start, end);\n\n    if (curDoc != doc && ts.options.switchToDoc) {\n      closeArgHints(ts);\n      ts.options.switchToDoc(doc.name, doc.doc);\n    }\n  } // The {line,ch} representation of positions makes this rather awkward.\n\n\n  function findContext(doc, data) {\n    var before = data.context.slice(0, data.contextOffset).split(\"\\n\");\n    var startLine = data.start.line - (before.length - 1);\n    var start = Pos(startLine, (before.length == 1 ? data.start.ch : doc.getLine(startLine).length) - before[0].length);\n    var text = doc.getLine(startLine).slice(start.ch);\n\n    for (var cur = startLine + 1; cur < doc.lineCount() && text.length < data.context.length; ++cur) {\n      text += \"\\n\" + doc.getLine(cur);\n    }\n\n    if (text.slice(0, data.context.length) == data.context) return data;\n    var cursor = doc.getSearchCursor(data.context, 0, false);\n    var nearest,\n        nearestDist = Infinity;\n\n    while (cursor.findNext()) {\n      var from = cursor.from(),\n          dist = Math.abs(from.line - start.line) * 10000;\n      if (!dist) dist = Math.abs(from.ch - start.ch);\n\n      if (dist < nearestDist) {\n        nearest = from;\n        nearestDist = dist;\n      }\n    }\n\n    if (!nearest) return null;\n    if (before.length == 1) nearest.ch += before[0].length;else nearest = Pos(nearest.line + (before.length - 1), before[before.length - 1].length);\n    if (data.start.line == data.end.line) var end = Pos(nearest.line, nearest.ch + (data.end.ch - data.start.ch));else var end = Pos(nearest.line + (data.end.line - data.start.line), data.end.ch);\n    return {\n      start: nearest,\n      end: end\n    };\n  }\n\n  function atInterestingExpression(cm) {\n    var pos = cm.getCursor(\"end\"),\n        tok = cm.getTokenAt(pos);\n    if (tok.start < pos.ch && tok.type == \"comment\") return false;\n    return /[\\w)\\]]/.test(cm.getLine(pos.line).slice(Math.max(pos.ch - 1, 0), pos.ch + 1));\n  } // Variable renaming\n\n\n  function _rename(ts, cm) {\n    var token = cm.getTokenAt(cm.getCursor());\n    if (!/\\w/.test(token.string)) return showError(ts, cm, \"Not at a variable\");\n    dialog(cm, \"New name for \" + token.string, function (newName) {\n      ts.request(cm, {\n        type: \"rename\",\n        newName: newName,\n        fullDocs: true\n      }, function (error, data) {\n        if (error) return showError(ts, cm, error);\n        applyChanges(ts, data.changes);\n      });\n    });\n  }\n\n  function _selectName(ts, cm) {\n    var name = findDoc(ts, cm.doc).name;\n    ts.request(cm, {\n      type: \"refs\"\n    }, function (error, data) {\n      if (error) return showError(ts, cm, error);\n      var ranges = [],\n          cur = 0;\n      var curPos = cm.getCursor();\n\n      for (var i = 0; i < data.refs.length; i++) {\n        var ref = data.refs[i];\n\n        if (ref.file == name) {\n          ranges.push({\n            anchor: ref.start,\n            head: ref.end\n          });\n          if (cmpPos(curPos, ref.start) >= 0 && cmpPos(curPos, ref.end) <= 0) cur = ranges.length - 1;\n        }\n      }\n\n      cm.setSelections(ranges, cur);\n    });\n  }\n\n  var nextChangeOrig = 0;\n\n  function applyChanges(ts, changes) {\n    var perFile = Object.create(null);\n\n    for (var i = 0; i < changes.length; ++i) {\n      var ch = changes[i];\n      (perFile[ch.file] || (perFile[ch.file] = [])).push(ch);\n    }\n\n    for (var file in perFile) {\n      var known = ts.docs[file],\n          chs = perFile[file];\n      ;\n      if (!known) continue;\n      chs.sort(function (a, b) {\n        return cmpPos(b.start, a.start);\n      });\n      var origin = \"*rename\" + ++nextChangeOrig;\n\n      for (var i = 0; i < chs.length; ++i) {\n        var ch = chs[i];\n        known.doc.replaceRange(ch.text, ch.start, ch.end, origin);\n      }\n    }\n  } // Generic request-building helper\n\n\n  function buildRequest(ts, doc, query, pos) {\n    var files = [],\n        offsetLines = 0,\n        allowFragments = !query.fullDocs;\n    if (!allowFragments) delete query.fullDocs;\n    if (typeof query == \"string\") query = {\n      type: query\n    };\n    query.lineCharPositions = true;\n\n    if (query.end == null) {\n      query.end = pos || doc.doc.getCursor(\"end\");\n      if (doc.doc.somethingSelected()) query.start = doc.doc.getCursor(\"start\");\n    }\n\n    var startPos = query.start || query.end;\n\n    if (doc.changed) {\n      if (doc.doc.lineCount() > bigDoc && allowFragments !== false && doc.changed.to - doc.changed.from < 100 && doc.changed.from <= startPos.line && doc.changed.to > query.end.line) {\n        files.push(getFragmentAround(doc, startPos, query.end));\n        query.file = \"#0\";\n        var offsetLines = files[0].offsetLines;\n        if (query.start != null) query.start = Pos(query.start.line - -offsetLines, query.start.ch);\n        query.end = Pos(query.end.line - offsetLines, query.end.ch);\n      } else {\n        files.push({\n          type: \"full\",\n          name: doc.name,\n          text: docValue(ts, doc)\n        });\n        query.file = doc.name;\n        doc.changed = null;\n      }\n    } else {\n      query.file = doc.name;\n    }\n\n    for (var name in ts.docs) {\n      var cur = ts.docs[name];\n\n      if (cur.changed && cur != doc) {\n        files.push({\n          type: \"full\",\n          name: cur.name,\n          text: docValue(ts, cur)\n        });\n        cur.changed = null;\n      }\n    }\n\n    return {\n      query: query,\n      files: files\n    };\n  }\n\n  function getFragmentAround(data, start, end) {\n    var doc = data.doc;\n    var minIndent = null,\n        minLine = null,\n        endLine,\n        tabSize = 4;\n\n    for (var p = start.line - 1, min = Math.max(0, p - 50); p >= min; --p) {\n      var line = doc.getLine(p),\n          fn = line.search(/\\bfunction\\b/);\n      if (fn < 0) continue;\n      var indent = CodeMirror.countColumn(line, null, tabSize);\n      if (minIndent != null && minIndent <= indent) continue;\n      minIndent = indent;\n      minLine = p;\n    }\n\n    if (minLine == null) minLine = min;\n    var max = Math.min(doc.lastLine(), end.line + 20);\n    if (minIndent == null || minIndent == CodeMirror.countColumn(doc.getLine(start.line), null, tabSize)) endLine = max;else for (endLine = end.line + 1; endLine < max; ++endLine) {\n      var indent = CodeMirror.countColumn(doc.getLine(endLine), null, tabSize);\n      if (indent <= minIndent) break;\n    }\n    var from = Pos(minLine, 0);\n    return {\n      type: \"part\",\n      name: data.name,\n      offsetLines: from.line,\n      text: doc.getRange(from, Pos(endLine, end.line == endLine ? null : 0))\n    };\n  } // Generic utilities\n\n\n  var cmpPos = CodeMirror.cmpPos;\n\n  function elt(tagname, cls\n  /*, ... elts*/\n  ) {\n    var e = document.createElement(tagname);\n    if (cls) e.className = cls;\n\n    for (var i = 2; i < arguments.length; ++i) {\n      var elt = arguments[i];\n      if (typeof elt == \"string\") elt = document.createTextNode(elt);\n      e.appendChild(elt);\n    }\n\n    return e;\n  }\n\n  function dialog(cm, text, f) {\n    if (cm.openDialog) cm.openDialog(text + \": <input type=text>\", f);else f(prompt(text, \"\"));\n  } // Tooltips\n\n\n  function tempTooltip(cm, content, ts) {\n    if (cm.state.ternTooltip) remove(cm.state.ternTooltip);\n    var where = cm.cursorCoords();\n    var tip = cm.state.ternTooltip = makeTooltip(where.right + 1, where.bottom, content, cm);\n\n    function maybeClear() {\n      old = true;\n      if (!mouseOnTip) clear();\n    }\n\n    function clear() {\n      cm.state.ternTooltip = null;\n      if (tip.parentNode) fadeOut(tip);\n      clearActivity();\n    }\n\n    var mouseOnTip = false,\n        old = false;\n    CodeMirror.on(tip, \"mousemove\", function () {\n      mouseOnTip = true;\n    });\n    CodeMirror.on(tip, \"mouseout\", function (e) {\n      var related = e.relatedTarget || e.toElement;\n\n      if (!related || !CodeMirror.contains(tip, related)) {\n        if (old) clear();else mouseOnTip = false;\n      }\n    });\n    setTimeout(maybeClear, ts.options.hintDelay ? ts.options.hintDelay : 1700);\n    var clearActivity = onEditorActivity(cm, clear);\n  }\n\n  function onEditorActivity(cm, f) {\n    cm.on(\"cursorActivity\", f);\n    cm.on(\"blur\", f);\n    cm.on(\"scroll\", f);\n    cm.on(\"setDoc\", f);\n    return function () {\n      cm.off(\"cursorActivity\", f);\n      cm.off(\"blur\", f);\n      cm.off(\"scroll\", f);\n      cm.off(\"setDoc\", f);\n    };\n  }\n\n  function makeTooltip(x, y, content, cm, className) {\n    var node = elt(\"div\", cls + \"tooltip\" + \" \" + (className || \"\"), content);\n    node.style.left = x + \"px\";\n    node.style.top = y + \"px\";\n    var container = ((cm.options || {}).hintOptions || {}).container || document.body;\n    container.appendChild(node);\n    var pos = cm.cursorCoords();\n    var winW = window.innerWidth;\n    var winH = window.innerHeight;\n    var box = node.getBoundingClientRect();\n    var hints = document.querySelector(\".CodeMirror-hints\");\n    var overlapY = box.bottom - winH;\n    var overlapX = box.right - winW;\n\n    if (hints && overlapX > 0) {\n      node.style.left = 0;\n      var box = node.getBoundingClientRect();\n      node.style.left = (x = x - hints.offsetWidth - box.width) + \"px\";\n      overlapX = box.right - winW;\n    }\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top,\n          curTop = pos.top - (pos.bottom - box.top);\n\n      if (curTop - height > 0) {\n        // Fits above cursor\n        node.style.top = pos.top - height + \"px\";\n      } else if (height > winH) {\n        node.style.height = winH - 5 + \"px\";\n        node.style.top = pos.bottom - box.top + \"px\";\n      }\n    }\n\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        node.style.width = winW - 5 + \"px\";\n        overlapX -= box.right - box.left - winW;\n      }\n\n      node.style.left = x - overlapX + \"px\";\n    }\n\n    return node;\n  }\n\n  function remove(node) {\n    var p = node && node.parentNode;\n    if (p) p.removeChild(node);\n  }\n\n  function fadeOut(tooltip) {\n    tooltip.style.opacity = \"0\";\n    setTimeout(function () {\n      remove(tooltip);\n    }, 1100);\n  }\n\n  function showError(ts, cm, msg) {\n    if (ts.options.showError) ts.options.showError(cm, msg);else tempTooltip(cm, String(msg), ts);\n  }\n\n  function closeArgHints(ts) {\n    if (ts.activeArgHints) {\n      if (ts.activeArgHints.clear) ts.activeArgHints.clear();\n      remove(ts.activeArgHints);\n      ts.activeArgHints = null;\n    }\n  }\n\n  function docValue(ts, doc) {\n    var val = doc.doc.getValue();\n    if (ts.options.fileFilter) val = ts.options.fileFilter(val, doc.name, doc.doc);\n    return val;\n  } // Worker wrapper\n\n\n  function WorkerServer(ts) {\n    var worker = ts.worker = new Worker(ts.options.workerScript);\n    worker.postMessage({\n      type: \"init\",\n      defs: ts.options.defs,\n      plugins: ts.options.plugins,\n      scripts: ts.options.workerDeps\n    });\n    var msgId = 0,\n        pending = {};\n\n    function send(data, c) {\n      if (c) {\n        data.id = ++msgId;\n        pending[msgId] = c;\n      }\n\n      worker.postMessage(data);\n    }\n\n    worker.onmessage = function (e) {\n      var data = e.data;\n\n      if (data.type == \"getFile\") {\n        _getFile(ts, data.name, function (err, text) {\n          send({\n            type: \"getFile\",\n            err: String(err),\n            text: text,\n            id: data.id\n          });\n        });\n      } else if (data.type == \"debug\") {\n        window.console.log(data.message);\n      } else if (data.id && pending[data.id]) {\n        pending[data.id](data.err, data.body);\n        delete pending[data.id];\n      }\n    };\n\n    worker.onerror = function (e) {\n      for (var id in pending) {\n        pending[id](e);\n      }\n\n      pending = {};\n    };\n\n    this.addFile = function (name, text) {\n      send({\n        type: \"add\",\n        name: name,\n        text: text\n      });\n    };\n\n    this.delFile = function (name) {\n      send({\n        type: \"del\",\n        name: name\n      });\n    };\n\n    this.request = function (body, c) {\n      send({\n        type: \"req\",\n        body: body\n      }, c);\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/tern/tern.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/addon/tern/tern.js");
/******/ 	
/******/ })()
;