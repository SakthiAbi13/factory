/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.runMode = function (string, modespec, callback, options) {\n    var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n    var tabSize = options && options.tabSize || CodeMirror.defaults.tabSize; // Create a tokenizing callback function if passed-in callback is a DOM element.\n\n    if (callback.appendChild) {\n      var ie = /MSIE \\d/.test(navigator.userAgent);\n      var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n      var node = callback,\n          col = 0;\n      node.innerHTML = \"\";\n\n      callback = function callback(text, style) {\n        if (text == \"\\n\") {\n          // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n          // Emitting a carriage return makes everything ok.\n          node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n          col = 0;\n          return;\n        }\n\n        var content = \"\"; // replace tabs\n\n        for (var pos = 0;;) {\n          var idx = text.indexOf(\"\\t\", pos);\n\n          if (idx == -1) {\n            content += text.slice(pos);\n            col += text.length - pos;\n            break;\n          } else {\n            col += idx - pos;\n            content += text.slice(pos, idx);\n            var size = tabSize - col % tabSize;\n            col += size;\n\n            for (var i = 0; i < size; ++i) {\n              content += \" \";\n            }\n\n            pos = idx + 1;\n          }\n        } // Create a node with token style and append it to the callback DOM element.\n\n\n        if (style) {\n          var sp = node.appendChild(document.createElement(\"span\"));\n          sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n          sp.appendChild(document.createTextNode(content));\n        } else {\n          node.appendChild(document.createTextNode(content));\n        }\n      };\n    }\n\n    var lines = CodeMirror.splitLines(string),\n        state = options && options.state || CodeMirror.startState(mode);\n\n    for (var i = 0, e = lines.length; i < e; ++i) {\n      if (i) callback(\"\\n\");\n      var stream = new CodeMirror.StringStream(lines[i], null, {\n        lookAhead: function lookAhead(n) {\n          return lines[i + n];\n        },\n        baseToken: function baseToken() {}\n      });\n      if (!stream.string && mode.blankLine) mode.blankLine(state);\n\n      while (!stream.eol()) {\n        var style = mode.token(stream, state);\n        callback(stream.current(), style, i, stream.start, state, mode);\n        stream.start = stream.pos;\n      }\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.js\n");

/***/ }),

/***/ "./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.node.js":
/*!*******************************************************************************!*\
  !*** ./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.node.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction copyObj(obj, target, overwrite) {\n  if (!target) {\n    target = {};\n  }\n\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop) && (overwrite !== false || !target.hasOwnProperty(prop))) {\n      target[prop] = obj[prop];\n    }\n  }\n\n  return target;\n} // Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\n\n\nfunction countColumn(string, end, tabSize, startIndex, startValue) {\n  if (end == null) {\n    end = string.search(/[^\\s\\u00a0]/);\n\n    if (end == -1) {\n      end = string.length;\n    }\n  }\n\n  for (var i = startIndex || 0, n = startValue || 0;;) {\n    var nextTab = string.indexOf(\"\\t\", i);\n\n    if (nextTab < 0 || nextTab >= end) {\n      return n + (end - i);\n    }\n\n    n += nextTab - i;\n    n += tabSize - n % tabSize;\n    i = nextTab + 1;\n  }\n}\n\nfunction nothing() {}\n\nfunction createObj(base, props) {\n  var inst;\n\n  if (Object.create) {\n    inst = Object.create(base);\n  } else {\n    nothing.prototype = base;\n    inst = new nothing();\n  }\n\n  if (props) {\n    copyObj(props, inst);\n  }\n\n  return inst;\n} // STRING STREAM\n// Fed to the mode parsers, provides helper functions to make\n// parsers more succinct.\n\n\nvar StringStream = function StringStream(string, tabSize, lineOracle) {\n  this.pos = this.start = 0;\n  this.string = string;\n  this.tabSize = tabSize || 8;\n  this.lastColumnPos = this.lastColumnValue = 0;\n  this.lineStart = 0;\n  this.lineOracle = lineOracle;\n};\n\nStringStream.prototype.eol = function () {\n  return this.pos >= this.string.length;\n};\n\nStringStream.prototype.sol = function () {\n  return this.pos == this.lineStart;\n};\n\nStringStream.prototype.peek = function () {\n  return this.string.charAt(this.pos) || undefined;\n};\n\nStringStream.prototype.next = function () {\n  if (this.pos < this.string.length) {\n    return this.string.charAt(this.pos++);\n  }\n};\n\nStringStream.prototype.eat = function (match) {\n  var ch = this.string.charAt(this.pos);\n  var ok;\n\n  if (typeof match == \"string\") {\n    ok = ch == match;\n  } else {\n    ok = ch && (match.test ? match.test(ch) : match(ch));\n  }\n\n  if (ok) {\n    ++this.pos;\n    return ch;\n  }\n};\n\nStringStream.prototype.eatWhile = function (match) {\n  var start = this.pos;\n\n  while (this.eat(match)) {}\n\n  return this.pos > start;\n};\n\nStringStream.prototype.eatSpace = function () {\n  var start = this.pos;\n\n  while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos))) {\n    ++this.pos;\n  }\n\n  return this.pos > start;\n};\n\nStringStream.prototype.skipToEnd = function () {\n  this.pos = this.string.length;\n};\n\nStringStream.prototype.skipTo = function (ch) {\n  var found = this.string.indexOf(ch, this.pos);\n\n  if (found > -1) {\n    this.pos = found;\n    return true;\n  }\n};\n\nStringStream.prototype.backUp = function (n) {\n  this.pos -= n;\n};\n\nStringStream.prototype.column = function () {\n  if (this.lastColumnPos < this.start) {\n    this.lastColumnValue = countColumn(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n    this.lastColumnPos = this.start;\n  }\n\n  return this.lastColumnValue - (this.lineStart ? countColumn(this.string, this.lineStart, this.tabSize) : 0);\n};\n\nStringStream.prototype.indentation = function () {\n  return countColumn(this.string, null, this.tabSize) - (this.lineStart ? countColumn(this.string, this.lineStart, this.tabSize) : 0);\n};\n\nStringStream.prototype.match = function (pattern, consume, caseInsensitive) {\n  if (typeof pattern == \"string\") {\n    var cased = function cased(str) {\n      return caseInsensitive ? str.toLowerCase() : str;\n    };\n\n    var substr = this.string.substr(this.pos, pattern.length);\n\n    if (cased(substr) == cased(pattern)) {\n      if (consume !== false) {\n        this.pos += pattern.length;\n      }\n\n      return true;\n    }\n  } else {\n    var match = this.string.slice(this.pos).match(pattern);\n\n    if (match && match.index > 0) {\n      return null;\n    }\n\n    if (match && consume !== false) {\n      this.pos += match[0].length;\n    }\n\n    return match;\n  }\n};\n\nStringStream.prototype.current = function () {\n  return this.string.slice(this.start, this.pos);\n};\n\nStringStream.prototype.hideFirstChars = function (n, inner) {\n  this.lineStart += n;\n\n  try {\n    return inner();\n  } finally {\n    this.lineStart -= n;\n  }\n};\n\nStringStream.prototype.lookAhead = function (n) {\n  var oracle = this.lineOracle;\n  return oracle && oracle.lookAhead(n);\n};\n\nStringStream.prototype.baseToken = function () {\n  var oracle = this.lineOracle;\n  return oracle && oracle.baseToken(this.pos);\n}; // Known modes, by name and by MIME\n\n\nvar modes = {},\n    mimeModes = {}; // Extra arguments are stored as the mode's dependencies, which is\n// used by (legacy) mechanisms like loadmode.js to automatically\n// load a mode. (Preferred mechanism is the require/define calls.)\n\nfunction defineMode(name, mode) {\n  if (arguments.length > 2) {\n    mode.dependencies = Array.prototype.slice.call(arguments, 2);\n  }\n\n  modes[name] = mode;\n}\n\nfunction defineMIME(mime, spec) {\n  mimeModes[mime] = spec;\n} // Given a MIME type, a {name, ...options} config object, or a name\n// string, return a mode config object.\n\n\nfunction resolveMode(spec) {\n  if (typeof spec == \"string\" && mimeModes.hasOwnProperty(spec)) {\n    spec = mimeModes[spec];\n  } else if (spec && typeof spec.name == \"string\" && mimeModes.hasOwnProperty(spec.name)) {\n    var found = mimeModes[spec.name];\n\n    if (typeof found == \"string\") {\n      found = {\n        name: found\n      };\n    }\n\n    spec = createObj(found, spec);\n    spec.name = found.name;\n  } else if (typeof spec == \"string\" && /^[\\w\\-]+\\/[\\w\\-]+\\+xml$/.test(spec)) {\n    return resolveMode(\"application/xml\");\n  } else if (typeof spec == \"string\" && /^[\\w\\-]+\\/[\\w\\-]+\\+json$/.test(spec)) {\n    return resolveMode(\"application/json\");\n  }\n\n  if (typeof spec == \"string\") {\n    return {\n      name: spec\n    };\n  } else {\n    return spec || {\n      name: \"null\"\n    };\n  }\n} // Given a mode spec (anything that resolveMode accepts), find and\n// initialize an actual mode object.\n\n\nfunction getMode(options, spec) {\n  spec = resolveMode(spec);\n  var mfactory = modes[spec.name];\n\n  if (!mfactory) {\n    return getMode(options, \"text/plain\");\n  }\n\n  var modeObj = mfactory(options, spec);\n\n  if (modeExtensions.hasOwnProperty(spec.name)) {\n    var exts = modeExtensions[spec.name];\n\n    for (var prop in exts) {\n      if (!exts.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      if (modeObj.hasOwnProperty(prop)) {\n        modeObj[\"_\" + prop] = modeObj[prop];\n      }\n\n      modeObj[prop] = exts[prop];\n    }\n  }\n\n  modeObj.name = spec.name;\n\n  if (spec.helperType) {\n    modeObj.helperType = spec.helperType;\n  }\n\n  if (spec.modeProps) {\n    for (var prop$1 in spec.modeProps) {\n      modeObj[prop$1] = spec.modeProps[prop$1];\n    }\n  }\n\n  return modeObj;\n} // This can be used to attach properties to mode objects from\n// outside the actual mode definition.\n\n\nvar modeExtensions = {};\n\nfunction extendMode(mode, properties) {\n  var exts = modeExtensions.hasOwnProperty(mode) ? modeExtensions[mode] : modeExtensions[mode] = {};\n  copyObj(properties, exts);\n}\n\nfunction copyState(mode, state) {\n  if (state === true) {\n    return state;\n  }\n\n  if (mode.copyState) {\n    return mode.copyState(state);\n  }\n\n  var nstate = {};\n\n  for (var n in state) {\n    var val = state[n];\n\n    if (val instanceof Array) {\n      val = val.concat([]);\n    }\n\n    nstate[n] = val;\n  }\n\n  return nstate;\n} // Given a mode and a state (for that mode), find the inner mode and\n// state at the position that the state refers to.\n\n\nfunction innerMode(mode, state) {\n  var info;\n\n  while (mode.innerMode) {\n    info = mode.innerMode(state);\n\n    if (!info || info.mode == mode) {\n      break;\n    }\n\n    state = info.state;\n    mode = info.mode;\n  }\n\n  return info || {\n    mode: mode,\n    state: state\n  };\n}\n\nfunction startState(mode, a1, a2) {\n  return mode.startState ? mode.startState(a1, a2) : true;\n}\n\nvar modeMethods = {\n  __proto__: null,\n  modes: modes,\n  mimeModes: mimeModes,\n  defineMode: defineMode,\n  defineMIME: defineMIME,\n  resolveMode: resolveMode,\n  getMode: getMode,\n  modeExtensions: modeExtensions,\n  extendMode: extendMode,\n  copyState: copyState,\n  innerMode: innerMode,\n  startState: startState\n}; // Copy StringStream and mode methods into exports (CodeMirror) object.\n\nexports.StringStream = StringStream;\nexports.countColumn = countColumn;\n\nfor (var exported in modeMethods) {\n  exports[exported] = modeMethods[exported];\n} // Shim library CodeMirror with the minimal CodeMirror defined above.\n\n\n__webpack_require__.c[/*require.resolve*/(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))] = __webpack_require__.c[/*require.resolve*/(/*! ./runmode.node */ \"./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.node.js\")];\n__webpack_require__.c[/*require.resolve*/(/*! ../../addon/runmode/runmode */ \"./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.js\")] = __webpack_require__.c[/*require.resolve*/(/*! ./runmode.node */ \"./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.node.js\")]; // Minimal default mode.\n\nexports.defineMode(\"null\", function () {\n  return {\n    token: function token(stream) {\n      return stream.skipToEnd();\n    }\n  };\n});\nexports.defineMIME(\"text/plain\", \"null\");\nexports.registerHelper = exports.registerGlobalHelper = Math.min;\n\nexports.splitLines = function (string) {\n  return string.split(/\\r?\\n|\\r/);\n};\n\nexports.defaults = {\n  indentUnit: 2\n}; // CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (( false ? 0 : _typeof(exports)) == \"object\" && ( false ? 0 : _typeof(module)) == \"object\") // CommonJS\n    {\n      mod(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));\n    } else if (true) // AMD\n    {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../lib/codemirror'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else // Plain browser env\n    {}\n})(function (CodeMirror) {\n  CodeMirror.runMode = function (string, modespec, callback, options) {\n    var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n    var tabSize = options && options.tabSize || CodeMirror.defaults.tabSize; // Create a tokenizing callback function if passed-in callback is a DOM element.\n\n    if (callback.appendChild) {\n      var ie = /MSIE \\d/.test(navigator.userAgent);\n      var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n      var node = callback,\n          col = 0;\n      node.innerHTML = \"\";\n\n      callback = function callback(text, style) {\n        if (text == \"\\n\") {\n          // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n          // Emitting a carriage return makes everything ok.\n          node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n          col = 0;\n          return;\n        }\n\n        var content = \"\"; // replace tabs\n\n        for (var pos = 0;;) {\n          var idx = text.indexOf(\"\\t\", pos);\n\n          if (idx == -1) {\n            content += text.slice(pos);\n            col += text.length - pos;\n            break;\n          } else {\n            col += idx - pos;\n            content += text.slice(pos, idx);\n            var size = tabSize - col % tabSize;\n            col += size;\n\n            for (var i = 0; i < size; ++i) {\n              content += \" \";\n            }\n\n            pos = idx + 1;\n          }\n        } // Create a node with token style and append it to the callback DOM element.\n\n\n        if (style) {\n          var sp = node.appendChild(document.createElement(\"span\"));\n          sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n          sp.appendChild(document.createTextNode(content));\n        } else {\n          node.appendChild(document.createTextNode(content));\n        }\n      };\n    }\n\n    var lines = CodeMirror.splitLines(string),\n        state = options && options.state || CodeMirror.startState(mode);\n\n    for (var i = 0, e = lines.length; i < e; ++i) {\n      if (i) {\n        callback(\"\\n\");\n      }\n\n      var stream = new CodeMirror.StringStream(lines[i], null, {\n        lookAhead: function lookAhead(n) {\n          return lines[i + n];\n        },\n        baseToken: function baseToken() {}\n      });\n\n      if (!stream.string && mode.blankLine) {\n        mode.blankLine(state);\n      }\n\n      while (!stream.eol()) {\n        var style = mode.token(stream, state);\n        callback(stream.current(), style, i, stream.start, state, mode);\n        stream.start = stream.pos;\n      }\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.node.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/codemirror/addon/runmode/runmode.node.js");
/******/ 	
/******/ })()
;