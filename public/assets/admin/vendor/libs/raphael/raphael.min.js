/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/raphael/raphael.min.js":
/*!*************************************************************!*\
  !*** ./resources/assets/vendor/libs/raphael/raphael.min.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"object\" == ( false ? 0 : _typeof(module)) ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(window, function () {\n  return function (t) {\n    var e = {};\n\n    function r(i) {\n      if (e[i]) return e[i].exports;\n      var n = e[i] = {\n        i: i,\n        l: !1,\n        exports: {}\n      };\n      return t[i].call(n.exports, n, n.exports, r), n.l = !0, n.exports;\n    }\n\n    return r.m = t, r.c = e, r.d = function (t, e, i) {\n      r.o(t, e) || Object.defineProperty(t, e, {\n        enumerable: !0,\n        get: i\n      });\n    }, r.r = function (t) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(t, \"__esModule\", {\n        value: !0\n      });\n    }, r.t = function (t, e) {\n      if (1 & e && (t = r(t)), 8 & e) return t;\n      if (4 & e && \"object\" == _typeof(t) && t && t.__esModule) return t;\n      var i = Object.create(null);\n      if (r.r(i), Object.defineProperty(i, \"default\", {\n        enumerable: !0,\n        value: t\n      }), 2 & e && \"string\" != typeof t) for (var n in t) {\n        r.d(i, n, function (e) {\n          return t[e];\n        }.bind(null, n));\n      }\n      return i;\n    }, r.n = function (t) {\n      var e = t && t.__esModule ? function () {\n        return t[\"default\"];\n      } : function () {\n        return t;\n      };\n      return r.d(e, \"a\", e), e;\n    }, r.o = function (t, e) {\n      return Object.prototype.hasOwnProperty.call(t, e);\n    }, r.p = \"\", r(r.s = 1);\n  }([function (t, e, r) {\n    var i, n;\n    i = [r(2)], void 0 === (n = function (t) {\n      function e(i) {\n        if (e.is(i, \"function\")) return r ? i() : t.on(\"raphael.DOMload\", i);\n        if (e.is(i, A)) return e._engine.create[c](e, i.splice(0, 3 + e.is(i[0], T))).add(i);\n        var n = Array.prototype.slice.call(arguments, 0);\n\n        if (e.is(n[n.length - 1], \"function\")) {\n          var a = n.pop();\n          return r ? a.call(e._engine.create[c](e, n)) : t.on(\"raphael.DOMload\", function () {\n            a.call(e._engine.create[c](e, n));\n          });\n        }\n\n        return e._engine.create[c](e, arguments);\n      }\n\n      e.version = \"2.3.0\", e.eve = t;\n\n      var r,\n          i,\n          n = /[, ]+/,\n          a = {\n        circle: 1,\n        rect: 1,\n        path: 1,\n        ellipse: 1,\n        text: 1,\n        image: 1\n      },\n          s = /\\{(\\d+)\\}/g,\n          o = \"hasOwnProperty\",\n          l = {\n        doc: document,\n        win: window\n      },\n          h = {\n        was: Object.prototype[o].call(l.win, \"Raphael\"),\n        is: l.win.Raphael\n      },\n          u = function u() {\n        this.ca = this.customAttributes = {};\n      },\n          c = \"apply\",\n          f = \"concat\",\n          p = \"ontouchstart\" in window || window.TouchEvent || window.DocumentTouch && document instanceof DocumentTouch,\n          d = \"\",\n          g = \" \",\n          x = String,\n          v = \"split\",\n          y = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[v](g),\n          m = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n      },\n          b = x.prototype.toLowerCase,\n          _2 = Math,\n          w = _2.max,\n          k = _2.min,\n          B = _2.abs,\n          C = _2.pow,\n          S = _2.PI,\n          T = \"number\",\n          A = \"array\",\n          M = Object.prototype.toString,\n          E = (e._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i, /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i),\n          N = {\n        NaN: 1,\n        Infinity: 1,\n        \"-Infinity\": 1\n      },\n          L = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n          P = _2.round,\n          z = parseFloat,\n          F = parseInt,\n          R = x.prototype.toUpperCase,\n          j = e._availableAttrs = {\n        \"arrow-end\": \"none\",\n        \"arrow-start\": \"none\",\n        blur: 0,\n        \"clip-rect\": \"0 0 1e9 1e9\",\n        cursor: \"default\",\n        cx: 0,\n        cy: 0,\n        fill: \"#fff\",\n        \"fill-opacity\": 1,\n        font: '10px \"Arial\"',\n        \"font-family\": '\"Arial\"',\n        \"font-size\": \"10\",\n        \"font-style\": \"normal\",\n        \"font-weight\": 400,\n        gradient: 0,\n        height: 0,\n        href: \"http://raphaeljs.com/\",\n        \"letter-spacing\": 0,\n        opacity: 1,\n        path: \"M0,0\",\n        r: 0,\n        rx: 0,\n        ry: 0,\n        src: \"\",\n        stroke: \"#000\",\n        \"stroke-dasharray\": \"\",\n        \"stroke-linecap\": \"butt\",\n        \"stroke-linejoin\": \"butt\",\n        \"stroke-miterlimit\": 0,\n        \"stroke-opacity\": 1,\n        \"stroke-width\": 1,\n        target: \"_blank\",\n        \"text-anchor\": \"middle\",\n        title: \"Raphael\",\n        transform: \"\",\n        width: 0,\n        x: 0,\n        y: 0,\n        \"class\": \"\"\n      },\n          I = e._availableAnimAttrs = {\n        blur: T,\n        \"clip-rect\": \"csv\",\n        cx: T,\n        cy: T,\n        fill: \"colour\",\n        \"fill-opacity\": T,\n        \"font-size\": T,\n        height: T,\n        opacity: T,\n        path: \"path\",\n        r: T,\n        rx: T,\n        ry: T,\n        stroke: \"colour\",\n        \"stroke-opacity\": T,\n        \"stroke-width\": T,\n        transform: \"transform\",\n        width: T,\n        x: T,\n        y: T\n      },\n          D = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n          q = {\n        hs: 1,\n        rg: 1\n      },\n          O = /,?([achlmqrstvxz]),?/gi,\n          V = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/gi,\n          W = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/gi,\n          Y = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/gi,\n          G = (e._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/, {}),\n          H = function H(t, e) {\n        return z(t) - z(e);\n      },\n          X = function X(t) {\n        return t;\n      },\n          U = e._rectPath = function (t, e, r, i, n) {\n        return n ? [[\"M\", t + n, e], [\"l\", r - 2 * n, 0], [\"a\", n, n, 0, 0, 1, n, n], [\"l\", 0, i - 2 * n], [\"a\", n, n, 0, 0, 1, -n, n], [\"l\", 2 * n - r, 0], [\"a\", n, n, 0, 0, 1, -n, -n], [\"l\", 0, 2 * n - i], [\"a\", n, n, 0, 0, 1, n, -n], [\"z\"]] : [[\"M\", t, e], [\"l\", r, 0], [\"l\", 0, i], [\"l\", -r, 0], [\"z\"]];\n      },\n          $ = function $(t, e, r, i) {\n        return null == i && (i = r), [[\"M\", t, e], [\"m\", 0, -i], [\"a\", r, i, 0, 1, 1, 0, 2 * i], [\"a\", r, i, 0, 1, 1, 0, -2 * i], [\"z\"]];\n      },\n          Z = e._getPath = {\n        path: function path(t) {\n          return t.attr(\"path\");\n        },\n        circle: function circle(t) {\n          var e = t.attrs;\n          return $(e.cx, e.cy, e.r);\n        },\n        ellipse: function ellipse(t) {\n          var e = t.attrs;\n          return $(e.cx, e.cy, e.rx, e.ry);\n        },\n        rect: function rect(t) {\n          var e = t.attrs;\n          return U(e.x, e.y, e.width, e.height, e.r);\n        },\n        image: function image(t) {\n          var e = t.attrs;\n          return U(e.x, e.y, e.width, e.height);\n        },\n        text: function text(t) {\n          var e = t._getBBox();\n\n          return U(e.x, e.y, e.width, e.height);\n        },\n        set: function set(t) {\n          var e = t._getBBox();\n\n          return U(e.x, e.y, e.width, e.height);\n        }\n      },\n          Q = e.mapPath = function (t, e) {\n        if (!e) return t;\n        var r, i, n, a, s, o, l;\n\n        for (n = 0, s = (t = Tt(t)).length; n < s; n++) {\n          for (a = 1, o = (l = t[n]).length; a < o; a += 2) {\n            r = e.x(l[a], l[a + 1]), i = e.y(l[a], l[a + 1]), l[a] = r, l[a + 1] = i;\n          }\n        }\n\n        return t;\n      };\n\n      if (e._g = l, e.type = l.win.SVGAngle || l.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\", \"VML\" == e.type) {\n        var J,\n            K = l.doc.createElement(\"div\");\n        if (K.innerHTML = '<v:shape adj=\"1\"/>', (J = K.firstChild).style.behavior = \"url(#default#VML)\", !J || \"object\" != _typeof(J.adj)) return e.type = d;\n        K = null;\n      }\n\n      function tt(t) {\n        if (\"function\" == typeof t || Object(t) !== t) return t;\n        var e = new t.constructor();\n\n        for (var r in t) {\n          t[o](r) && (e[r] = tt(t[r]));\n        }\n\n        return e;\n      }\n\n      e.svg = !(e.vml = \"VML\" == e.type), e._Paper = u, e.fn = i = u.prototype = e.prototype, e._id = 0, e.is = function (t, e) {\n        return \"finite\" == (e = b.call(e)) ? !N[o](+t) : \"array\" == e ? t instanceof Array : \"null\" == e && null === t || e == _typeof(t) && null !== t || \"object\" == e && t === Object(t) || \"array\" == e && Array.isArray && Array.isArray(t) || M.call(t).slice(8, -1).toLowerCase() == e;\n      }, e.angle = function (t, r, i, n, a, s) {\n        if (null == a) {\n          var o = t - i,\n              l = r - n;\n          return o || l ? (180 + 180 * _2.atan2(-l, -o) / S + 360) % 360 : 0;\n        }\n\n        return e.angle(t, r, a, s) - e.angle(i, n, a, s);\n      }, e.rad = function (t) {\n        return t % 360 * S / 180;\n      }, e.deg = function (t) {\n        return Math.round(180 * t / S % 360 * 1e3) / 1e3;\n      }, e.snapTo = function (t, r, i) {\n        if (i = e.is(i, \"finite\") ? i : 10, e.is(t, A)) {\n          for (var n = t.length; n--;) {\n            if (B(t[n] - r) <= i) return t[n];\n          }\n        } else {\n          var a = r % (t = +t);\n          if (a < i) return r - a;\n          if (a > t - i) return r - a + t;\n        }\n\n        return r;\n      };\n      var et, rt;\n      e.createUUID = (et = /[xy]/g, rt = function rt(t) {\n        var e = 16 * _2.random() | 0;\n        return (\"x\" == t ? e : 3 & e | 8).toString(16);\n      }, function () {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(et, rt).toUpperCase();\n      });\n\n      e.setWindow = function (r) {\n        t(\"raphael.setWindow\", e, l.win, r), l.win = r, l.doc = l.win.document, e._engine.initWin && e._engine.initWin(l.win);\n      };\n\n      var _it = function it(t) {\n        if (e.vml) {\n          var r,\n              i = /^\\s+|\\s+$/g;\n\n          try {\n            var n = new ActiveXObject(\"htmlfile\");\n            n.write(\"<body>\"), n.close(), r = n.body;\n          } catch (t) {\n            r = createPopup().document.body;\n          }\n\n          var a = r.createTextRange();\n          _it = ht(function (t) {\n            try {\n              r.style.color = x(t).replace(i, d);\n              var e = a.queryCommandValue(\"ForeColor\");\n              return \"#\" + (\"000000\" + (e = (255 & e) << 16 | 65280 & e | (16711680 & e) >>> 16).toString(16)).slice(-6);\n            } catch (t) {\n              return \"none\";\n            }\n          });\n        } else {\n          var s = l.doc.createElement(\"i\");\n          s.title = \"Raphaël Colour Picker\", s.style.display = \"none\", l.doc.body.appendChild(s), _it = ht(function (t) {\n            return s.style.color = t, l.doc.defaultView.getComputedStyle(s, d).getPropertyValue(\"color\");\n          });\n        }\n\n        return _it(t);\n      },\n          nt = function nt() {\n        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n      },\n          at = function at() {\n        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n      },\n          st = function st() {\n        return this.hex;\n      },\n          ot = function ot(t, r, i) {\n        if (null == r && e.is(t, \"object\") && \"r\" in t && \"g\" in t && \"b\" in t && (i = t.b, r = t.g, t = t.r), null == r && e.is(t, \"string\")) {\n          var n = e.getRGB(t);\n          t = n.r, r = n.g, i = n.b;\n        }\n\n        return (t > 1 || r > 1 || i > 1) && (t /= 255, r /= 255, i /= 255), [t, r, i];\n      },\n          lt = function lt(t, r, i, n) {\n        var a = {\n          r: t *= 255,\n          g: r *= 255,\n          b: i *= 255,\n          hex: e.rgb(t, r, i),\n          toString: st\n        };\n        return e.is(n, \"finite\") && (a.opacity = n), a;\n      };\n\n      function ht(t, e, r) {\n        return function i() {\n          var n = Array.prototype.slice.call(arguments, 0),\n              a = n.join(\"␀\"),\n              s = i.cache = i.cache || {},\n              l = i.count = i.count || [];\n          return s[o](a) ? (function (t, e) {\n            for (var r = 0, i = t.length; r < i; r++) {\n              if (t[r] === e) return t.push(t.splice(r, 1)[0]);\n            }\n          }(l, a), r ? r(s[a]) : s[a]) : (l.length >= 1e3 && delete s[l.shift()], l.push(a), s[a] = t[c](e, n), r ? r(s[a]) : s[a]);\n        };\n      }\n\n      e.color = function (t) {\n        var r;\n        return e.is(t, \"object\") && \"h\" in t && \"s\" in t && \"b\" in t ? (r = e.hsb2rgb(t), t.r = r.r, t.g = r.g, t.b = r.b, t.hex = r.hex) : e.is(t, \"object\") && \"h\" in t && \"s\" in t && \"l\" in t ? (r = e.hsl2rgb(t), t.r = r.r, t.g = r.g, t.b = r.b, t.hex = r.hex) : (e.is(t, \"string\") && (t = e.getRGB(t)), e.is(t, \"object\") && \"r\" in t && \"g\" in t && \"b\" in t ? (r = e.rgb2hsl(t), t.h = r.h, t.s = r.s, t.l = r.l, r = e.rgb2hsb(t), t.v = r.b) : (t = {\n          hex: \"none\"\n        }).r = t.g = t.b = t.h = t.s = t.v = t.l = -1), t.toString = st, t;\n      }, e.hsb2rgb = function (t, e, r, i) {\n        var n, a, s, o, l;\n        return this.is(t, \"object\") && \"h\" in t && \"s\" in t && \"b\" in t && (r = t.b, e = t.s, i = t.o, t = t.h), o = (l = r * e) * (1 - B((t = (t *= 360) % 360 / 60) % 2 - 1)), n = a = s = r - l, lt(n += [l, o, 0, 0, o, l][t = ~~t], a += [o, l, l, o, 0, 0][t], s += [0, 0, o, l, l, o][t], i);\n      }, e.hsl2rgb = function (t, e, r, i) {\n        var n, a, s, o, l;\n        return this.is(t, \"object\") && \"h\" in t && \"s\" in t && \"l\" in t && (r = t.l, e = t.s, t = t.h), (t > 1 || e > 1 || r > 1) && (t /= 360, e /= 100, r /= 100), o = (l = 2 * e * (r < .5 ? r : 1 - r)) * (1 - B((t = (t *= 360) % 360 / 60) % 2 - 1)), n = a = s = r - l / 2, lt(n += [l, o, 0, 0, o, l][t = ~~t], a += [o, l, l, o, 0, 0][t], s += [0, 0, o, l, l, o][t], i);\n      }, e.rgb2hsb = function (t, e, r) {\n        var i, n;\n        return t = (r = ot(t, e, r))[0], e = r[1], r = r[2], {\n          h: ((0 == (n = (i = w(t, e, r)) - k(t, e, r)) ? null : i == t ? (e - r) / n : i == e ? (r - t) / n + 2 : (t - e) / n + 4) + 360) % 6 * 60 / 360,\n          s: 0 == n ? 0 : n / i,\n          b: i,\n          toString: nt\n        };\n      }, e.rgb2hsl = function (t, e, r) {\n        var i, n, a, s;\n        return t = (r = ot(t, e, r))[0], e = r[1], r = r[2], i = ((n = w(t, e, r)) + (a = k(t, e, r))) / 2, {\n          h: ((0 == (s = n - a) ? null : n == t ? (e - r) / s : n == e ? (r - t) / s + 2 : (t - e) / s + 4) + 360) % 6 * 60 / 360,\n          s: 0 == s ? 0 : i < .5 ? s / (2 * i) : s / (2 - 2 * i),\n          l: i,\n          toString: at\n        };\n      }, e._path2string = function () {\n        return this.join(\",\").replace(O, \"$1\");\n      };\n\n      e._preload = function (t, e) {\n        var r = l.doc.createElement(\"img\");\n        r.style.cssText = \"position:absolute;left:-9999em;top:-9999em\", r.onload = function () {\n          e.call(this), this.onload = null, l.doc.body.removeChild(this);\n        }, r.onerror = function () {\n          l.doc.body.removeChild(this);\n        }, l.doc.body.appendChild(r), r.src = t;\n      };\n\n      function ut() {\n        return this.hex;\n      }\n\n      function ct(t, e) {\n        for (var r = [], i = 0, n = t.length; n - 2 * !e > i; i += 2) {\n          var a = [{\n            x: +t[i - 2],\n            y: +t[i - 1]\n          }, {\n            x: +t[i],\n            y: +t[i + 1]\n          }, {\n            x: +t[i + 2],\n            y: +t[i + 3]\n          }, {\n            x: +t[i + 4],\n            y: +t[i + 5]\n          }];\n          e ? i ? n - 4 == i ? a[3] = {\n            x: +t[0],\n            y: +t[1]\n          } : n - 2 == i && (a[2] = {\n            x: +t[0],\n            y: +t[1]\n          }, a[3] = {\n            x: +t[2],\n            y: +t[3]\n          }) : a[0] = {\n            x: +t[n - 2],\n            y: +t[n - 1]\n          } : n - 4 == i ? a[3] = a[2] : i || (a[0] = {\n            x: +t[i],\n            y: +t[i + 1]\n          }), r.push([\"C\", (-a[0].x + 6 * a[1].x + a[2].x) / 6, (-a[0].y + 6 * a[1].y + a[2].y) / 6, (a[1].x + 6 * a[2].x - a[3].x) / 6, (a[1].y + 6 * a[2].y - a[3].y) / 6, a[2].x, a[2].y]);\n        }\n\n        return r;\n      }\n\n      e.getRGB = ht(function (t) {\n        if (!t || (t = x(t)).indexOf(\"-\") + 1) return {\n          r: -1,\n          g: -1,\n          b: -1,\n          hex: \"none\",\n          error: 1,\n          toString: ut\n        };\n        if (\"none\" == t) return {\n          r: -1,\n          g: -1,\n          b: -1,\n          hex: \"none\",\n          toString: ut\n        };\n        !q[o](t.toLowerCase().substring(0, 2)) && \"#\" != t.charAt() && (t = _it(t));\n        var r,\n            i,\n            n,\n            a,\n            s,\n            l,\n            h = t.match(E);\n        return h ? (h[2] && (n = F(h[2].substring(5), 16), i = F(h[2].substring(3, 5), 16), r = F(h[2].substring(1, 3), 16)), h[3] && (n = F((s = h[3].charAt(3)) + s, 16), i = F((s = h[3].charAt(2)) + s, 16), r = F((s = h[3].charAt(1)) + s, 16)), h[4] && (l = h[4][v](D), r = z(l[0]), \"%\" == l[0].slice(-1) && (r *= 2.55), i = z(l[1]), \"%\" == l[1].slice(-1) && (i *= 2.55), n = z(l[2]), \"%\" == l[2].slice(-1) && (n *= 2.55), \"rgba\" == h[1].toLowerCase().slice(0, 4) && (a = z(l[3])), l[3] && \"%\" == l[3].slice(-1) && (a /= 100)), h[5] ? (l = h[5][v](D), r = z(l[0]), \"%\" == l[0].slice(-1) && (r *= 2.55), i = z(l[1]), \"%\" == l[1].slice(-1) && (i *= 2.55), n = z(l[2]), \"%\" == l[2].slice(-1) && (n *= 2.55), (\"deg\" == l[0].slice(-3) || \"°\" == l[0].slice(-1)) && (r /= 360), \"hsba\" == h[1].toLowerCase().slice(0, 4) && (a = z(l[3])), l[3] && \"%\" == l[3].slice(-1) && (a /= 100), e.hsb2rgb(r, i, n, a)) : h[6] ? (l = h[6][v](D), r = z(l[0]), \"%\" == l[0].slice(-1) && (r *= 2.55), i = z(l[1]), \"%\" == l[1].slice(-1) && (i *= 2.55), n = z(l[2]), \"%\" == l[2].slice(-1) && (n *= 2.55), (\"deg\" == l[0].slice(-3) || \"°\" == l[0].slice(-1)) && (r /= 360), \"hsla\" == h[1].toLowerCase().slice(0, 4) && (a = z(l[3])), l[3] && \"%\" == l[3].slice(-1) && (a /= 100), e.hsl2rgb(r, i, n, a)) : ((h = {\n          r: r,\n          g: i,\n          b: n,\n          toString: ut\n        }).hex = \"#\" + (16777216 | n | i << 8 | r << 16).toString(16).slice(1), e.is(a, \"finite\") && (h.opacity = a), h)) : {\n          r: -1,\n          g: -1,\n          b: -1,\n          hex: \"none\",\n          error: 1,\n          toString: ut\n        };\n      }, e), e.hsb = ht(function (t, r, i) {\n        return e.hsb2rgb(t, r, i).hex;\n      }), e.hsl = ht(function (t, r, i) {\n        return e.hsl2rgb(t, r, i).hex;\n      }), e.rgb = ht(function (t, e, r) {\n        function i(t) {\n          return t + .5 | 0;\n        }\n\n        return \"#\" + (16777216 | i(r) | i(e) << 8 | i(t) << 16).toString(16).slice(1);\n      }), e.getColor = function (t) {\n        var e = this.getColor.start = this.getColor.start || {\n          h: 0,\n          s: 1,\n          b: t || .75\n        },\n            r = this.hsb2rgb(e.h, e.s, e.b);\n        return e.h += .075, e.h > 1 && (e.h = 0, e.s -= .2, e.s <= 0 && (this.getColor.start = {\n          h: 0,\n          s: 1,\n          b: e.b\n        })), r.hex;\n      }, e.getColor.reset = function () {\n        delete this.start;\n      }, e.parsePathString = function (t) {\n        if (!t) return null;\n        var r = ft(t);\n        if (r.arr) return mt(r.arr);\n        var i = {\n          a: 7,\n          c: 6,\n          h: 1,\n          l: 2,\n          m: 2,\n          r: 4,\n          q: 4,\n          s: 4,\n          t: 2,\n          v: 1,\n          z: 0\n        },\n            n = [];\n        return e.is(t, A) && e.is(t[0], A) && (n = mt(t)), n.length || x(t).replace(V, function (t, e, r) {\n          var a = [],\n              s = e.toLowerCase();\n          if (r.replace(Y, function (t, e) {\n            e && a.push(+e);\n          }), \"m\" == s && a.length > 2 && (n.push([e][f](a.splice(0, 2))), s = \"l\", e = \"m\" == e ? \"l\" : \"L\"), \"r\" == s) n.push([e][f](a));else for (; a.length >= i[s] && (n.push([e][f](a.splice(0, i[s]))), i[s]);) {\n            ;\n          }\n        }), n.toString = e._path2string, r.arr = mt(n), n;\n      }, e.parseTransformString = ht(function (t) {\n        if (!t) return null;\n        var r = [];\n        return e.is(t, A) && e.is(t[0], A) && (r = mt(t)), r.length || x(t).replace(W, function (t, e, i) {\n          var n = [];\n          b.call(e);\n          i.replace(Y, function (t, e) {\n            e && n.push(+e);\n          }), r.push([e][f](n));\n        }), r.toString = e._path2string, r;\n      }, this, function (t) {\n        if (!t) return t;\n\n        for (var e = [], r = 0; r < t.length; r++) {\n          for (var i = [], n = 0; n < t[r].length; n++) {\n            i.push(t[r][n]);\n          }\n\n          e.push(i);\n        }\n\n        return e;\n      });\n\n      var ft = function ft(t) {\n        var e = ft.ps = ft.ps || {};\n        return e[t] ? e[t].sleep = 100 : e[t] = {\n          sleep: 100\n        }, setTimeout(function () {\n          for (var r in e) {\n            e[o](r) && r != t && (e[r].sleep--, !e[r].sleep && delete e[r]);\n          }\n        }), e[t];\n      };\n\n      function pt(t, e, r, i, n) {\n        return t * (t * (-3 * e + 9 * r - 9 * i + 3 * n) + 6 * e - 12 * r + 6 * i) - 3 * e + 3 * r;\n      }\n\n      function dt(t, e, r, i, n, a, s, o, l) {\n        null == l && (l = 1);\n\n        for (var h = (l = l > 1 ? 1 : l < 0 ? 0 : l) / 2, u = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816], c = [.2491, .2491, .2335, .2335, .2032, .2032, .1601, .1601, .1069, .1069, .0472, .0472], f = 0, p = 0; p < 12; p++) {\n          var d = h * u[p] + h,\n              g = pt(d, t, r, n, s),\n              x = pt(d, e, i, a, o),\n              v = g * g + x * x;\n          f += c[p] * _2.sqrt(v);\n        }\n\n        return h * f;\n      }\n\n      function gt(t, e, r, i, n, a, s, o) {\n        if (!(w(t, r) < k(n, s) || k(t, r) > w(n, s) || w(e, i) < k(a, o) || k(e, i) > w(a, o))) {\n          var l = (t - r) * (a - o) - (e - i) * (n - s);\n\n          if (l) {\n            var h = ((t * i - e * r) * (n - s) - (t - r) * (n * o - a * s)) / l,\n                u = ((t * i - e * r) * (a - o) - (e - i) * (n * o - a * s)) / l,\n                c = +h.toFixed(2),\n                f = +u.toFixed(2);\n            if (!(c < +k(t, r).toFixed(2) || c > +w(t, r).toFixed(2) || c < +k(n, s).toFixed(2) || c > +w(n, s).toFixed(2) || f < +k(e, i).toFixed(2) || f > +w(e, i).toFixed(2) || f < +k(a, o).toFixed(2) || f > +w(a, o).toFixed(2))) return {\n              x: h,\n              y: u\n            };\n          }\n        }\n      }\n\n      function xt(t, r, i) {\n        var n = e.bezierBBox(t),\n            a = e.bezierBBox(r);\n        if (!e.isBBoxIntersect(n, a)) return i ? 0 : [];\n\n        for (var s = dt.apply(0, t), o = dt.apply(0, r), l = w(~~(s / 5), 1), h = w(~~(o / 5), 1), u = [], c = [], f = {}, p = i ? 0 : [], d = 0; d < l + 1; d++) {\n          var g = e.findDotsAtSegment.apply(e, t.concat(d / l));\n          u.push({\n            x: g.x,\n            y: g.y,\n            t: d / l\n          });\n        }\n\n        for (d = 0; d < h + 1; d++) {\n          g = e.findDotsAtSegment.apply(e, r.concat(d / h)), c.push({\n            x: g.x,\n            y: g.y,\n            t: d / h\n          });\n        }\n\n        for (d = 0; d < l; d++) {\n          for (var x = 0; x < h; x++) {\n            var v = u[d],\n                y = u[d + 1],\n                m = c[x],\n                b = c[x + 1],\n                _ = B(y.x - v.x) < .001 ? \"y\" : \"x\",\n                C = B(b.x - m.x) < .001 ? \"y\" : \"x\",\n                S = gt(v.x, v.y, y.x, y.y, m.x, m.y, b.x, b.y);\n\n            if (S) {\n              if (f[S.x.toFixed(4)] == S.y.toFixed(4)) continue;\n              f[S.x.toFixed(4)] = S.y.toFixed(4);\n              var T = v.t + B((S[_] - v[_]) / (y[_] - v[_])) * (y.t - v.t),\n                  A = m.t + B((S[C] - m[C]) / (b[C] - m[C])) * (b.t - m.t);\n              T >= 0 && T <= 1.001 && A >= 0 && A <= 1.001 && (i ? p++ : p.push({\n                x: S.x,\n                y: S.y,\n                t1: k(T, 1),\n                t2: k(A, 1)\n              }));\n            }\n          }\n        }\n\n        return p;\n      }\n\n      function vt(t, r, i) {\n        t = e._path2curve(t), r = e._path2curve(r);\n\n        for (var n, a, s, o, l, h, u, c, f, p, d = i ? 0 : [], g = 0, x = t.length; g < x; g++) {\n          var v = t[g];\n          if (\"M\" == v[0]) n = l = v[1], a = h = v[2];else {\n            \"C\" == v[0] ? (f = [n, a].concat(v.slice(1)), n = f[6], a = f[7]) : (f = [n, a, n, a, l, h, l, h], n = l, a = h);\n\n            for (var y = 0, m = r.length; y < m; y++) {\n              var b = r[y];\n              if (\"M\" == b[0]) s = u = b[1], o = c = b[2];else {\n                \"C\" == b[0] ? (p = [s, o].concat(b.slice(1)), s = p[6], o = p[7]) : (p = [s, o, s, o, u, c, u, c], s = u, o = c);\n\n                var _ = xt(f, p, i);\n\n                if (i) d += _;else {\n                  for (var w = 0, k = _.length; w < k; w++) {\n                    _[w].segment1 = g, _[w].segment2 = y, _[w].bez1 = f, _[w].bez2 = p;\n                  }\n\n                  d = d.concat(_);\n                }\n              }\n            }\n          }\n        }\n\n        return d;\n      }\n\n      e.findDotsAtSegment = function (t, e, r, i, n, a, s, o, l) {\n        var h = 1 - l,\n            u = C(h, 3),\n            c = C(h, 2),\n            f = l * l,\n            p = f * l,\n            d = u * t + 3 * c * l * r + 3 * h * l * l * n + p * s,\n            g = u * e + 3 * c * l * i + 3 * h * l * l * a + p * o,\n            x = t + 2 * l * (r - t) + f * (n - 2 * r + t),\n            v = e + 2 * l * (i - e) + f * (a - 2 * i + e),\n            y = r + 2 * l * (n - r) + f * (s - 2 * n + r),\n            m = i + 2 * l * (a - i) + f * (o - 2 * a + i),\n            b = h * t + l * r,\n            w = h * e + l * i,\n            k = h * n + l * s,\n            B = h * a + l * o,\n            T = 90 - 180 * _2.atan2(x - y, v - m) / S;\n        return (x > y || v < m) && (T += 180), {\n          x: d,\n          y: g,\n          m: {\n            x: x,\n            y: v\n          },\n          n: {\n            x: y,\n            y: m\n          },\n          start: {\n            x: b,\n            y: w\n          },\n          end: {\n            x: k,\n            y: B\n          },\n          alpha: T\n        };\n      }, e.bezierBBox = function (t, r, i, n, a, s, o, l) {\n        e.is(t, \"array\") || (t = [t, r, i, n, a, s, o, l]);\n        var h = St.apply(null, t);\n        return {\n          x: h.min.x,\n          y: h.min.y,\n          x2: h.max.x,\n          y2: h.max.y,\n          width: h.max.x - h.min.x,\n          height: h.max.y - h.min.y\n        };\n      }, e.isPointInsideBBox = function (t, e, r) {\n        return e >= t.x && e <= t.x2 && r >= t.y && r <= t.y2;\n      }, e.isBBoxIntersect = function (t, r) {\n        var i = e.isPointInsideBBox;\n        return i(r, t.x, t.y) || i(r, t.x2, t.y) || i(r, t.x, t.y2) || i(r, t.x2, t.y2) || i(t, r.x, r.y) || i(t, r.x2, r.y) || i(t, r.x, r.y2) || i(t, r.x2, r.y2) || (t.x < r.x2 && t.x > r.x || r.x < t.x2 && r.x > t.x) && (t.y < r.y2 && t.y > r.y || r.y < t.y2 && r.y > t.y);\n      }, e.pathIntersection = function (t, e) {\n        return vt(t, e);\n      }, e.pathIntersectionNumber = function (t, e) {\n        return vt(t, e, 1);\n      }, e.isPointInsidePath = function (t, r, i) {\n        var n = e.pathBBox(t);\n        return e.isPointInsideBBox(n, r, i) && vt(t, [[\"M\", r, i], [\"H\", n.x2 + 10]], 1) % 2 == 1;\n      }, e._removedFactory = function (e) {\n        return function () {\n          t(\"raphael.log\", null, \"Raphaël: you are calling to method “\" + e + \"” of removed object\", e);\n        };\n      };\n\n      var yt = e.pathBBox = function (t) {\n        var e = ft(t);\n        if (e.bbox) return tt(e.bbox);\n        if (!t) return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0,\n          x2: 0,\n          y2: 0\n        };\n\n        for (var r, i = 0, n = 0, a = [], s = [], o = 0, l = (t = Tt(t)).length; o < l; o++) {\n          if (\"M\" == (r = t[o])[0]) i = r[1], n = r[2], a.push(i), s.push(n);else {\n            var h = St(i, n, r[1], r[2], r[3], r[4], r[5], r[6]);\n            a = a[f](h.min.x, h.max.x), s = s[f](h.min.y, h.max.y), i = r[5], n = r[6];\n          }\n        }\n\n        var u = k[c](0, a),\n            p = k[c](0, s),\n            d = w[c](0, a),\n            g = w[c](0, s),\n            x = d - u,\n            v = g - p,\n            y = {\n          x: u,\n          y: p,\n          x2: d,\n          y2: g,\n          width: x,\n          height: v,\n          cx: u + x / 2,\n          cy: p + v / 2\n        };\n        return e.bbox = tt(y), y;\n      },\n          mt = function mt(t) {\n        var r = tt(t);\n        return r.toString = e._path2string, r;\n      },\n          bt = e._pathToRelative = function (t) {\n        var r = ft(t);\n        if (r.rel) return mt(r.rel);\n        e.is(t, A) && e.is(t && t[0], A) || (t = e.parsePathString(t));\n        var i = [],\n            n = 0,\n            a = 0,\n            s = 0,\n            o = 0,\n            l = 0;\n        \"M\" == t[0][0] && (s = n = t[0][1], o = a = t[0][2], l++, i.push([\"M\", n, a]));\n\n        for (var h = l, u = t.length; h < u; h++) {\n          var c = i[h] = [],\n              f = t[h];\n          if (f[0] != b.call(f[0])) switch (c[0] = b.call(f[0]), c[0]) {\n            case \"a\":\n              c[1] = f[1], c[2] = f[2], c[3] = f[3], c[4] = f[4], c[5] = f[5], c[6] = +(f[6] - n).toFixed(3), c[7] = +(f[7] - a).toFixed(3);\n              break;\n\n            case \"v\":\n              c[1] = +(f[1] - a).toFixed(3);\n              break;\n\n            case \"m\":\n              s = f[1], o = f[2];\n\n            default:\n              for (var p = 1, d = f.length; p < d; p++) {\n                c[p] = +(f[p] - (p % 2 ? n : a)).toFixed(3);\n              }\n\n          } else {\n            c = i[h] = [], \"m\" == f[0] && (s = f[1] + n, o = f[2] + a);\n\n            for (var g = 0, x = f.length; g < x; g++) {\n              i[h][g] = f[g];\n            }\n          }\n          var v = i[h].length;\n\n          switch (i[h][0]) {\n            case \"z\":\n              n = s, a = o;\n              break;\n\n            case \"h\":\n              n += +i[h][v - 1];\n              break;\n\n            case \"v\":\n              a += +i[h][v - 1];\n              break;\n\n            default:\n              n += +i[h][v - 2], a += +i[h][v - 1];\n          }\n        }\n\n        return i.toString = e._path2string, r.rel = mt(i), i;\n      },\n          _t = e._pathToAbsolute = function (t) {\n        var r = ft(t);\n        if (r.abs) return mt(r.abs);\n        if (e.is(t, A) && e.is(t && t[0], A) || (t = e.parsePathString(t)), !t || !t.length) return [[\"M\", 0, 0]];\n        var i = [],\n            n = 0,\n            a = 0,\n            s = 0,\n            o = 0,\n            l = 0;\n        \"M\" == t[0][0] && (s = n = +t[0][1], o = a = +t[0][2], l++, i[0] = [\"M\", n, a]);\n\n        for (var h, u, c = 3 == t.length && \"M\" == t[0][0] && \"R\" == t[1][0].toUpperCase() && \"Z\" == t[2][0].toUpperCase(), p = l, d = t.length; p < d; p++) {\n          if (i.push(h = []), (u = t[p])[0] != R.call(u[0])) switch (h[0] = R.call(u[0]), h[0]) {\n            case \"A\":\n              h[1] = u[1], h[2] = u[2], h[3] = u[3], h[4] = u[4], h[5] = u[5], h[6] = +(u[6] + n), h[7] = +(u[7] + a);\n              break;\n\n            case \"V\":\n              h[1] = +u[1] + a;\n              break;\n\n            case \"H\":\n              h[1] = +u[1] + n;\n              break;\n\n            case \"R\":\n              for (var g = [n, a][f](u.slice(1)), x = 2, v = g.length; x < v; x++) {\n                g[x] = +g[x] + n, g[++x] = +g[x] + a;\n              }\n\n              i.pop(), i = i[f](ct(g, c));\n              break;\n\n            case \"M\":\n              s = +u[1] + n, o = +u[2] + a;\n\n            default:\n              for (x = 1, v = u.length; x < v; x++) {\n                h[x] = +u[x] + (x % 2 ? n : a);\n              }\n\n          } else if (\"R\" == u[0]) g = [n, a][f](u.slice(1)), i.pop(), i = i[f](ct(g, c)), h = [\"R\"][f](u.slice(-2));else for (var y = 0, m = u.length; y < m; y++) {\n            h[y] = u[y];\n          }\n\n          switch (h[0]) {\n            case \"Z\":\n              n = s, a = o;\n              break;\n\n            case \"H\":\n              n = h[1];\n              break;\n\n            case \"V\":\n              a = h[1];\n              break;\n\n            case \"M\":\n              s = h[h.length - 2], o = h[h.length - 1];\n\n            default:\n              n = h[h.length - 2], a = h[h.length - 1];\n          }\n        }\n\n        return i.toString = e._path2string, r.abs = mt(i), i;\n      },\n          wt = function wt(t, e, r, i) {\n        return [t, e, r, i, r, i];\n      },\n          kt = function kt(t, e, r, i, n, a) {\n        return [1 / 3 * t + 2 / 3 * r, 1 / 3 * e + 2 / 3 * i, 1 / 3 * n + 2 / 3 * r, 1 / 3 * a + 2 / 3 * i, n, a];\n      },\n          Bt = function Bt(t, e, r, i, n, a, s, o, l, h) {\n        var u,\n            c = 120 * S / 180,\n            p = S / 180 * (+n || 0),\n            d = [],\n            g = ht(function (t, e, r) {\n          return {\n            x: t * _2.cos(r) - e * _2.sin(r),\n            y: t * _2.sin(r) + e * _2.cos(r)\n          };\n        });\n        if (h) A = h[0], M = h[1], C = h[2], T = h[3];else {\n          t = (u = g(t, e, -p)).x, e = u.y, o = (u = g(o, l, -p)).x, l = u.y;\n          _2.cos(S / 180 * n), _2.sin(S / 180 * n);\n          var x = (t - o) / 2,\n              y = (e - l) / 2,\n              m = x * x / (r * r) + y * y / (i * i);\n          m > 1 && (r *= m = _2.sqrt(m), i *= m);\n\n          var b = r * r,\n              w = i * i,\n              k = (a == s ? -1 : 1) * _2.sqrt(B((b * w - b * y * y - w * x * x) / (b * y * y + w * x * x))),\n              C = k * r * y / i + (t + o) / 2,\n              T = k * -i * x / r + (e + l) / 2,\n              A = _2.asin(((e - T) / i).toFixed(9)),\n              M = _2.asin(((l - T) / i).toFixed(9));\n\n          (A = t < C ? S - A : A) < 0 && (A = 2 * S + A), (M = o < C ? S - M : M) < 0 && (M = 2 * S + M), s && A > M && (A -= 2 * S), !s && M > A && (M -= 2 * S);\n        }\n        var E = M - A;\n\n        if (B(E) > c) {\n          var N = M,\n              L = o,\n              P = l;\n          M = A + c * (s && M > A ? 1 : -1), o = C + r * _2.cos(M), l = T + i * _2.sin(M), d = Bt(o, l, r, i, n, 0, s, L, P, [M, N, C, T]);\n        }\n\n        E = M - A;\n\n        var z = _2.cos(A),\n            F = _2.sin(A),\n            R = _2.cos(M),\n            j = _2.sin(M),\n            I = _2.tan(E / 4),\n            D = 4 / 3 * r * I,\n            q = 4 / 3 * i * I,\n            O = [t, e],\n            V = [t + D * F, e - q * z],\n            W = [o + D * j, l - q * R],\n            Y = [o, l];\n\n        if (V[0] = 2 * O[0] - V[0], V[1] = 2 * O[1] - V[1], h) return [V, W, Y][f](d);\n\n        for (var G = [], H = 0, X = (d = [V, W, Y][f](d).join()[v](\",\")).length; H < X; H++) {\n          G[H] = H % 2 ? g(d[H - 1], d[H], p).y : g(d[H], d[H + 1], p).x;\n        }\n\n        return G;\n      },\n          Ct = function Ct(t, e, r, i, n, a, s, o, l) {\n        var h = 1 - l;\n        return {\n          x: C(h, 3) * t + 3 * C(h, 2) * l * r + 3 * h * l * l * n + C(l, 3) * s,\n          y: C(h, 3) * e + 3 * C(h, 2) * l * i + 3 * h * l * l * a + C(l, 3) * o\n        };\n      },\n          St = ht(function (t, e, r, i, n, a, s, o) {\n        var l,\n            h = n - 2 * r + t - (s - 2 * n + r),\n            u = 2 * (r - t) - 2 * (n - r),\n            f = t - r,\n            p = (-u + _2.sqrt(u * u - 4 * h * f)) / 2 / h,\n            d = (-u - _2.sqrt(u * u - 4 * h * f)) / 2 / h,\n            g = [e, o],\n            x = [t, s];\n        return B(p) > \"1e12\" && (p = .5), B(d) > \"1e12\" && (d = .5), p > 0 && p < 1 && (l = Ct(t, e, r, i, n, a, s, o, p), x.push(l.x), g.push(l.y)), d > 0 && d < 1 && (l = Ct(t, e, r, i, n, a, s, o, d), x.push(l.x), g.push(l.y)), h = a - 2 * i + e - (o - 2 * a + i), f = e - i, p = (-(u = 2 * (i - e) - 2 * (a - i)) + _2.sqrt(u * u - 4 * h * f)) / 2 / h, d = (-u - _2.sqrt(u * u - 4 * h * f)) / 2 / h, B(p) > \"1e12\" && (p = .5), B(d) > \"1e12\" && (d = .5), p > 0 && p < 1 && (l = Ct(t, e, r, i, n, a, s, o, p), x.push(l.x), g.push(l.y)), d > 0 && d < 1 && (l = Ct(t, e, r, i, n, a, s, o, d), x.push(l.x), g.push(l.y)), {\n          min: {\n            x: k[c](0, x),\n            y: k[c](0, g)\n          },\n          max: {\n            x: w[c](0, x),\n            y: w[c](0, g)\n          }\n        };\n      }),\n          Tt = e._path2curve = ht(function (t, e) {\n        var r = !e && ft(t);\n        if (!e && r.curve) return mt(r.curve);\n\n        for (var i = _t(t), n = e && _t(e), a = {\n          x: 0,\n          y: 0,\n          bx: 0,\n          by: 0,\n          X: 0,\n          Y: 0,\n          qx: null,\n          qy: null\n        }, s = {\n          x: 0,\n          y: 0,\n          bx: 0,\n          by: 0,\n          X: 0,\n          Y: 0,\n          qx: null,\n          qy: null\n        }, o = function o(t, e, r) {\n          var i, n;\n          if (!t) return [\"C\", e.x, e.y, e.x, e.y, e.x, e.y];\n\n          switch (!(t[0] in {\n            T: 1,\n            Q: 1\n          }) && (e.qx = e.qy = null), t[0]) {\n            case \"M\":\n              e.X = t[1], e.Y = t[2];\n              break;\n\n            case \"A\":\n              t = [\"C\"][f](Bt[c](0, [e.x, e.y][f](t.slice(1))));\n              break;\n\n            case \"S\":\n              \"C\" == r || \"S\" == r ? (i = 2 * e.x - e.bx, n = 2 * e.y - e.by) : (i = e.x, n = e.y), t = [\"C\", i, n][f](t.slice(1));\n              break;\n\n            case \"T\":\n              \"Q\" == r || \"T\" == r ? (e.qx = 2 * e.x - e.qx, e.qy = 2 * e.y - e.qy) : (e.qx = e.x, e.qy = e.y), t = [\"C\"][f](kt(e.x, e.y, e.qx, e.qy, t[1], t[2]));\n              break;\n\n            case \"Q\":\n              e.qx = t[1], e.qy = t[2], t = [\"C\"][f](kt(e.x, e.y, t[1], t[2], t[3], t[4]));\n              break;\n\n            case \"L\":\n              t = [\"C\"][f](wt(e.x, e.y, t[1], t[2]));\n              break;\n\n            case \"H\":\n              t = [\"C\"][f](wt(e.x, e.y, t[1], e.y));\n              break;\n\n            case \"V\":\n              t = [\"C\"][f](wt(e.x, e.y, e.x, t[1]));\n              break;\n\n            case \"Z\":\n              t = [\"C\"][f](wt(e.x, e.y, e.X, e.Y));\n          }\n\n          return t;\n        }, l = function l(t, e) {\n          if (t[e].length > 7) {\n            t[e].shift();\n\n            for (var r = t[e]; r.length;) {\n              u[e] = \"A\", n && (p[e] = \"A\"), t.splice(e++, 0, [\"C\"][f](r.splice(0, 6)));\n            }\n\n            t.splice(e, 1), v = w(i.length, n && n.length || 0);\n          }\n        }, h = function h(t, e, r, a, s) {\n          t && e && \"M\" == t[s][0] && \"M\" != e[s][0] && (e.splice(s, 0, [\"M\", a.x, a.y]), r.bx = 0, r.by = 0, r.x = t[s][1], r.y = t[s][2], v = w(i.length, n && n.length || 0));\n        }, u = [], p = [], d = \"\", g = \"\", x = 0, v = w(i.length, n && n.length || 0); x < v; x++) {\n          i[x] && (d = i[x][0]), \"C\" != d && (u[x] = d, x && (g = u[x - 1])), i[x] = o(i[x], a, g), \"A\" != u[x] && \"C\" == d && (u[x] = \"C\"), l(i, x), n && (n[x] && (d = n[x][0]), \"C\" != d && (p[x] = d, x && (g = p[x - 1])), n[x] = o(n[x], s, g), \"A\" != p[x] && \"C\" == d && (p[x] = \"C\"), l(n, x)), h(i, n, a, s, x), h(n, i, s, a, x);\n\n          var y = i[x],\n              m = n && n[x],\n              b = y.length,\n              _ = n && m.length;\n\n          a.x = y[b - 2], a.y = y[b - 1], a.bx = z(y[b - 4]) || a.x, a.by = z(y[b - 3]) || a.y, s.bx = n && (z(m[_ - 4]) || s.x), s.by = n && (z(m[_ - 3]) || s.y), s.x = n && m[_ - 2], s.y = n && m[_ - 1];\n        }\n\n        return n || (r.curve = mt(i)), n ? [i, n] : i;\n      }, null, mt),\n          At = (e._parseDots = ht(function (t) {\n        for (var r = [], i = 0, n = t.length; i < n; i++) {\n          var a = {},\n              s = t[i].match(/^([^:]*):?([\\d\\.]*)/);\n          if (a.color = e.getRGB(s[1]), a.color.error) return null;\n          a.opacity = a.color.opacity, a.color = a.color.hex, s[2] && (a.offset = s[2] + \"%\"), r.push(a);\n        }\n\n        for (i = 1, n = r.length - 1; i < n; i++) {\n          if (!r[i].offset) {\n            for (var o = z(r[i - 1].offset || 0), l = 0, h = i + 1; h < n; h++) {\n              if (r[h].offset) {\n                l = r[h].offset;\n                break;\n              }\n            }\n\n            l || (l = 100, h = n);\n\n            for (var u = ((l = z(l)) - o) / (h - i + 1); i < h; i++) {\n              o += u, r[i].offset = o + \"%\";\n            }\n          }\n        }\n\n        return r;\n      }), e._tear = function (t, e) {\n        t == e.top && (e.top = t.prev), t == e.bottom && (e.bottom = t.next), t.next && (t.next.prev = t.prev), t.prev && (t.prev.next = t.next);\n      }),\n          Mt = (e._tofront = function (t, e) {\n        e.top !== t && (At(t, e), t.next = null, t.prev = e.top, e.top.next = t, e.top = t);\n      }, e._toback = function (t, e) {\n        e.bottom !== t && (At(t, e), t.next = e.bottom, t.prev = null, e.bottom.prev = t, e.bottom = t);\n      }, e._insertafter = function (t, e, r) {\n        At(t, r), e == r.top && (r.top = t), e.next && (e.next.prev = t), t.next = e.next, t.prev = e, e.next = t;\n      }, e._insertbefore = function (t, e, r) {\n        At(t, r), e == r.bottom && (r.bottom = t), e.prev && (e.prev.next = t), t.prev = e.prev, e.prev = t, t.next = e;\n      }, e.toMatrix = function (t, e) {\n        var r = yt(t),\n            i = {\n          _: {\n            transform: d\n          },\n          getBBox: function getBBox() {\n            return r;\n          }\n        };\n        return Et(i, e), i.matrix;\n      }),\n          Et = (e.transformPath = function (t, e) {\n        return Q(t, Mt(t, e));\n      }, e._extractTransform = function (t, r) {\n        if (null == r) return t._.transform;\n        r = x(r).replace(/\\.{3}|\\u2026/g, t._.transform || d);\n        var i,\n            n,\n            a = e.parseTransformString(r),\n            s = 0,\n            o = 1,\n            l = 1,\n            h = t._,\n            u = new Pt();\n        if (h.transform = a || [], a) for (var c = 0, f = a.length; c < f; c++) {\n          var p,\n              g,\n              v,\n              y,\n              m,\n              b = a[c],\n              _ = b.length,\n              w = x(b[0]).toLowerCase(),\n              k = b[0] != w,\n              B = k ? u.invert() : 0;\n          \"t\" == w && 3 == _ ? k ? (p = B.x(0, 0), g = B.y(0, 0), v = B.x(b[1], b[2]), y = B.y(b[1], b[2]), u.translate(v - p, y - g)) : u.translate(b[1], b[2]) : \"r\" == w ? 2 == _ ? (m = m || t.getBBox(1), u.rotate(b[1], m.x + m.width / 2, m.y + m.height / 2), s += b[1]) : 4 == _ && (k ? (v = B.x(b[2], b[3]), y = B.y(b[2], b[3]), u.rotate(b[1], v, y)) : u.rotate(b[1], b[2], b[3]), s += b[1]) : \"s\" == w ? 2 == _ || 3 == _ ? (m = m || t.getBBox(1), u.scale(b[1], b[_ - 1], m.x + m.width / 2, m.y + m.height / 2), o *= b[1], l *= b[_ - 1]) : 5 == _ && (k ? (v = B.x(b[3], b[4]), y = B.y(b[3], b[4]), u.scale(b[1], b[2], v, y)) : u.scale(b[1], b[2], b[3], b[4]), o *= b[1], l *= b[2]) : \"m\" == w && 7 == _ && u.add(b[1], b[2], b[3], b[4], b[5], b[6]), h.dirtyT = 1, t.matrix = u;\n        }\n        t.matrix = u, h.sx = o, h.sy = l, h.deg = s, h.dx = i = u.e, h.dy = n = u.f, 1 == o && 1 == l && !s && h.bbox ? (h.bbox.x += +i, h.bbox.y += +n) : h.dirtyT = 1;\n      }),\n          Nt = function Nt(t) {\n        var e = t[0];\n\n        switch (e.toLowerCase()) {\n          case \"t\":\n            return [e, 0, 0];\n\n          case \"m\":\n            return [e, 1, 0, 0, 1, 0, 0];\n\n          case \"r\":\n            return 4 == t.length ? [e, 0, t[2], t[3]] : [e, 0];\n\n          case \"s\":\n            return 5 == t.length ? [e, 1, 1, t[3], t[4]] : 3 == t.length ? [e, 1, 1] : [e, 1];\n        }\n      },\n          Lt = e._equaliseTransform = function (t, r) {\n        r = x(r).replace(/\\.{3}|\\u2026/g, t), t = e.parseTransformString(t) || [], r = e.parseTransformString(r) || [];\n\n        for (var i, n, a, s, o = w(t.length, r.length), l = [], h = [], u = 0; u < o; u++) {\n          if (a = t[u] || Nt(r[u]), s = r[u] || Nt(a), a[0] != s[0] || \"r\" == a[0].toLowerCase() && (a[2] != s[2] || a[3] != s[3]) || \"s\" == a[0].toLowerCase() && (a[3] != s[3] || a[4] != s[4])) return;\n\n          for (l[u] = [], h[u] = [], i = 0, n = w(a.length, s.length); i < n; i++) {\n            i in a && (l[u][i] = a[i]), i in s && (h[u][i] = s[i]);\n          }\n        }\n\n        return {\n          from: l,\n          to: h\n        };\n      };\n\n      function Pt(t, e, r, i, n, a) {\n        null != t ? (this.a = +t, this.b = +e, this.c = +r, this.d = +i, this.e = +n, this.f = +a) : (this.a = 1, this.b = 0, this.c = 0, this.d = 1, this.e = 0, this.f = 0);\n      }\n\n      e._getContainer = function (t, r, i, n) {\n        var a;\n        if (null != (a = null != n || e.is(t, \"object\") ? t : l.doc.getElementById(t))) return a.tagName ? null == r ? {\n          container: a,\n          width: a.style.pixelWidth || a.offsetWidth,\n          height: a.style.pixelHeight || a.offsetHeight\n        } : {\n          container: a,\n          width: r,\n          height: i\n        } : {\n          container: 1,\n          x: t,\n          y: r,\n          width: i,\n          height: n\n        };\n      }, e.pathToRelative = bt, e._engine = {}, e.path2curve = Tt, e.matrix = function (t, e, r, i, n, a) {\n        return new Pt(t, e, r, i, n, a);\n      }, function (t) {\n        function r(t) {\n          return t[0] * t[0] + t[1] * t[1];\n        }\n\n        function i(t) {\n          var e = _2.sqrt(r(t));\n\n          t[0] && (t[0] /= e), t[1] && (t[1] /= e);\n        }\n\n        t.add = function (t, e, r, i, n, a) {\n          var s,\n              o,\n              l,\n              h,\n              u = [[], [], []],\n              c = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n              f = [[t, r, n], [e, i, a], [0, 0, 1]];\n\n          for (t && t instanceof Pt && (f = [[t.a, t.c, t.e], [t.b, t.d, t.f], [0, 0, 1]]), s = 0; s < 3; s++) {\n            for (o = 0; o < 3; o++) {\n              for (h = 0, l = 0; l < 3; l++) {\n                h += c[s][l] * f[l][o];\n              }\n\n              u[s][o] = h;\n            }\n          }\n\n          this.a = u[0][0], this.b = u[1][0], this.c = u[0][1], this.d = u[1][1], this.e = u[0][2], this.f = u[1][2];\n        }, t.invert = function () {\n          var t = this,\n              e = t.a * t.d - t.b * t.c;\n          return new Pt(t.d / e, -t.b / e, -t.c / e, t.a / e, (t.c * t.f - t.d * t.e) / e, (t.b * t.e - t.a * t.f) / e);\n        }, t.clone = function () {\n          return new Pt(this.a, this.b, this.c, this.d, this.e, this.f);\n        }, t.translate = function (t, e) {\n          this.add(1, 0, 0, 1, t, e);\n        }, t.scale = function (t, e, r, i) {\n          null == e && (e = t), (r || i) && this.add(1, 0, 0, 1, r, i), this.add(t, 0, 0, e, 0, 0), (r || i) && this.add(1, 0, 0, 1, -r, -i);\n        }, t.rotate = function (t, r, i) {\n          t = e.rad(t), r = r || 0, i = i || 0;\n          var n = +_2.cos(t).toFixed(9),\n              a = +_2.sin(t).toFixed(9);\n          this.add(n, a, -a, n, r, i), this.add(1, 0, 0, 1, -r, -i);\n        }, t.x = function (t, e) {\n          return t * this.a + e * this.c + this.e;\n        }, t.y = function (t, e) {\n          return t * this.b + e * this.d + this.f;\n        }, t.get = function (t) {\n          return +this[x.fromCharCode(97 + t)].toFixed(4);\n        }, t.toString = function () {\n          return e.svg ? \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" : [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n        }, t.toFilter = function () {\n          return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) + \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) + \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n        }, t.offset = function () {\n          return [this.e.toFixed(4), this.f.toFixed(4)];\n        }, t.split = function () {\n          var t = {};\n          t.dx = this.e, t.dy = this.f;\n          var n = [[this.a, this.c], [this.b, this.d]];\n          t.scalex = _2.sqrt(r(n[0])), i(n[0]), t.shear = n[0][0] * n[1][0] + n[0][1] * n[1][1], n[1] = [n[1][0] - n[0][0] * t.shear, n[1][1] - n[0][1] * t.shear], t.scaley = _2.sqrt(r(n[1])), i(n[1]), t.shear /= t.scaley;\n          var a = -n[0][1],\n              s = n[1][1];\n          return s < 0 ? (t.rotate = e.deg(_2.acos(s)), a < 0 && (t.rotate = 360 - t.rotate)) : t.rotate = e.deg(_2.asin(a)), t.isSimple = !(+t.shear.toFixed(9) || t.scalex.toFixed(9) != t.scaley.toFixed(9) && t.rotate), t.isSuperSimple = !+t.shear.toFixed(9) && t.scalex.toFixed(9) == t.scaley.toFixed(9) && !t.rotate, t.noRotation = !+t.shear.toFixed(9) && !t.rotate, t;\n        }, t.toTransformString = function (t) {\n          var e = t || this[v]();\n          return e.isSimple ? (e.scalex = +e.scalex.toFixed(4), e.scaley = +e.scaley.toFixed(4), e.rotate = +e.rotate.toFixed(4), (e.dx || e.dy ? \"t\" + [e.dx, e.dy] : d) + (1 != e.scalex || 1 != e.scaley ? \"s\" + [e.scalex, e.scaley, 0, 0] : d) + (e.rotate ? \"r\" + [e.rotate, 0, 0] : d)) : \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n        };\n      }(Pt.prototype);\n\n      for (var zt = function zt() {\n        this.returnValue = !1;\n      }, Ft = function Ft() {\n        return this.originalEvent.preventDefault();\n      }, Rt = function Rt() {\n        this.cancelBubble = !0;\n      }, jt = function jt() {\n        return this.originalEvent.stopPropagation();\n      }, It = function It(t) {\n        var e = l.doc.documentElement.scrollTop || l.doc.body.scrollTop,\n            r = l.doc.documentElement.scrollLeft || l.doc.body.scrollLeft;\n        return {\n          x: t.clientX + r,\n          y: t.clientY + e\n        };\n      }, Dt = l.doc.addEventListener ? function (t, e, r, i) {\n        var n = function n(t) {\n          var e = It(t);\n          return r.call(i, t, e.x, e.y);\n        };\n\n        if (t.addEventListener(e, n, !1), p && m[e]) {\n          var a = function a(e) {\n            for (var n = It(e), a = e, s = 0, o = e.targetTouches && e.targetTouches.length; s < o; s++) {\n              if (e.targetTouches[s].target == t) {\n                (e = e.targetTouches[s]).originalEvent = a, e.preventDefault = Ft, e.stopPropagation = jt;\n                break;\n              }\n            }\n\n            return r.call(i, e, n.x, n.y);\n          };\n\n          t.addEventListener(m[e], a, !1);\n        }\n\n        return function () {\n          return t.removeEventListener(e, n, !1), p && m[e] && t.removeEventListener(m[e], a, !1), !0;\n        };\n      } : l.doc.attachEvent ? function (t, e, r, i) {\n        var n = function n(t) {\n          t = t || l.win.event;\n          var e = l.doc.documentElement.scrollTop || l.doc.body.scrollTop,\n              n = l.doc.documentElement.scrollLeft || l.doc.body.scrollLeft,\n              a = t.clientX + n,\n              s = t.clientY + e;\n          return t.preventDefault = t.preventDefault || zt, t.stopPropagation = t.stopPropagation || Rt, r.call(i, t, a, s);\n        };\n\n        return t.attachEvent(\"on\" + e, n), function () {\n          return t.detachEvent(\"on\" + e, n), !0;\n        };\n      } : void 0, qt = [], Ot = function Ot(e) {\n        for (var r, i = e.clientX, n = e.clientY, a = l.doc.documentElement.scrollTop || l.doc.body.scrollTop, s = l.doc.documentElement.scrollLeft || l.doc.body.scrollLeft, o = qt.length; o--;) {\n          if (r = qt[o], p && e.touches) {\n            for (var h, u = e.touches.length; u--;) {\n              if ((h = e.touches[u]).identifier == r.el._drag.id) {\n                i = h.clientX, n = h.clientY, (e.originalEvent ? e.originalEvent : e).preventDefault();\n                break;\n              }\n            }\n          } else e.preventDefault();\n\n          var c,\n              f = r.el.node,\n              d = f.nextSibling,\n              g = f.parentNode,\n              x = f.style.display;\n          l.win.opera && g.removeChild(f), f.style.display = \"none\", c = r.el.paper.getElementByPoint(i, n), f.style.display = x, l.win.opera && (d ? g.insertBefore(f, d) : g.appendChild(f)), c && t(\"raphael.drag.over.\" + r.el.id, r.el, c), i += s, n += a, t(\"raphael.drag.move.\" + r.el.id, r.move_scope || r.el, i - r.el._drag.x, n - r.el._drag.y, i, n, e);\n        }\n      }, Vt = function Vt(r) {\n        e.unmousemove(Ot).unmouseup(Vt);\n\n        for (var i, n = qt.length; n--;) {\n          (i = qt[n]).el._drag = {}, t(\"raphael.drag.end.\" + i.el.id, i.end_scope || i.start_scope || i.move_scope || i.el, r);\n        }\n\n        qt = [];\n      }, Wt = e.el = {}, Yt = y.length; Yt--;) {\n        !function (t) {\n          e[t] = Wt[t] = function (r, i) {\n            return e.is(r, \"function\") && (this.events = this.events || [], this.events.push({\n              name: t,\n              f: r,\n              unbind: Dt(this.shape || this.node || l.doc, t, r, i || this)\n            })), this;\n          }, e[\"un\" + t] = Wt[\"un\" + t] = function (r) {\n            for (var i = this.events || [], n = i.length; n--;) {\n              i[n].name != t || !e.is(r, \"undefined\") && i[n].f != r || (i[n].unbind(), i.splice(n, 1), !i.length && delete this.events);\n            }\n\n            return this;\n          };\n        }(y[Yt]);\n      }\n\n      Wt.data = function (r, i) {\n        var n = G[this.id] = G[this.id] || {};\n        if (0 == arguments.length) return n;\n\n        if (1 == arguments.length) {\n          if (e.is(r, \"object\")) {\n            for (var a in r) {\n              r[o](a) && this.data(a, r[a]);\n            }\n\n            return this;\n          }\n\n          return t(\"raphael.data.get.\" + this.id, this, n[r], r), n[r];\n        }\n\n        return n[r] = i, t(\"raphael.data.set.\" + this.id, this, i, r), this;\n      }, Wt.removeData = function (t) {\n        return null == t ? delete G[this.id] : G[this.id] && delete G[this.id][t], this;\n      }, Wt.getData = function () {\n        return tt(G[this.id] || {});\n      }, Wt.hover = function (t, e, r, i) {\n        return this.mouseover(t, r).mouseout(e, i || r);\n      }, Wt.unhover = function (t, e) {\n        return this.unmouseover(t).unmouseout(e);\n      };\n      var Gt = [];\n      Wt.drag = function (r, i, n, a, s, o) {\n        function h(h) {\n          (h.originalEvent || h).preventDefault();\n          var u = h.clientX,\n              c = h.clientY,\n              f = l.doc.documentElement.scrollTop || l.doc.body.scrollTop,\n              d = l.doc.documentElement.scrollLeft || l.doc.body.scrollLeft;\n          if (this._drag.id = h.identifier, p && h.touches) for (var g, x = h.touches.length; x--;) {\n            if (g = h.touches[x], this._drag.id = g.identifier, g.identifier == this._drag.id) {\n              u = g.clientX, c = g.clientY;\n              break;\n            }\n          }\n          this._drag.x = u + d, this._drag.y = c + f, !qt.length && e.mousemove(Ot).mouseup(Vt), qt.push({\n            el: this,\n            move_scope: a,\n            start_scope: s,\n            end_scope: o\n          }), i && t.on(\"raphael.drag.start.\" + this.id, i), r && t.on(\"raphael.drag.move.\" + this.id, r), n && t.on(\"raphael.drag.end.\" + this.id, n), t(\"raphael.drag.start.\" + this.id, s || a || this, this._drag.x, this._drag.y, h);\n        }\n\n        return this._drag = {}, Gt.push({\n          el: this,\n          start: h\n        }), this.mousedown(h), this;\n      }, Wt.onDragOver = function (e) {\n        e ? t.on(\"raphael.drag.over.\" + this.id, e) : t.unbind(\"raphael.drag.over.\" + this.id);\n      }, Wt.undrag = function () {\n        for (var r = Gt.length; r--;) {\n          Gt[r].el == this && (this.unmousedown(Gt[r].start), Gt.splice(r, 1), t.unbind(\"raphael.drag.*.\" + this.id));\n        }\n\n        !Gt.length && e.unmousemove(Ot).unmouseup(Vt), qt = [];\n      }, i.circle = function (t, r, i) {\n        var n = e._engine.circle(this, t || 0, r || 0, i || 0);\n\n        return this.__set__ && this.__set__.push(n), n;\n      }, i.rect = function (t, r, i, n, a) {\n        var s = e._engine.rect(this, t || 0, r || 0, i || 0, n || 0, a || 0);\n\n        return this.__set__ && this.__set__.push(s), s;\n      }, i.ellipse = function (t, r, i, n) {\n        var a = e._engine.ellipse(this, t || 0, r || 0, i || 0, n || 0);\n\n        return this.__set__ && this.__set__.push(a), a;\n      }, i.path = function (t) {\n        t && !e.is(t, \"string\") && !e.is(t[0], A) && (t += d);\n\n        var r = e._engine.path(e.format[c](e, arguments), this);\n\n        return this.__set__ && this.__set__.push(r), r;\n      }, i.image = function (t, r, i, n, a) {\n        var s = e._engine.image(this, t || \"about:blank\", r || 0, i || 0, n || 0, a || 0);\n\n        return this.__set__ && this.__set__.push(s), s;\n      }, i.text = function (t, r, i) {\n        var n = e._engine.text(this, t || 0, r || 0, x(i));\n\n        return this.__set__ && this.__set__.push(n), n;\n      }, i.set = function (t) {\n        !e.is(t, \"array\") && (t = Array.prototype.splice.call(arguments, 0, arguments.length));\n        var r = new ce(t);\n        return this.__set__ && this.__set__.push(r), r.paper = this, r.type = \"set\", r;\n      }, i.setStart = function (t) {\n        this.__set__ = t || this.set();\n      }, i.setFinish = function (t) {\n        var e = this.__set__;\n        return delete this.__set__, e;\n      }, i.getSize = function () {\n        var t = this.canvas.parentNode;\n        return {\n          width: t.offsetWidth,\n          height: t.offsetHeight\n        };\n      }, i.setSize = function (t, r) {\n        return e._engine.setSize.call(this, t, r);\n      }, i.setViewBox = function (t, r, i, n, a) {\n        return e._engine.setViewBox.call(this, t, r, i, n, a);\n      }, i.top = i.bottom = null, i.raphael = e;\n\n      function Ht() {\n        return this.x + g + this.y + g + this.width + \" × \" + this.height;\n      }\n\n      i.getElementByPoint = function (t, e) {\n        var r,\n            i,\n            n,\n            a,\n            s,\n            o,\n            h,\n            u = this.canvas,\n            c = l.doc.elementFromPoint(t, e);\n\n        if (l.win.opera && \"svg\" == c.tagName) {\n          var f = (i = (r = u).getBoundingClientRect(), n = r.ownerDocument, a = n.body, s = n.documentElement, o = s.clientTop || a.clientTop || 0, h = s.clientLeft || a.clientLeft || 0, {\n            y: i.top + (l.win.pageYOffset || s.scrollTop || a.scrollTop) - o,\n            x: i.left + (l.win.pageXOffset || s.scrollLeft || a.scrollLeft) - h\n          }),\n              p = u.createSVGRect();\n          p.x = t - f.x, p.y = e - f.y, p.width = p.height = 1;\n          var d = u.getIntersectionList(p, null);\n          d.length && (c = d[d.length - 1]);\n        }\n\n        if (!c) return null;\n\n        for (; c.parentNode && c != u.parentNode && !c.raphael;) {\n          c = c.parentNode;\n        }\n\n        return c == this.canvas.parentNode && (c = u), c = c && c.raphael ? this.getById(c.raphaelid) : null;\n      }, i.getElementsByBBox = function (t) {\n        var r = this.set();\n        return this.forEach(function (i) {\n          e.isBBoxIntersect(i.getBBox(), t) && r.push(i);\n        }), r;\n      }, i.getById = function (t) {\n        for (var e = this.bottom; e;) {\n          if (e.id == t) return e;\n          e = e.next;\n        }\n\n        return null;\n      }, i.forEach = function (t, e) {\n        for (var r = this.bottom; r;) {\n          if (!1 === t.call(e, r)) return this;\n          r = r.next;\n        }\n\n        return this;\n      }, i.getElementsByPoint = function (t, e) {\n        var r = this.set();\n        return this.forEach(function (i) {\n          i.isPointInside(t, e) && r.push(i);\n        }), r;\n      }, Wt.isPointInside = function (t, r) {\n        var i = this.realPath = Z[this.type](this);\n        return this.attr(\"transform\") && this.attr(\"transform\").length && (i = e.transformPath(i, this.attr(\"transform\"))), e.isPointInsidePath(i, t, r);\n      }, Wt.getBBox = function (t) {\n        if (this.removed) return {};\n        var e = this._;\n        return t ? (!e.dirty && e.bboxwt || (this.realPath = Z[this.type](this), e.bboxwt = yt(this.realPath), e.bboxwt.toString = Ht, e.dirty = 0), e.bboxwt) : ((e.dirty || e.dirtyT || !e.bbox) && (!e.dirty && this.realPath || (e.bboxwt = 0, this.realPath = Z[this.type](this)), e.bbox = yt(Q(this.realPath, this.matrix)), e.bbox.toString = Ht, e.dirty = e.dirtyT = 0), e.bbox);\n      }, Wt.clone = function () {\n        if (this.removed) return null;\n        var t = this.paper[this.type]().attr(this.attr());\n        return this.__set__ && this.__set__.push(t), t;\n      }, Wt.glow = function (t) {\n        if (\"text\" == this.type) return null;\n        var e = {\n          width: ((t = t || {}).width || 10) + (+this.attr(\"stroke-width\") || 1),\n          fill: t.fill || !1,\n          opacity: null == t.opacity ? .5 : t.opacity,\n          offsetx: t.offsetx || 0,\n          offsety: t.offsety || 0,\n          color: t.color || \"#000\"\n        },\n            r = e.width / 2,\n            i = this.paper,\n            n = i.set(),\n            a = this.realPath || Z[this.type](this);\n        a = this.matrix ? Q(a, this.matrix) : a;\n\n        for (var s = 1; s < r + 1; s++) {\n          n.push(i.path(a).attr({\n            stroke: e.color,\n            fill: e.fill ? e.color : \"none\",\n            \"stroke-linejoin\": \"round\",\n            \"stroke-linecap\": \"round\",\n            \"stroke-width\": +(e.width / r * s).toFixed(3),\n            opacity: +(e.opacity / r).toFixed(3)\n          }));\n        }\n\n        return n.insertBefore(this).translate(e.offsetx, e.offsety);\n      };\n\n      var Xt = function Xt(t, r, i, n, a, s, o, l, h) {\n        return null == h ? dt(t, r, i, n, a, s, o, l) : e.findDotsAtSegment(t, r, i, n, a, s, o, l, function (t, e, r, i, n, a, s, o, l) {\n          if (!(l < 0 || dt(t, e, r, i, n, a, s, o) < l)) {\n            var h,\n                u = .5,\n                c = 1 - u;\n\n            for (h = dt(t, e, r, i, n, a, s, o, c); B(h - l) > .01;) {\n              h = dt(t, e, r, i, n, a, s, o, c += (h < l ? 1 : -1) * (u /= 2));\n            }\n\n            return c;\n          }\n        }(t, r, i, n, a, s, o, l, h));\n      },\n          Ut = function Ut(t, r) {\n        return function (i, n, a) {\n          for (var s, o, l, h, u, c = \"\", f = {}, p = 0, d = 0, g = (i = Tt(i)).length; d < g; d++) {\n            if (\"M\" == (l = i[d])[0]) s = +l[1], o = +l[2];else {\n              if (p + (h = Xt(s, o, l[1], l[2], l[3], l[4], l[5], l[6])) > n) {\n                if (r && !f.start) {\n                  if (c += [\"C\" + (u = Xt(s, o, l[1], l[2], l[3], l[4], l[5], l[6], n - p)).start.x, u.start.y, u.m.x, u.m.y, u.x, u.y], a) return c;\n                  f.start = c, c = [\"M\" + u.x, u.y + \"C\" + u.n.x, u.n.y, u.end.x, u.end.y, l[5], l[6]].join(), p += h, s = +l[5], o = +l[6];\n                  continue;\n                }\n\n                if (!t && !r) return {\n                  x: (u = Xt(s, o, l[1], l[2], l[3], l[4], l[5], l[6], n - p)).x,\n                  y: u.y,\n                  alpha: u.alpha\n                };\n              }\n\n              p += h, s = +l[5], o = +l[6];\n            }\n            c += l.shift() + l;\n          }\n\n          return f.end = c, (u = t ? p : r ? f : e.findDotsAtSegment(s, o, l[0], l[1], l[2], l[3], l[4], l[5], 1)).alpha && (u = {\n            x: u.x,\n            y: u.y,\n            alpha: u.alpha\n          }), u;\n        };\n      },\n          $t = Ut(1),\n          Zt = Ut(),\n          Qt = Ut(0, 1);\n\n      e.getTotalLength = $t, e.getPointAtLength = Zt, e.getSubpath = function (t, e, r) {\n        if (this.getTotalLength(t) - r < 1e-6) return Qt(t, e).end;\n        var i = Qt(t, r, 1);\n        return e ? Qt(i, e).end : i;\n      }, Wt.getTotalLength = function () {\n        var t = this.getPath();\n        if (t) return this.node.getTotalLength ? this.node.getTotalLength() : $t(t);\n      }, Wt.getPointAtLength = function (t) {\n        var e = this.getPath();\n        if (e) return Zt(e, t);\n      }, Wt.getPath = function () {\n        var t,\n            r = e._getPath[this.type];\n        if (\"text\" != this.type && \"set\" != this.type) return r && (t = r(this)), t;\n      }, Wt.getSubpath = function (t, r) {\n        var i = this.getPath();\n        if (i) return e.getSubpath(i, t, r);\n      };\n      var Jt = e.easing_formulas = {\n        linear: function linear(t) {\n          return t;\n        },\n        \"<\": function _(t) {\n          return C(t, 1.7);\n        },\n        \">\": function _(t) {\n          return C(t, .48);\n        },\n        \"<>\": function _(t) {\n          var e = .48 - t / 1.04,\n              r = _2.sqrt(.1734 + e * e),\n              i = r - e,\n              n = -r - e,\n              a = C(B(i), 1 / 3) * (i < 0 ? -1 : 1) + C(B(n), 1 / 3) * (n < 0 ? -1 : 1) + .5;\n\n          return 3 * (1 - a) * a * a + a * a * a;\n        },\n        backIn: function backIn(t) {\n          var e = 1.70158;\n          return t * t * ((e + 1) * t - e);\n        },\n        backOut: function backOut(t) {\n          var e = 1.70158;\n          return (t -= 1) * t * ((e + 1) * t + e) + 1;\n        },\n        elastic: function elastic(t) {\n          return t == !!t ? t : C(2, -10 * t) * _2.sin(2 * S * (t - .075) / .3) + 1;\n        },\n        bounce: function bounce(t) {\n          var e = 7.5625,\n              r = 2.75;\n          return t < 1 / r ? e * t * t : t < 2 / r ? e * (t -= 1.5 / r) * t + .75 : t < 2.5 / r ? e * (t -= 2.25 / r) * t + .9375 : e * (t -= 2.625 / r) * t + .984375;\n        }\n      };\n      Jt.easeIn = Jt[\"ease-in\"] = Jt[\"<\"], Jt.easeOut = Jt[\"ease-out\"] = Jt[\">\"], Jt.easeInOut = Jt[\"ease-in-out\"] = Jt[\"<>\"], Jt[\"back-in\"] = Jt.backIn, Jt[\"back-out\"] = Jt.backOut;\n\n      var Kt = [],\n          te = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\n        setTimeout(t, 16);\n      },\n          ee = function ee() {\n        for (var r = +new Date(), i = 0; i < Kt.length; i++) {\n          var n = Kt[i];\n\n          if (!n.el.removed && !n.paused) {\n            var a,\n                s,\n                l = r - n.start,\n                h = n.ms,\n                u = n.easing,\n                c = n.from,\n                p = n.diff,\n                d = n.to,\n                x = (n.t, n.el),\n                v = {},\n                y = {};\n            if (n.initstatus ? (l = (n.initstatus * n.anim.top - n.prev) / (n.percent - n.prev) * h, n.status = n.initstatus, delete n.initstatus, n.stop && Kt.splice(i--, 1)) : n.status = (n.prev + (n.percent - n.prev) * (l / h)) / n.anim.top, !(l < 0)) if (l < h) {\n              var m = u(l / h);\n\n              for (var b in c) {\n                if (c[o](b)) {\n                  switch (I[b]) {\n                    case T:\n                      a = +c[b] + m * h * p[b];\n                      break;\n\n                    case \"colour\":\n                      a = \"rgb(\" + [re(P(c[b].r + m * h * p[b].r)), re(P(c[b].g + m * h * p[b].g)), re(P(c[b].b + m * h * p[b].b))].join(\",\") + \")\";\n                      break;\n\n                    case \"path\":\n                      a = [];\n\n                      for (var _ = 0, w = c[b].length; _ < w; _++) {\n                        a[_] = [c[b][_][0]];\n\n                        for (var k = 1, B = c[b][_].length; k < B; k++) {\n                          a[_][k] = +c[b][_][k] + m * h * p[b][_][k];\n                        }\n\n                        a[_] = a[_].join(g);\n                      }\n\n                      a = a.join(g);\n                      break;\n\n                    case \"transform\":\n                      if (p[b].real) for (a = [], _ = 0, w = c[b].length; _ < w; _++) {\n                        for (a[_] = [c[b][_][0]], k = 1, B = c[b][_].length; k < B; k++) {\n                          a[_][k] = c[b][_][k] + m * h * p[b][_][k];\n                        }\n                      } else {\n                        var C = function C(t) {\n                          return +c[b][t] + m * h * p[b][t];\n                        };\n\n                        a = [[\"m\", C(0), C(1), C(2), C(3), C(4), C(5)]];\n                      }\n                      break;\n\n                    case \"csv\":\n                      if (\"clip-rect\" == b) for (a = [], _ = 4; _--;) {\n                        a[_] = +c[b][_] + m * h * p[b][_];\n                      }\n                      break;\n\n                    default:\n                      var S = [][f](c[b]);\n\n                      for (a = [], _ = x.paper.customAttributes[b].length; _--;) {\n                        a[_] = +S[_] + m * h * p[b][_];\n                      }\n\n                  }\n\n                  v[b] = a;\n                }\n              }\n\n              x.attr(v), function (e, r, i) {\n                setTimeout(function () {\n                  t(\"raphael.anim.frame.\" + e, r, i);\n                });\n              }(x.id, x, n.anim);\n            } else {\n              if (function (r, i, n) {\n                setTimeout(function () {\n                  t(\"raphael.anim.frame.\" + i.id, i, n), t(\"raphael.anim.finish.\" + i.id, i, n), e.is(r, \"function\") && r.call(i);\n                });\n              }(n.callback, x, n.anim), x.attr(d), Kt.splice(i--, 1), n.repeat > 1 && !n.next) {\n                for (s in d) {\n                  d[o](s) && (y[s] = n.totalOrigin[s]);\n                }\n\n                n.el.attr(y), ae(n.anim, n.el, n.anim.percents[0], null, n.totalOrigin, n.repeat - 1);\n              }\n\n              n.next && !n.stop && ae(n.anim, n.el, n.next, null, n.totalOrigin, n.repeat);\n            }\n          }\n        }\n\n        Kt.length && te(ee);\n      },\n          re = function re(t) {\n        return t > 255 ? 255 : t < 0 ? 0 : t;\n      };\n\n      function ie(t, e, r, i, n, a) {\n        var s = 3 * e,\n            o = 3 * (i - e) - s,\n            l = 1 - s - o,\n            h = 3 * r,\n            u = 3 * (n - r) - h,\n            c = 1 - h - u;\n\n        function f(t) {\n          return ((l * t + o) * t + s) * t;\n        }\n\n        return function (t, e) {\n          var r = function (t, e) {\n            var r, i, n, a, h, u;\n\n            for (n = t, u = 0; u < 8; u++) {\n              if (a = f(n) - t, B(a) < e) return n;\n              if (B(h = (3 * l * n + 2 * o) * n + s) < 1e-6) break;\n              n -= a / h;\n            }\n\n            if (i = 1, (n = t) < (r = 0)) return r;\n            if (n > i) return i;\n\n            for (; r < i;) {\n              if (a = f(n), B(a - t) < e) return n;\n              t > a ? r = n : i = n, n = (i - r) / 2 + r;\n            }\n\n            return n;\n          }(t, e);\n\n          return ((c * r + u) * r + h) * r;\n        }(t, 1 / (200 * a));\n      }\n\n      function ne(t, e) {\n        var r = [],\n            i = {};\n\n        if (this.ms = e, this.times = 1, t) {\n          for (var n in t) {\n            t[o](n) && (i[z(n)] = t[n], r.push(z(n)));\n          }\n\n          r.sort(H);\n        }\n\n        this.anim = i, this.top = r[r.length - 1], this.percents = r;\n      }\n\n      function ae(r, i, a, s, l, h) {\n        a = z(a);\n        var u,\n            c,\n            p,\n            d,\n            g,\n            y,\n            m = r.ms,\n            b = {},\n            _ = {},\n            w = {};\n        if (s) for (B = 0, C = Kt.length; B < C; B++) {\n          var k = Kt[B];\n\n          if (k.el.id == i.id && k.anim == r) {\n            k.percent != a ? (Kt.splice(B, 1), p = 1) : c = k, i.attr(k.totalOrigin);\n            break;\n          }\n        } else s = +_;\n\n        for (var B = 0, C = r.percents.length; B < C; B++) {\n          if (r.percents[B] == a || r.percents[B] > s * r.top) {\n            a = r.percents[B], g = r.percents[B - 1] || 0, m = m / r.top * (a - g), d = r.percents[B + 1], u = r.anim[a];\n            break;\n          }\n\n          s && i.attr(r.anim[r.percents[B]]);\n        }\n\n        if (u) {\n          if (c) c.initstatus = s, c.start = new Date() - c.ms * s;else {\n            for (var S in u) {\n              if (u[o](S) && (I[o](S) || i.paper.customAttributes[o](S))) switch (b[S] = i.attr(S), null == b[S] && (b[S] = j[S]), _[S] = u[S], I[S]) {\n                case T:\n                  w[S] = (_[S] - b[S]) / m;\n                  break;\n\n                case \"colour\":\n                  b[S] = e.getRGB(b[S]);\n                  var A = e.getRGB(_[S]);\n                  w[S] = {\n                    r: (A.r - b[S].r) / m,\n                    g: (A.g - b[S].g) / m,\n                    b: (A.b - b[S].b) / m\n                  };\n                  break;\n\n                case \"path\":\n                  var M = Tt(b[S], _[S]),\n                      E = M[1];\n\n                  for (b[S] = M[0], w[S] = [], B = 0, C = b[S].length; B < C; B++) {\n                    w[S][B] = [0];\n\n                    for (var N = 1, P = b[S][B].length; N < P; N++) {\n                      w[S][B][N] = (E[B][N] - b[S][B][N]) / m;\n                    }\n                  }\n\n                  break;\n\n                case \"transform\":\n                  var F = i._,\n                      R = Lt(F[S], _[S]);\n                  if (R) for (b[S] = R.from, _[S] = R.to, w[S] = [], w[S].real = !0, B = 0, C = b[S].length; B < C; B++) {\n                    for (w[S][B] = [b[S][B][0]], N = 1, P = b[S][B].length; N < P; N++) {\n                      w[S][B][N] = (_[S][B][N] - b[S][B][N]) / m;\n                    }\n                  } else {\n                    var D = i.matrix || new Pt(),\n                        q = {\n                      _: {\n                        transform: F.transform\n                      },\n                      getBBox: function getBBox() {\n                        return i.getBBox(1);\n                      }\n                    };\n                    b[S] = [D.a, D.b, D.c, D.d, D.e, D.f], Et(q, _[S]), _[S] = q._.transform, w[S] = [(q.matrix.a - D.a) / m, (q.matrix.b - D.b) / m, (q.matrix.c - D.c) / m, (q.matrix.d - D.d) / m, (q.matrix.e - D.e) / m, (q.matrix.f - D.f) / m];\n                  }\n                  break;\n\n                case \"csv\":\n                  var O = x(u[S])[v](n),\n                      V = x(b[S])[v](n);\n                  if (\"clip-rect\" == S) for (b[S] = V, w[S] = [], B = V.length; B--;) {\n                    w[S][B] = (O[B] - b[S][B]) / m;\n                  }\n                  _[S] = O;\n                  break;\n\n                default:\n                  for (O = [][f](u[S]), V = [][f](b[S]), w[S] = [], B = i.paper.customAttributes[S].length; B--;) {\n                    w[S][B] = ((O[B] || 0) - (V[B] || 0)) / m;\n                  }\n\n              }\n            }\n\n            var W = u.easing,\n                Y = e.easing_formulas[W];\n            if (!Y) if ((Y = x(W).match(L)) && 5 == Y.length) {\n              var G = Y;\n\n              Y = function Y(t) {\n                return ie(t, +G[1], +G[2], +G[3], +G[4], m);\n              };\n            } else Y = X;\n            if (k = {\n              anim: r,\n              percent: a,\n              timestamp: y = u.start || r.start || +new Date(),\n              start: y + (r.del || 0),\n              status: 0,\n              initstatus: s || 0,\n              stop: !1,\n              ms: m,\n              easing: Y,\n              from: b,\n              diff: w,\n              to: _,\n              el: i,\n              callback: u.callback,\n              prev: g,\n              next: d,\n              repeat: h || r.times,\n              origin: i.attr(),\n              totalOrigin: l\n            }, Kt.push(k), s && !c && !p && (k.stop = !0, k.start = new Date() - m * s, 1 == Kt.length)) return ee();\n            p && (k.start = new Date() - k.ms * s), 1 == Kt.length && te(ee);\n          }\n          t(\"raphael.anim.start.\" + i.id, i, r);\n        }\n      }\n\n      function se(t) {\n        for (var e = 0; e < Kt.length; e++) {\n          Kt[e].el.paper == t && Kt.splice(e--, 1);\n        }\n      }\n\n      Wt.animateWith = function (t, r, i, n, a, s) {\n        if (this.removed) return s && s.call(this), this;\n        var o = i instanceof ne ? i : e.animation(i, n, a, s);\n        ae(o, this, o.percents[0], null, this.attr());\n\n        for (var l = 0, h = Kt.length; l < h; l++) {\n          if (Kt[l].anim == r && Kt[l].el == t) {\n            Kt[h - 1].start = Kt[l].start;\n            break;\n          }\n        }\n\n        return this;\n      }, Wt.onAnimation = function (e) {\n        return e ? t.on(\"raphael.anim.frame.\" + this.id, e) : t.unbind(\"raphael.anim.frame.\" + this.id), this;\n      }, ne.prototype.delay = function (t) {\n        var e = new ne(this.anim, this.ms);\n        return e.times = this.times, e.del = +t || 0, e;\n      }, ne.prototype.repeat = function (t) {\n        var e = new ne(this.anim, this.ms);\n        return e.del = this.del, e.times = _2.floor(w(t, 0)) || 1, e;\n      }, e.animation = function (t, r, i, n) {\n        if (t instanceof ne) return t;\n        !e.is(i, \"function\") && i || (n = n || i || null, i = null), t = Object(t), r = +r || 0;\n        var a,\n            s,\n            l = {};\n\n        for (s in t) {\n          t[o](s) && z(s) != s && z(s) + \"%\" != s && (a = !0, l[s] = t[s]);\n        }\n\n        if (a) return i && (l.easing = i), n && (l.callback = n), new ne({\n          100: l\n        }, r);\n\n        if (n) {\n          var h = 0;\n\n          for (var u in t) {\n            var c = F(u);\n            t[o](u) && c > h && (h = c);\n          }\n\n          !t[h += \"%\"].callback && (t[h].callback = n);\n        }\n\n        return new ne(t, r);\n      }, Wt.animate = function (t, r, i, n) {\n        if (this.removed) return n && n.call(this), this;\n        var a = t instanceof ne ? t : e.animation(t, r, i, n);\n        return ae(a, this, a.percents[0], null, this.attr()), this;\n      }, Wt.setTime = function (t, e) {\n        return t && null != e && this.status(t, k(e, t.ms) / t.ms), this;\n      }, Wt.status = function (t, e) {\n        var r,\n            i,\n            n = [],\n            a = 0;\n        if (null != e) return ae(t, this, -1, k(e, 1)), this;\n\n        for (r = Kt.length; a < r; a++) {\n          if ((i = Kt[a]).el.id == this.id && (!t || i.anim == t)) {\n            if (t) return i.status;\n            n.push({\n              anim: i.anim,\n              status: i.status\n            });\n          }\n        }\n\n        return t ? 0 : n;\n      }, Wt.pause = function (e) {\n        for (var r = 0; r < Kt.length; r++) {\n          Kt[r].el.id != this.id || e && Kt[r].anim != e || !1 !== t(\"raphael.anim.pause.\" + this.id, this, Kt[r].anim) && (Kt[r].paused = !0);\n        }\n\n        return this;\n      }, Wt.resume = function (e) {\n        for (var r = 0; r < Kt.length; r++) {\n          if (Kt[r].el.id == this.id && (!e || Kt[r].anim == e)) {\n            var i = Kt[r];\n            !1 !== t(\"raphael.anim.resume.\" + this.id, this, i.anim) && (delete i.paused, this.status(i.anim, i.status));\n          }\n        }\n\n        return this;\n      }, Wt.stop = function (e) {\n        for (var r = 0; r < Kt.length; r++) {\n          Kt[r].el.id != this.id || e && Kt[r].anim != e || !1 !== t(\"raphael.anim.stop.\" + this.id, this, Kt[r].anim) && Kt.splice(r--, 1);\n        }\n\n        return this;\n      }, t.on(\"raphael.remove\", se), t.on(\"raphael.clear\", se), Wt.toString = function () {\n        return \"Raphaël’s object\";\n      };\n\n      var oe,\n          le,\n          he,\n          _ue,\n          ce = function ce(t) {\n        if (this.items = [], this.length = 0, this.type = \"set\", t) for (var e = 0, r = t.length; e < r; e++) {\n          !t[e] || t[e].constructor != Wt.constructor && t[e].constructor != ce || (this[this.items.length] = this.items[this.items.length] = t[e], this.length++);\n        }\n      },\n          fe = ce.prototype;\n\n      for (var pe in fe.push = function () {\n        for (var t, e, r = 0, i = arguments.length; r < i; r++) {\n          !(t = arguments[r]) || t.constructor != Wt.constructor && t.constructor != ce || (this[e = this.items.length] = this.items[e] = t, this.length++);\n        }\n\n        return this;\n      }, fe.pop = function () {\n        return this.length && delete this[this.length--], this.items.pop();\n      }, fe.forEach = function (t, e) {\n        for (var r = 0, i = this.items.length; r < i; r++) {\n          if (!1 === t.call(e, this.items[r], r)) return this;\n        }\n\n        return this;\n      }, Wt) {\n        Wt[o](pe) && (fe[pe] = function (t) {\n          return function () {\n            var e = arguments;\n            return this.forEach(function (r) {\n              r[t][c](r, e);\n            });\n          };\n        }(pe));\n      }\n\n      return fe.attr = function (t, r) {\n        if (t && e.is(t, A) && e.is(t[0], \"object\")) for (var i = 0, n = t.length; i < n; i++) {\n          this.items[i].attr(t[i]);\n        } else for (var a = 0, s = this.items.length; a < s; a++) {\n          this.items[a].attr(t, r);\n        }\n        return this;\n      }, fe.clear = function () {\n        for (; this.length;) {\n          this.pop();\n        }\n      }, fe.splice = function (t, e, r) {\n        t = t < 0 ? w(this.length + t, 0) : t, e = w(0, k(this.length - t, e));\n        var i,\n            n = [],\n            a = [],\n            s = [];\n\n        for (i = 2; i < arguments.length; i++) {\n          s.push(arguments[i]);\n        }\n\n        for (i = 0; i < e; i++) {\n          a.push(this[t + i]);\n        }\n\n        for (; i < this.length - t; i++) {\n          n.push(this[t + i]);\n        }\n\n        var o = s.length;\n\n        for (i = 0; i < o + n.length; i++) {\n          this.items[t + i] = this[t + i] = i < o ? s[i] : n[i - o];\n        }\n\n        for (i = this.items.length = this.length -= e - o; this[i];) {\n          delete this[i++];\n        }\n\n        return new ce(a);\n      }, fe.exclude = function (t) {\n        for (var e = 0, r = this.length; e < r; e++) {\n          if (this[e] == t) return this.splice(e, 1), !0;\n        }\n      }, fe.animate = function (t, r, i, n) {\n        (e.is(i, \"function\") || !i) && (n = i || null);\n        var a,\n            s,\n            o = this.items.length,\n            l = o,\n            h = this;\n        if (!o) return this;\n        n && (s = function s() {\n          ! --o && n.call(h);\n        }), i = e.is(i, \"string\") ? i : s;\n        var u = e.animation(t, r, i, s);\n\n        for (a = this.items[--l].animate(u); l--;) {\n          this.items[l] && !this.items[l].removed && this.items[l].animateWith(a, u, u), this.items[l] && !this.items[l].removed || o--;\n        }\n\n        return this;\n      }, fe.insertAfter = function (t) {\n        for (var e = this.items.length; e--;) {\n          this.items[e].insertAfter(t);\n        }\n\n        return this;\n      }, fe.getBBox = function () {\n        for (var t = [], e = [], r = [], i = [], n = this.items.length; n--;) {\n          if (!this.items[n].removed) {\n            var a = this.items[n].getBBox();\n            t.push(a.x), e.push(a.y), r.push(a.x + a.width), i.push(a.y + a.height);\n          }\n        }\n\n        return {\n          x: t = k[c](0, t),\n          y: e = k[c](0, e),\n          x2: r = w[c](0, r),\n          y2: i = w[c](0, i),\n          width: r - t,\n          height: i - e\n        };\n      }, fe.clone = function (t) {\n        t = this.paper.set();\n\n        for (var e = 0, r = this.items.length; e < r; e++) {\n          t.push(this.items[e].clone());\n        }\n\n        return t;\n      }, fe.toString = function () {\n        return \"Raphaël‘s set\";\n      }, fe.glow = function (t) {\n        var e = this.paper.set();\n        return this.forEach(function (r, i) {\n          var n = r.glow(t);\n          null != n && n.forEach(function (t, r) {\n            e.push(t);\n          });\n        }), e;\n      }, fe.isPointInside = function (t, e) {\n        var r = !1;\n        return this.forEach(function (i) {\n          if (i.isPointInside(t, e)) return r = !0, !1;\n        }), r;\n      }, e.registerFont = function (t) {\n        if (!t.face) return t;\n        this.fonts = this.fonts || {};\n        var e = {\n          w: t.w,\n          face: {},\n          glyphs: {}\n        },\n            r = t.face[\"font-family\"];\n\n        for (var i in t.face) {\n          t.face[o](i) && (e.face[i] = t.face[i]);\n        }\n\n        if (this.fonts[r] ? this.fonts[r].push(e) : this.fonts[r] = [e], !t.svg) for (var n in e.face[\"units-per-em\"] = F(t.face[\"units-per-em\"], 10), t.glyphs) {\n          if (t.glyphs[o](n)) {\n            var a = t.glyphs[n];\n            if (e.glyphs[n] = {\n              w: a.w,\n              k: {},\n              d: a.d && \"M\" + a.d.replace(/[mlcxtrv]/g, function (t) {\n                return {\n                  l: \"L\",\n                  c: \"C\",\n                  x: \"z\",\n                  t: \"m\",\n                  r: \"l\",\n                  v: \"c\"\n                }[t] || \"M\";\n              }) + \"z\"\n            }, a.k) for (var s in a.k) {\n              a[o](s) && (e.glyphs[n].k[s] = a.k[s]);\n            }\n          }\n        }\n        return t;\n      }, i.getFont = function (t, r, i, n) {\n        if (n = n || \"normal\", i = i || \"normal\", r = +r || {\n          normal: 400,\n          bold: 700,\n          lighter: 300,\n          bolder: 800\n        }[r] || 400, e.fonts) {\n          var a,\n              s = e.fonts[t];\n\n          if (!s) {\n            var l = new RegExp(\"(^|\\\\s)\" + t.replace(/[^\\w\\d\\s+!~.:_-]/g, d) + \"(\\\\s|$)\", \"i\");\n\n            for (var h in e.fonts) {\n              if (e.fonts[o](h) && l.test(h)) {\n                s = e.fonts[h];\n                break;\n              }\n            }\n          }\n\n          if (s) for (var u = 0, c = s.length; u < c && ((a = s[u]).face[\"font-weight\"] != r || a.face[\"font-style\"] != i && a.face[\"font-style\"] || a.face[\"font-stretch\"] != n); u++) {\n            ;\n          }\n          return a;\n        }\n      }, i.print = function (t, r, i, a, s, o, l, h) {\n        o = o || \"middle\", l = w(k(l || 0, 1), -1), h = w(k(h || 1, 3), 1);\n        var u,\n            c = x(i)[v](d),\n            f = 0,\n            p = 0,\n            g = d;\n\n        if (e.is(a, \"string\") && (a = this.getFont(a)), a) {\n          u = (s || 16) / a.face[\"units-per-em\"];\n\n          for (var y = a.face.bbox[v](n), m = +y[0], b = y[3] - y[1], _ = 0, B = +y[1] + (\"baseline\" == o ? b + +a.face.descent : b / 2), C = 0, S = c.length; C < S; C++) {\n            if (\"\\n\" == c[C]) f = 0, A = 0, p = 0, _ += b * h;else {\n              var T = p && a.glyphs[c[C - 1]] || {},\n                  A = a.glyphs[c[C]];\n              f += p ? (T.w || a.w) + (T.k && T.k[c[C]] || 0) + a.w * l : 0, p = 1;\n            }\n            A && A.d && (g += e.transformPath(A.d, [\"t\", f * u, _ * u, \"s\", u, u, m, B, \"t\", (t - m) / u, (r - B) / u]));\n          }\n        }\n\n        return this.path(g).attr({\n          fill: \"#000\",\n          stroke: \"none\"\n        });\n      }, i.add = function (t) {\n        if (e.is(t, \"array\")) for (var r, i = this.set(), n = 0, s = t.length; n < s; n++) {\n          r = t[n] || {}, a[o](r.type) && i.push(this[r.type]().attr(r));\n        }\n        return i;\n      }, e.format = function (t, r) {\n        var i = e.is(r, A) ? [0][f](r) : arguments;\n        return t && e.is(t, \"string\") && i.length - 1 && (t = t.replace(s, function (t, e) {\n          return null == i[++e] ? d : i[e];\n        })), t || d;\n      }, e.fullfill = (oe = /\\{([^\\}]+)\\}/g, le = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, function (t, e) {\n        return String(t).replace(oe, function (t, r) {\n          return function (t, e, r) {\n            var i = r;\n            return e.replace(le, function (t, e, r, n, a) {\n              e = e || n, i && (e in i && (i = i[e]), \"function\" == typeof i && a && (i = i()));\n            }), i = (null == i || i == r ? t : i) + \"\";\n          }(t, r, e);\n        });\n      }), e.ninja = function () {\n        if (h.was) l.win.Raphael = h.is;else {\n          window.Raphael = void 0;\n\n          try {\n            delete window.Raphael;\n          } catch (t) {}\n        }\n        return e;\n      }, e.st = fe, t.on(\"raphael.DOMload\", function () {\n        r = !0;\n      }), null == (he = document).readyState && he.addEventListener && (he.addEventListener(\"DOMContentLoaded\", _ue = function ue() {\n        he.removeEventListener(\"DOMContentLoaded\", _ue, !1), he.readyState = \"complete\";\n      }, !1), he.readyState = \"loading\"), function t() {\n        /in/.test(he.readyState) ? setTimeout(t, 9) : e.eve(\"raphael.DOMload\");\n      }(), e;\n    }.apply(e, i)) || (t.exports = n);\n  }, function (t, e, r) {\n    var i, n;\n    i = [r(0), r(3), r(4)], void 0 === (n = function (t) {\n      return t;\n    }.apply(e, i)) || (t.exports = n);\n  }, function (t, e, r) {\n    var i, n, a, s, o, l, h, u, c, f, p, d, g, _x;\n\n    s = \"hasOwnProperty\", o = /[\\.\\/]/, l = /\\s*,\\s*/, h = function h(t, e) {\n      return t - e;\n    }, u = {\n      n: {}\n    }, c = function c() {\n      for (var t = 0, e = this.length; t < e; t++) {\n        if (void 0 !== this[t]) return this[t];\n      }\n    }, f = function f() {\n      for (var t = this.length; --t;) {\n        if (void 0 !== this[t]) return this[t];\n      }\n    }, p = Object.prototype.toString, d = String, g = Array.isArray || function (t) {\n      return t instanceof Array || \"[object Array]\" == p.call(t);\n    }, (_x = function x(t, e) {\n      var r,\n          i = a,\n          s = Array.prototype.slice.call(arguments, 2),\n          o = _x.listeners(t),\n          l = 0,\n          u = [],\n          p = {},\n          d = [],\n          g = n;\n\n      d.firstDefined = c, d.lastDefined = f, n = t, a = 0;\n\n      for (var v = 0, y = o.length; v < y; v++) {\n        \"zIndex\" in o[v] && (u.push(o[v].zIndex), o[v].zIndex < 0 && (p[o[v].zIndex] = o[v]));\n      }\n\n      for (u.sort(h); u[l] < 0;) {\n        if (r = p[u[l++]], d.push(r.apply(e, s)), a) return a = i, d;\n      }\n\n      for (v = 0; v < y; v++) {\n        if (\"zIndex\" in (r = o[v])) {\n          if (r.zIndex == u[l]) {\n            if (d.push(r.apply(e, s)), a) break;\n\n            do {\n              if ((r = p[u[++l]]) && d.push(r.apply(e, s)), a) break;\n            } while (r);\n          } else p[r.zIndex] = r;\n        } else if (d.push(r.apply(e, s)), a) break;\n      }\n\n      return a = i, n = g, d;\n    })._events = u, _x.listeners = function (t) {\n      var e,\n          r,\n          i,\n          n,\n          a,\n          s,\n          l,\n          h,\n          c = g(t) ? t : t.split(o),\n          f = u,\n          p = [f],\n          d = [];\n\n      for (n = 0, a = c.length; n < a; n++) {\n        for (h = [], s = 0, l = p.length; s < l; s++) {\n          for (r = [(f = p[s].n)[c[n]], f[\"*\"]], i = 2; i--;) {\n            (e = r[i]) && (h.push(e), d = d.concat(e.f || []));\n          }\n        }\n\n        p = h;\n      }\n\n      return d;\n    }, _x.separator = function (t) {\n      t ? (t = \"[\" + (t = d(t).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\")) + \"]\", o = new RegExp(t)) : o = /[\\.\\/]/;\n    }, _x.on = function (t, e) {\n      if (\"function\" != typeof e) return function () {};\n\n      for (var r = g(t) ? g(t[0]) ? t : [t] : d(t).split(l), i = 0, n = r.length; i < n; i++) {\n        !function (t) {\n          for (var r, i = g(t) ? t : d(t).split(o), n = u, a = 0, s = i.length; a < s; a++) {\n            n = (n = n.n).hasOwnProperty(i[a]) && n[i[a]] || (n[i[a]] = {\n              n: {}\n            });\n          }\n\n          for (n.f = n.f || [], a = 0, s = n.f.length; a < s; a++) {\n            if (n.f[a] == e) {\n              r = !0;\n              break;\n            }\n          }\n\n          !r && n.f.push(e);\n        }(r[i]);\n      }\n\n      return function (t) {\n        +t == +t && (e.zIndex = +t);\n      };\n    }, _x.f = function (t) {\n      var e = [].slice.call(arguments, 1);\n      return function () {\n        _x.apply(null, [t, null].concat(e).concat([].slice.call(arguments, 0)));\n      };\n    }, _x.stop = function () {\n      a = 1;\n    }, _x.nt = function (t) {\n      var e = g(n) ? n.join(\".\") : n;\n      return t ? new RegExp(\"(?:\\\\.|\\\\/|^)\" + t + \"(?:\\\\.|\\\\/|$)\").test(e) : e;\n    }, _x.nts = function () {\n      return g(n) ? n : n.split(o);\n    }, _x.off = _x.unbind = function (t, e) {\n      if (t) {\n        var r = g(t) ? g(t[0]) ? t : [t] : d(t).split(l);\n        if (r.length > 1) for (var i = 0, n = r.length; i < n; i++) {\n          _x.off(r[i], e);\n        } else {\n          r = g(t) ? t : d(t).split(o);\n          var a,\n              h,\n              c,\n              f,\n              p,\n              v = [u];\n\n          for (i = 0, n = r.length; i < n; i++) {\n            for (f = 0; f < v.length; f += c.length - 2) {\n              if (c = [f, 1], a = v[f].n, \"*\" != r[i]) a[r[i]] && c.push(a[r[i]]);else for (h in a) {\n                a[s](h) && c.push(a[h]);\n              }\n              v.splice.apply(v, c);\n            }\n          }\n\n          for (i = 0, n = v.length; i < n; i++) {\n            for (a = v[i]; a.n;) {\n              if (e) {\n                if (a.f) {\n                  for (f = 0, p = a.f.length; f < p; f++) {\n                    if (a.f[f] == e) {\n                      a.f.splice(f, 1);\n                      break;\n                    }\n                  }\n\n                  !a.f.length && delete a.f;\n                }\n\n                for (h in a.n) {\n                  if (a.n[s](h) && a.n[h].f) {\n                    var y = a.n[h].f;\n\n                    for (f = 0, p = y.length; f < p; f++) {\n                      if (y[f] == e) {\n                        y.splice(f, 1);\n                        break;\n                      }\n                    }\n\n                    !y.length && delete a.n[h].f;\n                  }\n                }\n              } else for (h in delete a.f, a.n) {\n                a.n[s](h) && a.n[h].f && delete a.n[h].f;\n              }\n\n              a = a.n;\n            }\n          }\n        }\n      } else _x._events = u = {\n        n: {}\n      };\n    }, _x.once = function (t, e) {\n      var r = function r() {\n        return _x.off(t, r), e.apply(this, arguments);\n      };\n\n      return _x.on(t, r);\n    }, _x.version = \"0.5.0\", _x.toString = function () {\n      return \"You are running Eve 0.5.0\";\n    }, t.exports ? t.exports = _x : void 0 === (i = function () {\n      return _x;\n    }.apply(e, [])) || (t.exports = i);\n  }, function (t, e, r) {\n    var i, n;\n    i = [r(0)], void 0 === (n = function (t) {\n      if (!t || t.svg) {\n        var e = \"hasOwnProperty\",\n            r = String,\n            i = parseFloat,\n            n = parseInt,\n            a = Math,\n            s = a.max,\n            o = a.abs,\n            l = a.pow,\n            h = /[, ]+/,\n            u = t.eve,\n            c = \"\",\n            f = \" \",\n            p = \"http://www.w3.org/1999/xlink\",\n            d = {\n          block: \"M5,0 0,2.5 5,5z\",\n          classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n          diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n          open: \"M6,1 1,3.5 6,6\",\n          oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n        },\n            g = {};\n\n        t.toString = function () {\n          return \"Your browser supports SVG.\\nYou are running Raphaël \" + this.version;\n        };\n\n        var x = function x(i, n) {\n          if (n) for (var a in \"string\" == typeof i && (i = x(i)), n) {\n            n[e](a) && (\"xlink:\" == a.substring(0, 6) ? i.setAttributeNS(p, a.substring(6), r(n[a])) : i.setAttribute(a, r(n[a])));\n          } else (i = t._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", i)).style && (i.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n          return i;\n        },\n            v = function v(e, n) {\n          var h = \"linear\",\n              u = e.id + n,\n              f = .5,\n              p = .5,\n              d = e.node,\n              g = e.paper,\n              v = d.style,\n              m = t._g.doc.getElementById(u);\n\n          if (!m) {\n            if (n = (n = r(n).replace(t._radial_gradient, function (t, e, r) {\n              if (h = \"radial\", e && r) {\n                f = i(e);\n                var n = 2 * ((p = i(r)) > .5) - 1;\n                l(f - .5, 2) + l(p - .5, 2) > .25 && (p = a.sqrt(.25 - l(f - .5, 2)) * n + .5) && .5 != p && (p = p.toFixed(5) - 1e-5 * n);\n              }\n\n              return c;\n            })).split(/\\s*\\-\\s*/), \"linear\" == h) {\n              var b = n.shift();\n              if (b = -i(b), isNaN(b)) return null;\n              var _ = [0, 0, a.cos(t.rad(b)), a.sin(t.rad(b))],\n                  w = 1 / (s(o(_[2]), o(_[3])) || 1);\n              _[2] *= w, _[3] *= w, _[2] < 0 && (_[0] = -_[2], _[2] = 0), _[3] < 0 && (_[1] = -_[3], _[3] = 0);\n            }\n\n            var k = t._parseDots(n);\n\n            if (!k) return null;\n\n            if (u = u.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\"), e.gradient && u != e.gradient.id && (g.defs.removeChild(e.gradient), delete e.gradient), !e.gradient) {\n              m = x(h + \"Gradient\", {\n                id: u\n              }), e.gradient = m, x(m, \"radial\" == h ? {\n                fx: f,\n                fy: p\n              } : {\n                x1: _[0],\n                y1: _[1],\n                x2: _[2],\n                y2: _[3],\n                gradientTransform: e.matrix.invert()\n              }), g.defs.appendChild(m);\n\n              for (var B = 0, C = k.length; B < C; B++) {\n                m.appendChild(x(\"stop\", {\n                  offset: k[B].offset ? k[B].offset : B ? \"100%\" : \"0%\",\n                  \"stop-color\": k[B].color || \"#fff\",\n                  \"stop-opacity\": isFinite(k[B].opacity) ? k[B].opacity : 1\n                }));\n              }\n            }\n          }\n\n          return x(d, {\n            fill: y(u),\n            opacity: 1,\n            \"fill-opacity\": 1\n          }), v.fill = c, v.opacity = 1, v.fillOpacity = 1, 1;\n        },\n            y = function y(t) {\n          if ((e = document.documentMode) && (9 === e || 10 === e)) return \"url('#\" + t + \"')\";\n          var e,\n              r = document.location;\n          return \"url('\" + (r.protocol + \"//\" + r.host + r.pathname + r.search) + \"#\" + t + \"')\";\n        },\n            m = function m(t) {\n          var e = t.getBBox(1);\n          x(t.pattern, {\n            patternTransform: t.matrix.invert() + \" translate(\" + e.x + \",\" + e.y + \")\"\n          });\n        },\n            b = function b(i, n, a) {\n          if (\"path\" == i.type) {\n            for (var s, o, l, h, u, f = r(n).toLowerCase().split(\"-\"), p = i.paper, v = a ? \"end\" : \"start\", y = i.node, m = i.attrs, b = m[\"stroke-width\"], _ = f.length, w = \"classic\", k = 3, B = 3, C = 5; _--;) {\n              switch (f[_]) {\n                case \"block\":\n                case \"classic\":\n                case \"oval\":\n                case \"diamond\":\n                case \"open\":\n                case \"none\":\n                  w = f[_];\n                  break;\n\n                case \"wide\":\n                  B = 5;\n                  break;\n\n                case \"narrow\":\n                  B = 2;\n                  break;\n\n                case \"long\":\n                  k = 5;\n                  break;\n\n                case \"short\":\n                  k = 2;\n              }\n            }\n\n            if (\"open\" == w ? (k += 2, B += 2, C += 2, l = 1, h = a ? 4 : 1, u = {\n              fill: \"none\",\n              stroke: m.stroke\n            }) : (h = l = k / 2, u = {\n              fill: m.stroke,\n              stroke: \"none\"\n            }), i._.arrows ? a ? (i._.arrows.endPath && g[i._.arrows.endPath]--, i._.arrows.endMarker && g[i._.arrows.endMarker]--) : (i._.arrows.startPath && g[i._.arrows.startPath]--, i._.arrows.startMarker && g[i._.arrows.startMarker]--) : i._.arrows = {}, \"none\" != w) {\n              var S = \"raphael-marker-\" + w,\n                  T = \"raphael-marker-\" + v + w + k + B + \"-obj\" + i.id;\n              t._g.doc.getElementById(S) ? g[S]++ : (p.defs.appendChild(x(x(\"path\"), {\n                \"stroke-linecap\": \"round\",\n                d: d[w],\n                id: S\n              })), g[S] = 1);\n\n              var A,\n                  M = t._g.doc.getElementById(T);\n\n              M ? (g[T]++, A = M.getElementsByTagName(\"use\")[0]) : (M = x(x(\"marker\"), {\n                id: T,\n                markerHeight: B,\n                markerWidth: k,\n                orient: \"auto\",\n                refX: h,\n                refY: B / 2\n              }), A = x(x(\"use\"), {\n                \"xlink:href\": \"#\" + S,\n                transform: (a ? \"rotate(180 \" + k / 2 + \" \" + B / 2 + \") \" : c) + \"scale(\" + k / C + \",\" + B / C + \")\",\n                \"stroke-width\": (1 / ((k / C + B / C) / 2)).toFixed(4)\n              }), M.appendChild(A), p.defs.appendChild(M), g[T] = 1), x(A, u);\n              var E = l * (\"diamond\" != w && \"oval\" != w);\n              a ? (s = i._.arrows.startdx * b || 0, o = t.getTotalLength(m.path) - E * b) : (s = E * b, o = t.getTotalLength(m.path) - (i._.arrows.enddx * b || 0)), (u = {})[\"marker-\" + v] = \"url(#\" + T + \")\", (o || s) && (u.d = t.getSubpath(m.path, s, o)), x(y, u), i._.arrows[v + \"Path\"] = S, i._.arrows[v + \"Marker\"] = T, i._.arrows[v + \"dx\"] = E, i._.arrows[v + \"Type\"] = w, i._.arrows[v + \"String\"] = n;\n            } else a ? (s = i._.arrows.startdx * b || 0, o = t.getTotalLength(m.path) - s) : (s = 0, o = t.getTotalLength(m.path) - (i._.arrows.enddx * b || 0)), i._.arrows[v + \"Path\"] && x(y, {\n              d: t.getSubpath(m.path, s, o)\n            }), delete i._.arrows[v + \"Path\"], delete i._.arrows[v + \"Marker\"], delete i._.arrows[v + \"dx\"], delete i._.arrows[v + \"Type\"], delete i._.arrows[v + \"String\"];\n\n            for (u in g) {\n              if (g[e](u) && !g[u]) {\n                var N = t._g.doc.getElementById(u);\n\n                N && N.parentNode.removeChild(N);\n              }\n            }\n          }\n        },\n            _ = {\n          \"-\": [3, 1],\n          \".\": [1, 1],\n          \"-.\": [3, 1, 1, 1],\n          \"-..\": [3, 1, 1, 1, 1, 1],\n          \". \": [1, 3],\n          \"- \": [4, 3],\n          \"--\": [8, 3],\n          \"- .\": [4, 3, 1, 3],\n          \"--.\": [8, 3, 1, 3],\n          \"--..\": [8, 3, 1, 3, 1, 3]\n        },\n            w = function w(t, e, i) {\n          if (e = _[r(e).toLowerCase()]) {\n            for (var n = t.attrs[\"stroke-width\"] || \"1\", a = {\n              round: n,\n              square: n,\n              butt: 0\n            }[t.attrs[\"stroke-linecap\"] || i[\"stroke-linecap\"]] || 0, s = [], o = e.length; o--;) {\n              s[o] = e[o] * n + (o % 2 ? 1 : -1) * a;\n            }\n\n            x(t.node, {\n              \"stroke-dasharray\": s.join(\",\")\n            });\n          } else x(t.node, {\n            \"stroke-dasharray\": \"none\"\n          });\n        },\n            k = function k(i, a) {\n          var l = i.node,\n              u = i.attrs,\n              f = l.style.visibility;\n\n          for (var d in l.style.visibility = \"hidden\", a) {\n            if (a[e](d)) {\n              if (!t._availableAttrs[e](d)) continue;\n              var g = a[d];\n\n              switch (u[d] = g, d) {\n                case \"blur\":\n                  i.blur(g);\n                  break;\n\n                case \"title\":\n                  var y = l.getElementsByTagName(\"title\");\n                  if (y.length && (y = y[0])) y.firstChild.nodeValue = g;else {\n                    y = x(\"title\");\n\n                    var _ = t._g.doc.createTextNode(g);\n\n                    y.appendChild(_), l.appendChild(y);\n                  }\n                  break;\n\n                case \"href\":\n                case \"target\":\n                  var k = l.parentNode;\n\n                  if (\"a\" != k.tagName.toLowerCase()) {\n                    var C = x(\"a\");\n                    k.insertBefore(C, l), C.appendChild(l), k = C;\n                  }\n\n                  \"target\" == d ? k.setAttributeNS(p, \"show\", \"blank\" == g ? \"new\" : g) : k.setAttributeNS(p, d, g);\n                  break;\n\n                case \"cursor\":\n                  l.style.cursor = g;\n                  break;\n\n                case \"transform\":\n                  i.transform(g);\n                  break;\n\n                case \"arrow-start\":\n                  b(i, g);\n                  break;\n\n                case \"arrow-end\":\n                  b(i, g, 1);\n                  break;\n\n                case \"clip-rect\":\n                  var S = r(g).split(h);\n\n                  if (4 == S.length) {\n                    i.clip && i.clip.parentNode.parentNode.removeChild(i.clip.parentNode);\n                    var T = x(\"clipPath\"),\n                        A = x(\"rect\");\n                    T.id = t.createUUID(), x(A, {\n                      x: S[0],\n                      y: S[1],\n                      width: S[2],\n                      height: S[3]\n                    }), T.appendChild(A), i.paper.defs.appendChild(T), x(l, {\n                      \"clip-path\": \"url(#\" + T.id + \")\"\n                    }), i.clip = A;\n                  }\n\n                  if (!g) {\n                    var M = l.getAttribute(\"clip-path\");\n\n                    if (M) {\n                      var E = t._g.doc.getElementById(M.replace(/(^url\\(#|\\)$)/g, c));\n\n                      E && E.parentNode.removeChild(E), x(l, {\n                        \"clip-path\": c\n                      }), delete i.clip;\n                    }\n                  }\n\n                  break;\n\n                case \"path\":\n                  \"path\" == i.type && (x(l, {\n                    d: g ? u.path = t._pathToAbsolute(g) : \"M0,0\"\n                  }), i._.dirty = 1, i._.arrows && (\"startString\" in i._.arrows && b(i, i._.arrows.startString), \"endString\" in i._.arrows && b(i, i._.arrows.endString, 1)));\n                  break;\n\n                case \"width\":\n                  if (l.setAttribute(d, g), i._.dirty = 1, !u.fx) break;\n                  d = \"x\", g = u.x;\n\n                case \"x\":\n                  u.fx && (g = -u.x - (u.width || 0));\n\n                case \"rx\":\n                  if (\"rx\" == d && \"rect\" == i.type) break;\n\n                case \"cx\":\n                  l.setAttribute(d, g), i.pattern && m(i), i._.dirty = 1;\n                  break;\n\n                case \"height\":\n                  if (l.setAttribute(d, g), i._.dirty = 1, !u.fy) break;\n                  d = \"y\", g = u.y;\n\n                case \"y\":\n                  u.fy && (g = -u.y - (u.height || 0));\n\n                case \"ry\":\n                  if (\"ry\" == d && \"rect\" == i.type) break;\n\n                case \"cy\":\n                  l.setAttribute(d, g), i.pattern && m(i), i._.dirty = 1;\n                  break;\n\n                case \"r\":\n                  \"rect\" == i.type ? x(l, {\n                    rx: g,\n                    ry: g\n                  }) : l.setAttribute(d, g), i._.dirty = 1;\n                  break;\n\n                case \"src\":\n                  \"image\" == i.type && l.setAttributeNS(p, \"href\", g);\n                  break;\n\n                case \"stroke-width\":\n                  1 == i._.sx && 1 == i._.sy || (g /= s(o(i._.sx), o(i._.sy)) || 1), l.setAttribute(d, g), u[\"stroke-dasharray\"] && w(i, u[\"stroke-dasharray\"], a), i._.arrows && (\"startString\" in i._.arrows && b(i, i._.arrows.startString), \"endString\" in i._.arrows && b(i, i._.arrows.endString, 1));\n                  break;\n\n                case \"stroke-dasharray\":\n                  w(i, g, a);\n                  break;\n\n                case \"fill\":\n                  var N = r(g).match(t._ISURL);\n\n                  if (N) {\n                    T = x(\"pattern\");\n                    var L = x(\"image\");\n                    T.id = t.createUUID(), x(T, {\n                      x: 0,\n                      y: 0,\n                      patternUnits: \"userSpaceOnUse\",\n                      height: 1,\n                      width: 1\n                    }), x(L, {\n                      x: 0,\n                      y: 0,\n                      \"xlink:href\": N[1]\n                    }), T.appendChild(L), function (e) {\n                      t._preload(N[1], function () {\n                        var t = this.offsetWidth,\n                            r = this.offsetHeight;\n                        x(e, {\n                          width: t,\n                          height: r\n                        }), x(L, {\n                          width: t,\n                          height: r\n                        });\n                      });\n                    }(T), i.paper.defs.appendChild(T), x(l, {\n                      fill: \"url(#\" + T.id + \")\"\n                    }), i.pattern = T, i.pattern && m(i);\n                    break;\n                  }\n\n                  var P = t.getRGB(g);\n\n                  if (P.error) {\n                    if ((\"circle\" == i.type || \"ellipse\" == i.type || \"r\" != r(g).charAt()) && v(i, g)) {\n                      if (\"opacity\" in u || \"fill-opacity\" in u) {\n                        var z = t._g.doc.getElementById(l.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, c));\n\n                        if (z) {\n                          var F = z.getElementsByTagName(\"stop\");\n                          x(F[F.length - 1], {\n                            \"stop-opacity\": (\"opacity\" in u ? u.opacity : 1) * (\"fill-opacity\" in u ? u[\"fill-opacity\"] : 1)\n                          });\n                        }\n                      }\n\n                      u.gradient = g, u.fill = \"none\";\n                      break;\n                    }\n                  } else delete a.gradient, delete u.gradient, !t.is(u.opacity, \"undefined\") && t.is(a.opacity, \"undefined\") && x(l, {\n                    opacity: u.opacity\n                  }), !t.is(u[\"fill-opacity\"], \"undefined\") && t.is(a[\"fill-opacity\"], \"undefined\") && x(l, {\n                    \"fill-opacity\": u[\"fill-opacity\"]\n                  });\n\n                  P[e](\"opacity\") && x(l, {\n                    \"fill-opacity\": P.opacity > 1 ? P.opacity / 100 : P.opacity\n                  });\n\n                case \"stroke\":\n                  P = t.getRGB(g), l.setAttribute(d, P.hex), \"stroke\" == d && P[e](\"opacity\") && x(l, {\n                    \"stroke-opacity\": P.opacity > 1 ? P.opacity / 100 : P.opacity\n                  }), \"stroke\" == d && i._.arrows && (\"startString\" in i._.arrows && b(i, i._.arrows.startString), \"endString\" in i._.arrows && b(i, i._.arrows.endString, 1));\n                  break;\n\n                case \"gradient\":\n                  (\"circle\" == i.type || \"ellipse\" == i.type || \"r\" != r(g).charAt()) && v(i, g);\n                  break;\n\n                case \"opacity\":\n                  u.gradient && !u[e](\"stroke-opacity\") && x(l, {\n                    \"stroke-opacity\": g > 1 ? g / 100 : g\n                  });\n\n                case \"fill-opacity\":\n                  if (u.gradient) {\n                    (z = t._g.doc.getElementById(l.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, c))) && (F = z.getElementsByTagName(\"stop\"), x(F[F.length - 1], {\n                      \"stop-opacity\": g\n                    }));\n                    break;\n                  }\n\n                default:\n                  \"font-size\" == d && (g = n(g, 10) + \"px\");\n                  var R = d.replace(/(\\-.)/g, function (t) {\n                    return t.substring(1).toUpperCase();\n                  });\n                  l.style[R] = g, i._.dirty = 1, l.setAttribute(d, g);\n              }\n            }\n          }\n\n          B(i, a), l.style.visibility = f;\n        },\n            B = function B(i, a) {\n          if (\"text\" == i.type && (a[e](\"text\") || a[e](\"font\") || a[e](\"font-size\") || a[e](\"x\") || a[e](\"y\"))) {\n            var s = i.attrs,\n                o = i.node,\n                l = o.firstChild ? n(t._g.doc.defaultView.getComputedStyle(o.firstChild, c).getPropertyValue(\"font-size\"), 10) : 10;\n\n            if (a[e](\"text\")) {\n              for (s.text = a.text; o.firstChild;) {\n                o.removeChild(o.firstChild);\n              }\n\n              for (var h, u = r(a.text).split(\"\\n\"), f = [], p = 0, d = u.length; p < d; p++) {\n                h = x(\"tspan\"), p && x(h, {\n                  dy: 1.2 * l,\n                  x: s.x\n                }), h.appendChild(t._g.doc.createTextNode(u[p])), o.appendChild(h), f[p] = h;\n              }\n            } else for (p = 0, d = (f = o.getElementsByTagName(\"tspan\")).length; p < d; p++) {\n              p ? x(f[p], {\n                dy: 1.2 * l,\n                x: s.x\n              }) : x(f[0], {\n                dy: 0\n              });\n            }\n\n            x(o, {\n              x: s.x,\n              y: s.y\n            }), i._.dirty = 1;\n\n            var g = i._getBBox(),\n                v = s.y - (g.y + g.height / 2);\n\n            v && t.is(v, \"finite\") && x(f[0], {\n              dy: v\n            });\n          }\n        },\n            C = function C(t) {\n          return t.parentNode && \"a\" === t.parentNode.tagName.toLowerCase() ? t.parentNode : t;\n        },\n            S = function S(e, r) {\n          this[0] = this.node = e, e.raphael = !0, this.id = (\"0000\" + (Math.random() * Math.pow(36, 5) << 0).toString(36)).slice(-5), e.raphaelid = this.id, this.matrix = t.matrix(), this.realPath = null, this.paper = r, this.attrs = this.attrs || {}, this._ = {\n            transform: [],\n            sx: 1,\n            sy: 1,\n            deg: 0,\n            dx: 0,\n            dy: 0,\n            dirty: 1\n          }, !r.bottom && (r.bottom = this), this.prev = r.top, r.top && (r.top.next = this), r.top = this, this.next = null;\n        },\n            T = t.el;\n\n        S.prototype = T, T.constructor = S, t._engine.path = function (t, e) {\n          var r = x(\"path\");\n          e.canvas && e.canvas.appendChild(r);\n          var i = new S(r, e);\n          return i.type = \"path\", k(i, {\n            fill: \"none\",\n            stroke: \"#000\",\n            path: t\n          }), i;\n        }, T.rotate = function (t, e, n) {\n          if (this.removed) return this;\n\n          if ((t = r(t).split(h)).length - 1 && (e = i(t[1]), n = i(t[2])), t = i(t[0]), null == n && (e = n), null == e || null == n) {\n            var a = this.getBBox(1);\n            e = a.x + a.width / 2, n = a.y + a.height / 2;\n          }\n\n          return this.transform(this._.transform.concat([[\"r\", t, e, n]])), this;\n        }, T.scale = function (t, e, n, a) {\n          if (this.removed) return this;\n          if ((t = r(t).split(h)).length - 1 && (e = i(t[1]), n = i(t[2]), a = i(t[3])), t = i(t[0]), null == e && (e = t), null == a && (n = a), null == n || null == a) var s = this.getBBox(1);\n          return n = null == n ? s.x + s.width / 2 : n, a = null == a ? s.y + s.height / 2 : a, this.transform(this._.transform.concat([[\"s\", t, e, n, a]])), this;\n        }, T.translate = function (t, e) {\n          return this.removed ? this : ((t = r(t).split(h)).length - 1 && (e = i(t[1])), t = i(t[0]) || 0, e = +e || 0, this.transform(this._.transform.concat([[\"t\", t, e]])), this);\n        }, T.transform = function (r) {\n          var i = this._;\n          if (null == r) return i.transform;\n\n          if (t._extractTransform(this, r), this.clip && x(this.clip, {\n            transform: this.matrix.invert()\n          }), this.pattern && m(this), this.node && x(this.node, {\n            transform: this.matrix\n          }), 1 != i.sx || 1 != i.sy) {\n            var n = this.attrs[e](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n            this.attr({\n              \"stroke-width\": n\n            });\n          }\n\n          return this;\n        }, T.hide = function () {\n          return this.removed || (this.node.style.display = \"none\"), this;\n        }, T.show = function () {\n          return this.removed || (this.node.style.display = \"\"), this;\n        }, T.remove = function () {\n          var e = C(this.node);\n\n          if (!this.removed && e.parentNode) {\n            var r = this.paper;\n\n            for (var i in r.__set__ && r.__set__.exclude(this), u.unbind(\"raphael.*.*.\" + this.id), this.gradient && r.defs.removeChild(this.gradient), t._tear(this, r), e.parentNode.removeChild(e), this.removeData(), this) {\n              this[i] = \"function\" == typeof this[i] ? t._removedFactory(i) : null;\n            }\n\n            this.removed = !0;\n          }\n        }, T._getBBox = function () {\n          if (\"none\" == this.node.style.display) {\n            this.show();\n            var t = !0;\n          }\n\n          var e,\n              r = !1;\n          this.paper.canvas.parentElement ? e = this.paper.canvas.parentElement.style : this.paper.canvas.parentNode && (e = this.paper.canvas.parentNode.style), e && \"none\" == e.display && (r = !0, e.display = \"\");\n          var i = {};\n\n          try {\n            i = this.node.getBBox();\n          } catch (t) {\n            i = {\n              x: this.node.clientLeft,\n              y: this.node.clientTop,\n              width: this.node.clientWidth,\n              height: this.node.clientHeight\n            };\n          } finally {\n            i = i || {}, r && (e.display = \"none\");\n          }\n\n          return t && this.hide(), i;\n        }, T.attr = function (r, i) {\n          if (this.removed) return this;\n\n          if (null == r) {\n            var n = {};\n\n            for (var a in this.attrs) {\n              this.attrs[e](a) && (n[a] = this.attrs[a]);\n            }\n\n            return n.gradient && \"none\" == n.fill && (n.fill = n.gradient) && delete n.gradient, n.transform = this._.transform, n;\n          }\n\n          if (null == i && t.is(r, \"string\")) {\n            if (\"fill\" == r && \"none\" == this.attrs.fill && this.attrs.gradient) return this.attrs.gradient;\n            if (\"transform\" == r) return this._.transform;\n\n            for (var s = r.split(h), o = {}, l = 0, c = s.length; l < c; l++) {\n              (r = s[l]) in this.attrs ? o[r] = this.attrs[r] : t.is(this.paper.customAttributes[r], \"function\") ? o[r] = this.paper.customAttributes[r].def : o[r] = t._availableAttrs[r];\n            }\n\n            return c - 1 ? o : o[s[0]];\n          }\n\n          if (null == i && t.is(r, \"array\")) {\n            for (o = {}, l = 0, c = r.length; l < c; l++) {\n              o[r[l]] = this.attr(r[l]);\n            }\n\n            return o;\n          }\n\n          if (null != i) {\n            var f = {};\n            f[r] = i;\n          } else null != r && t.is(r, \"object\") && (f = r);\n\n          for (var p in f) {\n            u(\"raphael.attr.\" + p + \".\" + this.id, this, f[p]);\n          }\n\n          for (p in this.paper.customAttributes) {\n            if (this.paper.customAttributes[e](p) && f[e](p) && t.is(this.paper.customAttributes[p], \"function\")) {\n              var d = this.paper.customAttributes[p].apply(this, [].concat(f[p]));\n\n              for (var g in this.attrs[p] = f[p], d) {\n                d[e](g) && (f[g] = d[g]);\n              }\n            }\n          }\n\n          return k(this, f), this;\n        }, T.toFront = function () {\n          if (this.removed) return this;\n          var e = C(this.node);\n          e.parentNode.appendChild(e);\n          var r = this.paper;\n          return r.top != this && t._tofront(this, r), this;\n        }, T.toBack = function () {\n          if (this.removed) return this;\n          var e = C(this.node),\n              r = e.parentNode;\n          r.insertBefore(e, r.firstChild), t._toback(this, this.paper);\n          this.paper;\n          return this;\n        }, T.insertAfter = function (e) {\n          if (this.removed || !e) return this;\n          var r = C(this.node),\n              i = C(e.node || e[e.length - 1].node);\n          return i.nextSibling ? i.parentNode.insertBefore(r, i.nextSibling) : i.parentNode.appendChild(r), t._insertafter(this, e, this.paper), this;\n        }, T.insertBefore = function (e) {\n          if (this.removed || !e) return this;\n          var r = C(this.node),\n              i = C(e.node || e[0].node);\n          return i.parentNode.insertBefore(r, i), t._insertbefore(this, e, this.paper), this;\n        }, T.blur = function (e) {\n          var r = this;\n\n          if (0 != +e) {\n            var i = x(\"filter\"),\n                n = x(\"feGaussianBlur\");\n            r.attrs.blur = e, i.id = t.createUUID(), x(n, {\n              stdDeviation: +e || 1.5\n            }), i.appendChild(n), r.paper.defs.appendChild(i), r._blur = i, x(r.node, {\n              filter: \"url(#\" + i.id + \")\"\n            });\n          } else r._blur && (r._blur.parentNode.removeChild(r._blur), delete r._blur, delete r.attrs.blur), r.node.removeAttribute(\"filter\");\n\n          return r;\n        }, t._engine.circle = function (t, e, r, i) {\n          var n = x(\"circle\");\n          t.canvas && t.canvas.appendChild(n);\n          var a = new S(n, t);\n          return a.attrs = {\n            cx: e,\n            cy: r,\n            r: i,\n            fill: \"none\",\n            stroke: \"#000\"\n          }, a.type = \"circle\", x(n, a.attrs), a;\n        }, t._engine.rect = function (t, e, r, i, n, a) {\n          var s = x(\"rect\");\n          t.canvas && t.canvas.appendChild(s);\n          var o = new S(s, t);\n          return o.attrs = {\n            x: e,\n            y: r,\n            width: i,\n            height: n,\n            rx: a || 0,\n            ry: a || 0,\n            fill: \"none\",\n            stroke: \"#000\"\n          }, o.type = \"rect\", x(s, o.attrs), o;\n        }, t._engine.ellipse = function (t, e, r, i, n) {\n          var a = x(\"ellipse\");\n          t.canvas && t.canvas.appendChild(a);\n          var s = new S(a, t);\n          return s.attrs = {\n            cx: e,\n            cy: r,\n            rx: i,\n            ry: n,\n            fill: \"none\",\n            stroke: \"#000\"\n          }, s.type = \"ellipse\", x(a, s.attrs), s;\n        }, t._engine.image = function (t, e, r, i, n, a) {\n          var s = x(\"image\");\n          x(s, {\n            x: r,\n            y: i,\n            width: n,\n            height: a,\n            preserveAspectRatio: \"none\"\n          }), s.setAttributeNS(p, \"href\", e), t.canvas && t.canvas.appendChild(s);\n          var o = new S(s, t);\n          return o.attrs = {\n            x: r,\n            y: i,\n            width: n,\n            height: a,\n            src: e\n          }, o.type = \"image\", o;\n        }, t._engine.text = function (e, r, i, n) {\n          var a = x(\"text\");\n          e.canvas && e.canvas.appendChild(a);\n          var s = new S(a, e);\n          return s.attrs = {\n            x: r,\n            y: i,\n            \"text-anchor\": \"middle\",\n            text: n,\n            \"font-family\": t._availableAttrs[\"font-family\"],\n            \"font-size\": t._availableAttrs[\"font-size\"],\n            stroke: \"none\",\n            fill: \"#000\"\n          }, s.type = \"text\", k(s, s.attrs), s;\n        }, t._engine.setSize = function (t, e) {\n          return this.width = t || this.width, this.height = e || this.height, this.canvas.setAttribute(\"width\", this.width), this.canvas.setAttribute(\"height\", this.height), this._viewBox && this.setViewBox.apply(this, this._viewBox), this;\n        }, t._engine.create = function () {\n          var e = t._getContainer.apply(0, arguments),\n              r = e && e.container;\n\n          if (!r) throw new Error(\"SVG container not found.\");\n          var i,\n              n = e.x,\n              a = e.y,\n              s = e.width,\n              o = e.height,\n              l = x(\"svg\"),\n              h = \"overflow:hidden;\";\n          return n = n || 0, a = a || 0, x(l, {\n            height: o = o || 342,\n            version: 1.1,\n            width: s = s || 512,\n            xmlns: \"http://www.w3.org/2000/svg\",\n            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n          }), 1 == r ? (l.style.cssText = h + \"position:absolute;left:\" + n + \"px;top:\" + a + \"px\", t._g.doc.body.appendChild(l), i = 1) : (l.style.cssText = h + \"position:relative\", r.firstChild ? r.insertBefore(l, r.firstChild) : r.appendChild(l)), (r = new t._Paper()).width = s, r.height = o, r.canvas = l, r.clear(), r._left = r._top = 0, i && (r.renderfix = function () {}), r.renderfix(), r;\n        }, t._engine.setViewBox = function (t, e, r, i, n) {\n          u(\"raphael.setViewBox\", this, this._viewBox, [t, e, r, i, n]);\n          var a,\n              o,\n              l = this.getSize(),\n              h = s(r / l.width, i / l.height),\n              c = this.top,\n              p = n ? \"xMidYMid meet\" : \"xMinYMin\";\n\n          for (null == t ? (this._vbSize && (h = 1), delete this._vbSize, a = \"0 0 \" + this.width + f + this.height) : (this._vbSize = h, a = t + f + e + f + r + f + i), x(this.canvas, {\n            viewBox: a,\n            preserveAspectRatio: p\n          }); h && c;) {\n            o = \"stroke-width\" in c.attrs ? c.attrs[\"stroke-width\"] : 1, c.attr({\n              \"stroke-width\": o\n            }), c._.dirty = 1, c._.dirtyT = 1, c = c.prev;\n          }\n\n          return this._viewBox = [t, e, r, i, !!n], this;\n        }, t.prototype.renderfix = function () {\n          var t,\n              e = this.canvas,\n              r = e.style;\n\n          try {\n            t = e.getScreenCTM() || e.createSVGMatrix();\n          } catch (r) {\n            t = e.createSVGMatrix();\n          }\n\n          var i = -t.e % 1,\n              n = -t.f % 1;\n          (i || n) && (i && (this._left = (this._left + i) % 1, r.left = this._left + \"px\"), n && (this._top = (this._top + n) % 1, r.top = this._top + \"px\"));\n        }, t.prototype.clear = function () {\n          t.eve(\"raphael.clear\", this);\n\n          for (var e = this.canvas; e.firstChild;) {\n            e.removeChild(e.firstChild);\n          }\n\n          this.bottom = this.top = null, (this.desc = x(\"desc\")).appendChild(t._g.doc.createTextNode(\"Created with Raphaël \" + t.version)), e.appendChild(this.desc), e.appendChild(this.defs = x(\"defs\"));\n        }, t.prototype.remove = function () {\n          for (var e in u(\"raphael.remove\", this), this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas), this) {\n            this[e] = \"function\" == typeof this[e] ? t._removedFactory(e) : null;\n          }\n        };\n        var A = t.st;\n\n        for (var M in T) {\n          T[e](M) && !A[e](M) && (A[M] = function (t) {\n            return function () {\n              var e = arguments;\n              return this.forEach(function (r) {\n                r[t].apply(r, e);\n              });\n            };\n          }(M));\n        }\n      }\n    }.apply(e, i)) || (t.exports = n);\n  }, function (t, e, r) {\n    var i, n;\n    i = [r(0)], void 0 === (n = function (t) {\n      if (!t || t.vml) {\n        var e = \"hasOwnProperty\",\n            r = String,\n            i = parseFloat,\n            n = Math,\n            a = n.round,\n            s = n.max,\n            o = n.min,\n            l = n.abs,\n            h = /[, ]+/,\n            u = t.eve,\n            c = \" \",\n            f = \"\",\n            p = {\n          M: \"m\",\n          L: \"l\",\n          C: \"c\",\n          Z: \"x\",\n          m: \"t\",\n          l: \"r\",\n          c: \"v\",\n          z: \"x\"\n        },\n            d = /([clmz]),?([^clmz]*)/gi,\n            g = / progid:\\S+Blur\\([^\\)]+\\)/g,\n            x = /-?[^,\\s-]+/g,\n            v = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n            y = 21600,\n            m = {\n          path: 1,\n          rect: 1,\n          image: 1\n        },\n            b = {\n          circle: 1,\n          ellipse: 1\n        },\n            _ = function _(e, r, i) {\n          var n = t.matrix();\n          return n.rotate(-e, .5, .5), {\n            dx: n.x(r, i),\n            dy: n.y(r, i)\n          };\n        },\n            w = function w(t, e, r, i, n, a) {\n          var s = t._,\n              o = t.matrix,\n              h = s.fillpos,\n              u = t.node,\n              f = u.style,\n              p = 1,\n              d = \"\",\n              g = y / e,\n              x = y / r;\n\n          if (f.visibility = \"hidden\", e && r) {\n            if (u.coordsize = l(g) + c + l(x), f.rotation = a * (e * r < 0 ? -1 : 1), a) {\n              var v = _(a, i, n);\n\n              i = v.dx, n = v.dy;\n            }\n\n            if (e < 0 && (d += \"x\"), r < 0 && (d += \" y\") && (p = -1), f.flip = d, u.coordorigin = i * -g + c + n * -x, h || s.fillsize) {\n              var m = u.getElementsByTagName(\"fill\");\n              m = m && m[0], u.removeChild(m), h && (v = _(a, o.x(h[0], h[1]), o.y(h[0], h[1])), m.position = v.dx * p + c + v.dy * p), s.fillsize && (m.size = s.fillsize[0] * l(e) + c + s.fillsize[1] * l(r)), u.appendChild(m);\n            }\n\n            f.visibility = \"visible\";\n          }\n        };\n\n        t.toString = function () {\n          return \"Your browser doesn’t support SVG. Falling down to VML.\\nYou are running Raphaël \" + this.version;\n        };\n\n        var k,\n            B = function B(t, e, i) {\n          for (var n = r(e).toLowerCase().split(\"-\"), a = i ? \"end\" : \"start\", s = n.length, o = \"classic\", l = \"medium\", h = \"medium\"; s--;) {\n            switch (n[s]) {\n              case \"block\":\n              case \"classic\":\n              case \"oval\":\n              case \"diamond\":\n              case \"open\":\n              case \"none\":\n                o = n[s];\n                break;\n\n              case \"wide\":\n              case \"narrow\":\n                h = n[s];\n                break;\n\n              case \"long\":\n              case \"short\":\n                l = n[s];\n            }\n          }\n\n          var u = t.node.getElementsByTagName(\"stroke\")[0];\n          u[a + \"arrow\"] = o, u[a + \"arrowlength\"] = l, u[a + \"arrowwidth\"] = h;\n        },\n            C = function C(n, l) {\n          n.attrs = n.attrs || {};\n\n          var u = n.node,\n              g = n.attrs,\n              v = u.style,\n              _ = m[n.type] && (l.x != g.x || l.y != g.y || l.width != g.width || l.height != g.height || l.cx != g.cx || l.cy != g.cy || l.rx != g.rx || l.ry != g.ry || l.r != g.r),\n              C = b[n.type] && (g.cx != l.cx || g.cy != l.cy || g.r != l.r || g.rx != l.rx || g.ry != l.ry),\n              T = n;\n\n          for (var A in l) {\n            l[e](A) && (g[A] = l[A]);\n          }\n\n          if (_ && (g.path = t._getPath[n.type](n), n._.dirty = 1), l.href && (u.href = l.href), l.title && (u.title = l.title), l.target && (u.target = l.target), l.cursor && (v.cursor = l.cursor), \"blur\" in l && n.blur(l.blur), (l.path && \"path\" == n.type || _) && (u.path = function (e) {\n            var i = /[ahqstv]/gi,\n                n = t._pathToAbsolute;\n\n            if (r(e).match(i) && (n = t._path2curve), i = /[clmz]/g, n == t._pathToAbsolute && !r(e).match(i)) {\n              var s = r(e).replace(d, function (t, e, r) {\n                var i = [],\n                    n = \"m\" == e.toLowerCase(),\n                    s = p[e];\n                return r.replace(x, function (t) {\n                  n && 2 == i.length && (s += i + p[\"m\" == e ? \"l\" : \"L\"], i = []), i.push(a(t * y));\n                }), s + i;\n              });\n              return s;\n            }\n\n            var o,\n                l,\n                h = n(e);\n            s = [];\n\n            for (var u = 0, g = h.length; u < g; u++) {\n              o = h[u], \"z\" == (l = h[u][0].toLowerCase()) && (l = \"x\");\n\n              for (var v = 1, m = o.length; v < m; v++) {\n                l += a(o[v] * y) + (v != m - 1 ? \",\" : f);\n              }\n\n              s.push(l);\n            }\n\n            return s.join(c);\n          }(~r(g.path).toLowerCase().indexOf(\"r\") ? t._pathToAbsolute(g.path) : g.path), n._.dirty = 1, \"image\" == n.type && (n._.fillpos = [g.x, g.y], n._.fillsize = [g.width, g.height], w(n, 1, 1, 0, 0, 0))), \"transform\" in l && n.transform(l.transform), C) {\n            var M = +g.cx,\n                E = +g.cy,\n                N = +g.rx || +g.r || 0,\n                L = +g.ry || +g.r || 0;\n            u.path = t.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", a((M - N) * y), a((E - L) * y), a((M + N) * y), a((E + L) * y), a(M * y)), n._.dirty = 1;\n          }\n\n          if (\"clip-rect\" in l) {\n            var P = r(l[\"clip-rect\"]).split(h);\n\n            if (4 == P.length) {\n              P[2] = +P[2] + +P[0], P[3] = +P[3] + +P[1];\n\n              var z = u.clipRect || t._g.doc.createElement(\"div\"),\n                  F = z.style;\n\n              F.clip = t.format(\"rect({1}px {2}px {3}px {0}px)\", P), u.clipRect || (F.position = \"absolute\", F.top = 0, F.left = 0, F.width = n.paper.width + \"px\", F.height = n.paper.height + \"px\", u.parentNode.insertBefore(z, u), z.appendChild(u), u.clipRect = z);\n            }\n\n            l[\"clip-rect\"] || u.clipRect && (u.clipRect.style.clip = \"auto\");\n          }\n\n          if (n.textpath) {\n            var R = n.textpath.style;\n            l.font && (R.font = l.font), l[\"font-family\"] && (R.fontFamily = '\"' + l[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, f) + '\"'), l[\"font-size\"] && (R.fontSize = l[\"font-size\"]), l[\"font-weight\"] && (R.fontWeight = l[\"font-weight\"]), l[\"font-style\"] && (R.fontStyle = l[\"font-style\"]);\n          }\n\n          if (\"arrow-start\" in l && B(T, l[\"arrow-start\"]), \"arrow-end\" in l && B(T, l[\"arrow-end\"], 1), null != l.opacity || null != l.fill || null != l.src || null != l.stroke || null != l[\"stroke-width\"] || null != l[\"stroke-opacity\"] || null != l[\"fill-opacity\"] || null != l[\"stroke-dasharray\"] || null != l[\"stroke-miterlimit\"] || null != l[\"stroke-linejoin\"] || null != l[\"stroke-linecap\"]) {\n            var j = u.getElementsByTagName(\"fill\");\n\n            if (!(j = j && j[0]) && (j = k(\"fill\")), \"image\" == n.type && l.src && (j.src = l.src), l.fill && (j.on = !0), null != j.on && \"none\" != l.fill && null !== l.fill || (j.on = !1), j.on && l.fill) {\n              var I = r(l.fill).match(t._ISURL);\n\n              if (I) {\n                j.parentNode == u && u.removeChild(j), j.rotate = !0, j.src = I[1], j.type = \"tile\";\n                var D = n.getBBox(1);\n                j.position = D.x + c + D.y, n._.fillpos = [D.x, D.y], t._preload(I[1], function () {\n                  n._.fillsize = [this.offsetWidth, this.offsetHeight];\n                });\n              } else j.color = t.getRGB(l.fill).hex, j.src = f, j.type = \"solid\", t.getRGB(l.fill).error && (T.type in {\n                circle: 1,\n                ellipse: 1\n              } || \"r\" != r(l.fill).charAt()) && S(T, l.fill, j) && (g.fill = \"none\", g.gradient = l.fill, j.rotate = !1);\n            }\n\n            if (\"fill-opacity\" in l || \"opacity\" in l) {\n              var q = ((+g[\"fill-opacity\"] + 1 || 2) - 1) * ((+g.opacity + 1 || 2) - 1) * ((+t.getRGB(l.fill).o + 1 || 2) - 1);\n              q = o(s(q, 0), 1), j.opacity = q, j.src && (j.color = \"none\");\n            }\n\n            u.appendChild(j);\n            var O = u.getElementsByTagName(\"stroke\") && u.getElementsByTagName(\"stroke\")[0],\n                V = !1;\n            !O && (V = O = k(\"stroke\")), (l.stroke && \"none\" != l.stroke || l[\"stroke-width\"] || null != l[\"stroke-opacity\"] || l[\"stroke-dasharray\"] || l[\"stroke-miterlimit\"] || l[\"stroke-linejoin\"] || l[\"stroke-linecap\"]) && (O.on = !0), (\"none\" == l.stroke || null === l.stroke || null == O.on || 0 == l.stroke || 0 == l[\"stroke-width\"]) && (O.on = !1);\n            var W = t.getRGB(l.stroke);\n            O.on && l.stroke && (O.color = W.hex), q = ((+g[\"stroke-opacity\"] + 1 || 2) - 1) * ((+g.opacity + 1 || 2) - 1) * ((+W.o + 1 || 2) - 1);\n            var Y = .75 * (i(l[\"stroke-width\"]) || 1);\n\n            if (q = o(s(q, 0), 1), null == l[\"stroke-width\"] && (Y = g[\"stroke-width\"]), l[\"stroke-width\"] && (O.weight = Y), Y && Y < 1 && (q *= Y) && (O.weight = 1), O.opacity = q, l[\"stroke-linejoin\"] && (O.joinstyle = l[\"stroke-linejoin\"] || \"miter\"), O.miterlimit = l[\"stroke-miterlimit\"] || 8, l[\"stroke-linecap\"] && (O.endcap = \"butt\" == l[\"stroke-linecap\"] ? \"flat\" : \"square\" == l[\"stroke-linecap\"] ? \"square\" : \"round\"), \"stroke-dasharray\" in l) {\n              var G = {\n                \"-\": \"shortdash\",\n                \".\": \"shortdot\",\n                \"-.\": \"shortdashdot\",\n                \"-..\": \"shortdashdotdot\",\n                \". \": \"dot\",\n                \"- \": \"dash\",\n                \"--\": \"longdash\",\n                \"- .\": \"dashdot\",\n                \"--.\": \"longdashdot\",\n                \"--..\": \"longdashdotdot\"\n              };\n              O.dashstyle = G[e](l[\"stroke-dasharray\"]) ? G[l[\"stroke-dasharray\"]] : f;\n            }\n\n            V && u.appendChild(O);\n          }\n\n          if (\"text\" == T.type) {\n            T.paper.canvas.style.display = f;\n            var H = T.paper.span,\n                X = g.font && g.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n            v = H.style, g.font && (v.font = g.font), g[\"font-family\"] && (v.fontFamily = g[\"font-family\"]), g[\"font-weight\"] && (v.fontWeight = g[\"font-weight\"]), g[\"font-style\"] && (v.fontStyle = g[\"font-style\"]), X = i(g[\"font-size\"] || X && X[0]) || 10, v.fontSize = 100 * X + \"px\", T.textpath.string && (H.innerHTML = r(T.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n            var U = H.getBoundingClientRect();\n            T.W = g.w = (U.right - U.left) / 100, T.H = g.h = (U.bottom - U.top) / 100, T.X = g.x, T.Y = g.y + T.H / 2, (\"x\" in l || \"y\" in l) && (T.path.v = t.format(\"m{0},{1}l{2},{1}\", a(g.x * y), a(g.y * y), a(g.x * y) + 1));\n\n            for (var $ = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"], Z = 0, Q = $.length; Z < Q; Z++) {\n              if ($[Z] in l) {\n                T._.dirty = 1;\n                break;\n              }\n            }\n\n            switch (g[\"text-anchor\"]) {\n              case \"start\":\n                T.textpath.style[\"v-text-align\"] = \"left\", T.bbx = T.W / 2;\n                break;\n\n              case \"end\":\n                T.textpath.style[\"v-text-align\"] = \"right\", T.bbx = -T.W / 2;\n                break;\n\n              default:\n                T.textpath.style[\"v-text-align\"] = \"center\", T.bbx = 0;\n            }\n\n            T.textpath.style[\"v-text-kern\"] = !0;\n          }\n        },\n            S = function S(e, a, s) {\n          e.attrs = e.attrs || {};\n          e.attrs;\n          var o = Math.pow,\n              l = \"linear\",\n              h = \".5 .5\";\n\n          if (e.attrs.gradient = a, a = (a = r(a).replace(t._radial_gradient, function (t, e, r) {\n            return l = \"radial\", e && r && (e = i(e), r = i(r), o(e - .5, 2) + o(r - .5, 2) > .25 && (r = n.sqrt(.25 - o(e - .5, 2)) * (2 * (r > .5) - 1) + .5), h = e + c + r), f;\n          })).split(/\\s*\\-\\s*/), \"linear\" == l) {\n            var u = a.shift();\n            if (u = -i(u), isNaN(u)) return null;\n          }\n\n          var p = t._parseDots(a);\n\n          if (!p) return null;\n\n          if (e = e.shape || e.node, p.length) {\n            e.removeChild(s), s.on = !0, s.method = \"none\", s.color = p[0].color, s.color2 = p[p.length - 1].color;\n\n            for (var d = [], g = 0, x = p.length; g < x; g++) {\n              p[g].offset && d.push(p[g].offset + c + p[g].color);\n            }\n\n            s.colors = d.length ? d.join() : \"0% \" + s.color, \"radial\" == l ? (s.type = \"gradientTitle\", s.focus = \"100%\", s.focussize = \"0 0\", s.focusposition = h, s.angle = 0) : (s.type = \"gradient\", s.angle = (270 - u) % 360), e.appendChild(s);\n          }\n\n          return 1;\n        },\n            T = function T(e, r) {\n          this[0] = this.node = e, e.raphael = !0, this.id = t._oid++, e.raphaelid = this.id, this.X = 0, this.Y = 0, this.attrs = {}, this.paper = r, this.matrix = t.matrix(), this._ = {\n            transform: [],\n            sx: 1,\n            sy: 1,\n            dx: 0,\n            dy: 0,\n            deg: 0,\n            dirty: 1,\n            dirtyT: 1\n          }, !r.bottom && (r.bottom = this), this.prev = r.top, r.top && (r.top.next = this), r.top = this, this.next = null;\n        },\n            A = t.el;\n\n        T.prototype = A, A.constructor = T, A.transform = function (e) {\n          if (null == e) return this._.transform;\n          var i,\n              n = this.paper._viewBoxShift,\n              a = n ? \"s\" + [n.scale, n.scale] + \"-1-1t\" + [n.dx, n.dy] : f;\n          n && (i = e = r(e).replace(/\\.{3}|\\u2026/g, this._.transform || f)), t._extractTransform(this, a + e);\n          var s,\n              o = this.matrix.clone(),\n              l = this.skew,\n              h = this.node,\n              u = ~r(this.attrs.fill).indexOf(\"-\"),\n              p = !r(this.attrs.fill).indexOf(\"url(\");\n          if (o.translate(1, 1), p || u || \"image\" == this.type) {\n            if (l.matrix = \"1 0 0 1\", l.offset = \"0 0\", s = o.split(), u && s.noRotation || !s.isSimple) {\n              h.style.filter = o.toFilter();\n              var d = this.getBBox(),\n                  g = this.getBBox(1),\n                  x = d.x - g.x,\n                  v = d.y - g.y;\n              h.coordorigin = x * -y + c + v * -y, w(this, 1, 1, x, v, 0);\n            } else h.style.filter = f, w(this, s.scalex, s.scaley, s.dx, s.dy, s.rotate);\n          } else h.style.filter = f, l.matrix = r(o), l.offset = o.offset();\n          return null !== i && (this._.transform = i, t._extractTransform(this, i)), this;\n        }, A.rotate = function (t, e, n) {\n          if (this.removed) return this;\n\n          if (null != t) {\n            if ((t = r(t).split(h)).length - 1 && (e = i(t[1]), n = i(t[2])), t = i(t[0]), null == n && (e = n), null == e || null == n) {\n              var a = this.getBBox(1);\n              e = a.x + a.width / 2, n = a.y + a.height / 2;\n            }\n\n            return this._.dirtyT = 1, this.transform(this._.transform.concat([[\"r\", t, e, n]])), this;\n          }\n        }, A.translate = function (t, e) {\n          return this.removed ? this : ((t = r(t).split(h)).length - 1 && (e = i(t[1])), t = i(t[0]) || 0, e = +e || 0, this._.bbox && (this._.bbox.x += t, this._.bbox.y += e), this.transform(this._.transform.concat([[\"t\", t, e]])), this);\n        }, A.scale = function (t, e, n, a) {\n          if (this.removed) return this;\n          if ((t = r(t).split(h)).length - 1 && (e = i(t[1]), n = i(t[2]), a = i(t[3]), isNaN(n) && (n = null), isNaN(a) && (a = null)), t = i(t[0]), null == e && (e = t), null == a && (n = a), null == n || null == a) var s = this.getBBox(1);\n          return n = null == n ? s.x + s.width / 2 : n, a = null == a ? s.y + s.height / 2 : a, this.transform(this._.transform.concat([[\"s\", t, e, n, a]])), this._.dirtyT = 1, this;\n        }, A.hide = function () {\n          return !this.removed && (this.node.style.display = \"none\"), this;\n        }, A.show = function () {\n          return !this.removed && (this.node.style.display = f), this;\n        }, A.auxGetBBox = t.el.getBBox, A.getBBox = function () {\n          var t = this.auxGetBBox();\n\n          if (this.paper && this.paper._viewBoxShift) {\n            var e = {},\n                r = 1 / this.paper._viewBoxShift.scale;\n            return e.x = t.x - this.paper._viewBoxShift.dx, e.x *= r, e.y = t.y - this.paper._viewBoxShift.dy, e.y *= r, e.width = t.width * r, e.height = t.height * r, e.x2 = e.x + e.width, e.y2 = e.y + e.height, e;\n          }\n\n          return t;\n        }, A._getBBox = function () {\n          return this.removed ? {} : {\n            x: this.X + (this.bbx || 0) - this.W / 2,\n            y: this.Y - this.H,\n            width: this.W,\n            height: this.H\n          };\n        }, A.remove = function () {\n          if (!this.removed && this.node.parentNode) {\n            for (var e in this.paper.__set__ && this.paper.__set__.exclude(this), t.eve.unbind(\"raphael.*.*.\" + this.id), t._tear(this, this.paper), this.node.parentNode.removeChild(this.node), this.shape && this.shape.parentNode.removeChild(this.shape), this) {\n              this[e] = \"function\" == typeof this[e] ? t._removedFactory(e) : null;\n            }\n\n            this.removed = !0;\n          }\n        }, A.attr = function (r, i) {\n          if (this.removed) return this;\n\n          if (null == r) {\n            var n = {};\n\n            for (var a in this.attrs) {\n              this.attrs[e](a) && (n[a] = this.attrs[a]);\n            }\n\n            return n.gradient && \"none\" == n.fill && (n.fill = n.gradient) && delete n.gradient, n.transform = this._.transform, n;\n          }\n\n          if (null == i && t.is(r, \"string\")) {\n            if (\"fill\" == r && \"none\" == this.attrs.fill && this.attrs.gradient) return this.attrs.gradient;\n\n            for (var s = r.split(h), o = {}, l = 0, c = s.length; l < c; l++) {\n              (r = s[l]) in this.attrs ? o[r] = this.attrs[r] : t.is(this.paper.customAttributes[r], \"function\") ? o[r] = this.paper.customAttributes[r].def : o[r] = t._availableAttrs[r];\n            }\n\n            return c - 1 ? o : o[s[0]];\n          }\n\n          if (this.attrs && null == i && t.is(r, \"array\")) {\n            for (o = {}, l = 0, c = r.length; l < c; l++) {\n              o[r[l]] = this.attr(r[l]);\n            }\n\n            return o;\n          }\n\n          var f;\n\n          for (var p in null != i && ((f = {})[r] = i), null == i && t.is(r, \"object\") && (f = r), f) {\n            u(\"raphael.attr.\" + p + \".\" + this.id, this, f[p]);\n          }\n\n          if (f) {\n            for (p in this.paper.customAttributes) {\n              if (this.paper.customAttributes[e](p) && f[e](p) && t.is(this.paper.customAttributes[p], \"function\")) {\n                var d = this.paper.customAttributes[p].apply(this, [].concat(f[p]));\n\n                for (var g in this.attrs[p] = f[p], d) {\n                  d[e](g) && (f[g] = d[g]);\n                }\n              }\n            }\n\n            f.text && \"text\" == this.type && (this.textpath.string = f.text), C(this, f);\n          }\n\n          return this;\n        }, A.toFront = function () {\n          return !this.removed && this.node.parentNode.appendChild(this.node), this.paper && this.paper.top != this && t._tofront(this, this.paper), this;\n        }, A.toBack = function () {\n          return this.removed ? this : (this.node.parentNode.firstChild != this.node && (this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild), t._toback(this, this.paper)), this);\n        }, A.insertAfter = function (e) {\n          return this.removed ? this : (e.constructor == t.st.constructor && (e = e[e.length - 1]), e.node.nextSibling ? e.node.parentNode.insertBefore(this.node, e.node.nextSibling) : e.node.parentNode.appendChild(this.node), t._insertafter(this, e, this.paper), this);\n        }, A.insertBefore = function (e) {\n          return this.removed ? this : (e.constructor == t.st.constructor && (e = e[0]), e.node.parentNode.insertBefore(this.node, e.node), t._insertbefore(this, e, this.paper), this);\n        }, A.blur = function (e) {\n          var r = this.node.runtimeStyle,\n              i = r.filter;\n          return i = i.replace(g, f), 0 != +e ? (this.attrs.blur = e, r.filter = i + c + \" progid:DXImageTransform.Microsoft.Blur(pixelradius=\" + (+e || 1.5) + \")\", r.margin = t.format(\"-{0}px 0 0 -{0}px\", a(+e || 1.5))) : (r.filter = i, r.margin = 0, delete this.attrs.blur), this;\n        }, t._engine.path = function (t, e) {\n          var r = k(\"shape\");\n          r.style.cssText = v, r.coordsize = y + c + y, r.coordorigin = e.coordorigin;\n          var i = new T(r, e),\n              n = {\n            fill: \"none\",\n            stroke: \"#000\"\n          };\n          t && (n.path = t), i.type = \"path\", i.path = [], i.Path = f, C(i, n), e.canvas && e.canvas.appendChild(r);\n          var a = k(\"skew\");\n          return a.on = !0, r.appendChild(a), i.skew = a, i.transform(f), i;\n        }, t._engine.rect = function (e, r, i, n, a, s) {\n          var o = t._rectPath(r, i, n, a, s),\n              l = e.path(o),\n              h = l.attrs;\n\n          return l.X = h.x = r, l.Y = h.y = i, l.W = h.width = n, l.H = h.height = a, h.r = s, h.path = o, l.type = \"rect\", l;\n        }, t._engine.ellipse = function (t, e, r, i, n) {\n          var a = t.path();\n          a.attrs;\n          return a.X = e - i, a.Y = r - n, a.W = 2 * i, a.H = 2 * n, a.type = \"ellipse\", C(a, {\n            cx: e,\n            cy: r,\n            rx: i,\n            ry: n\n          }), a;\n        }, t._engine.circle = function (t, e, r, i) {\n          var n = t.path();\n          n.attrs;\n          return n.X = e - i, n.Y = r - i, n.W = n.H = 2 * i, n.type = \"circle\", C(n, {\n            cx: e,\n            cy: r,\n            r: i\n          }), n;\n        }, t._engine.image = function (e, r, i, n, a, s) {\n          var o = t._rectPath(i, n, a, s),\n              l = e.path(o).attr({\n            stroke: \"none\"\n          }),\n              h = l.attrs,\n              u = l.node,\n              c = u.getElementsByTagName(\"fill\")[0];\n\n          return h.src = r, l.X = h.x = i, l.Y = h.y = n, l.W = h.width = a, l.H = h.height = s, h.path = o, l.type = \"image\", c.parentNode == u && u.removeChild(c), c.rotate = !0, c.src = r, c.type = \"tile\", l._.fillpos = [i, n], l._.fillsize = [a, s], u.appendChild(c), w(l, 1, 1, 0, 0, 0), l;\n        }, t._engine.text = function (e, i, n, s) {\n          var o = k(\"shape\"),\n              l = k(\"path\"),\n              h = k(\"textpath\");\n          i = i || 0, n = n || 0, s = s || \"\", l.v = t.format(\"m{0},{1}l{2},{1}\", a(i * y), a(n * y), a(i * y) + 1), l.textpathok = !0, h.string = r(s), h.on = !0, o.style.cssText = v, o.coordsize = y + c + y, o.coordorigin = \"0 0\";\n          var u = new T(o, e),\n              p = {\n            fill: \"#000\",\n            stroke: \"none\",\n            font: t._availableAttrs.font,\n            text: s\n          };\n          u.shape = o, u.path = l, u.textpath = h, u.type = \"text\", u.attrs.text = r(s), u.attrs.x = i, u.attrs.y = n, u.attrs.w = 1, u.attrs.h = 1, C(u, p), o.appendChild(h), o.appendChild(l), e.canvas.appendChild(o);\n          var d = k(\"skew\");\n          return d.on = !0, o.appendChild(d), u.skew = d, u.transform(f), u;\n        }, t._engine.setSize = function (e, r) {\n          var i = this.canvas.style;\n          return this.width = e, this.height = r, e == +e && (e += \"px\"), r == +r && (r += \"px\"), i.width = e, i.height = r, i.clip = \"rect(0 \" + e + \" \" + r + \" 0)\", this._viewBox && t._engine.setViewBox.apply(this, this._viewBox), this;\n        }, t._engine.setViewBox = function (e, r, i, n, a) {\n          t.eve(\"raphael.setViewBox\", this, this._viewBox, [e, r, i, n, a]);\n          var s,\n              o,\n              l = this.getSize(),\n              h = l.width,\n              u = l.height;\n          return a && (i * (s = u / n) < h && (e -= (h - i * s) / 2 / s), n * (o = h / i) < u && (r -= (u - n * o) / 2 / o)), this._viewBox = [e, r, i, n, !!a], this._viewBoxShift = {\n            dx: -e,\n            dy: -r,\n            scale: l\n          }, this.forEach(function (t) {\n            t.transform(\"...\");\n          }), this;\n        }, t._engine.initWin = function (t) {\n          var e = t.document;\n          e.styleSheets.length < 31 ? e.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\") : e.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\n          try {\n            !e.namespaces.rvml && e.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\"), k = function k(t) {\n              return e.createElement(\"<rvml:\" + t + ' class=\"rvml\">');\n            };\n          } catch (t) {\n            k = function k(t) {\n              return e.createElement(\"<\" + t + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n            };\n          }\n        }, t._engine.initWin(t._g.win), t._engine.create = function () {\n          var e = t._getContainer.apply(0, arguments),\n              r = e.container,\n              i = e.height,\n              n = e.width,\n              a = e.x,\n              s = e.y;\n\n          if (!r) throw new Error(\"VML container not found.\");\n\n          var o = new t._Paper(),\n              l = o.canvas = t._g.doc.createElement(\"div\"),\n              h = l.style;\n\n          return a = a || 0, s = s || 0, n = n || 512, i = i || 342, o.width = n, o.height = i, n == +n && (n += \"px\"), i == +i && (i += \"px\"), o.coordsize = 216e5 + c + 216e5, o.coordorigin = \"0 0\", o.span = t._g.doc.createElement(\"span\"), o.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\", l.appendChild(o.span), h.cssText = t.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", n, i), 1 == r ? (t._g.doc.body.appendChild(l), h.left = a + \"px\", h.top = s + \"px\", h.position = \"absolute\") : r.firstChild ? r.insertBefore(l, r.firstChild) : r.appendChild(l), o.renderfix = function () {}, o;\n        }, t.prototype.clear = function () {\n          t.eve(\"raphael.clear\", this), this.canvas.innerHTML = f, this.span = t._g.doc.createElement(\"span\"), this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\", this.canvas.appendChild(this.span), this.bottom = this.top = null;\n        }, t.prototype.remove = function () {\n          for (var e in t.eve(\"raphael.remove\", this), this.canvas.parentNode.removeChild(this.canvas), this) {\n            this[e] = \"function\" == typeof this[e] ? t._removedFactory(e) : null;\n          }\n\n          return !0;\n        };\n        var M = t.st;\n\n        for (var E in A) {\n          A[e](E) && !M[e](E) && (M[E] = function (t) {\n            return function () {\n              var e = arguments;\n              return this.forEach(function (r) {\n                r[t].apply(r, e);\n              });\n            };\n          }(E));\n        }\n      }\n    }.apply(e, i)) || (t.exports = n);\n  }]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/raphael/raphael.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/raphael/raphael.min.js");
/******/ 	
/******/ })()
;