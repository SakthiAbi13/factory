/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/vendor/libs/raphael/raphael.js":
/*!*********************************************************!*\
  !*** ./resources/assets/vendor/libs/raphael/raphael.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.3.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? 0 : _typeof(exports)) === 'object' && ( false ? 0 : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(window, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __nested_webpack_require_1989__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_1989__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __nested_webpack_require_1989__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __nested_webpack_require_1989__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __nested_webpack_require_1989__.d = function (exports, name, getter) {\n        /******/\n        if (!__nested_webpack_require_1989__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __nested_webpack_require_1989__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __nested_webpack_require_1989__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __nested_webpack_require_1989__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __nested_webpack_require_1989__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __nested_webpack_require_1989__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __nested_webpack_require_1989__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __nested_webpack_require_1989__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __nested_webpack_require_1989__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __nested_webpack_require_1989__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __nested_webpack_require_1989__(__nested_webpack_require_1989__.s = \"./dev/raphael.amd.js\");\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ({\n      /***/\n      \"./dev/raphael.amd.js\":\n      /*!****************************!*\\\n        !*** ./dev/raphael.amd.js ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function devRaphaelAmdJs(module, exports, __nested_webpack_require_6928__) {\n        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__nested_webpack_require_6928__(\n        /*! ./raphael.core */\n        \"./dev/raphael.core.js\"), __nested_webpack_require_6928__(\n        /*! ./raphael.svg */\n        \"./dev/raphael.svg.js\"), __nested_webpack_require_6928__(\n        /*! ./raphael.vml */\n        \"./dev/raphael.vml.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = function (R) {\n          return R;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        /***/\n      },\n\n      /***/\n      \"./dev/raphael.core.js\":\n      /*!*****************************!*\\\n        !*** ./dev/raphael.core.js ***!\n        \\*****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function devRaphaelCoreJs(module, exports, __nested_webpack_require_7829__) {\n        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__nested_webpack_require_7829__(\n        /*! eve */\n        \"./node_modules/eve-raphael/eve.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = function (eve) {\n          /*\\\n           * Raphael\n           [ method ]\n           **\n           * Creates a canvas object on which to draw.\n           * You must do this first, as all future calls to drawing methods\n           * from this instance will be bound to this canvas.\n           > Parameters\n           **\n           - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n           - width (number)\n           - height (number)\n           - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n           * or\n           - x (number)\n           - y (number)\n           - width (number)\n           - height (number)\n           - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n           * or\n           - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n           - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n           * or\n           - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n           = (object) @Paper\n           > Usage\n           | // Each of the following examples create a canvas\n           | // that is 320px wide by 200px high.\n           | // Canvas is created at the viewport’s 10,50 coordinate.\n           | var paper = Raphael(10, 50, 320, 200);\n           | // Canvas is created at the top left corner of the #notepad element\n           | // (or its top right corner in dir=\"rtl\" elements)\n           | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n           | // Same as above\n           | var paper = Raphael(\"notepad\", 320, 200);\n           | // Image dump\n           | var set = Raphael([\"notepad\", 320, 200, {\n           |     type: \"rect\",\n           |     x: 10,\n           |     y: 10,\n           |     width: 25,\n           |     height: 25,\n           |     stroke: \"#f00\"\n           | }, {\n           |     type: \"text\",\n           |     x: 30,\n           |     y: 40,\n           |     text: \"Dump\"\n           | }]);\n          \\*/\n          function R(first) {\n            if (R.is(first, \"function\")) {\n              return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n            } else if (R.is(first, array)) {\n              return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n            } else {\n              var args = Array.prototype.slice.call(arguments, 0);\n\n              if (R.is(args[args.length - 1], \"function\")) {\n                var f = args.pop();\n                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n                  f.call(R._engine.create[apply](R, args));\n                });\n              } else {\n                return R._engine.create[apply](R, arguments);\n              }\n            }\n          }\n\n          R.version = \"2.3.0\";\n          R.eve = eve;\n\n          var loaded,\n              separator = /[, ]+/,\n              elements = {\n            circle: 1,\n            rect: 1,\n            path: 1,\n            ellipse: 1,\n            text: 1,\n            image: 1\n          },\n              formatrg = /\\{(\\d+)\\}/g,\n              proto = \"prototype\",\n              has = \"hasOwnProperty\",\n              g = {\n            doc: document,\n            win: window\n          },\n              oldRaphael = {\n            was: Object.prototype[has].call(g.win, \"Raphael\"),\n            is: g.win.Raphael\n          },\n              Paper = function Paper() {\n            /*\\\n             * Paper.ca\n             [ property (object) ]\n             **\n             * Shortcut for @Paper.customAttributes\n            \\*/\n\n            /*\\\n             * Paper.customAttributes\n             [ property (object) ]\n             **\n             * If you have a set of attributes that you would like to represent\n             * as a function of some number you can do it easily with custom attributes:\n             > Usage\n             | paper.customAttributes.hue = function (num) {\n             |     num = num % 1;\n             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n             | };\n             | // Custom attribute “hue” will change fill\n             | // to be given hue with fixed saturation and brightness.\n             | // Now you can use it like this:\n             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n             | // or even like this:\n             | c.animate({hue: 1}, 1e3);\n             |\n             | // You could also create custom attribute\n             | // with multiple parameters:\n             | paper.customAttributes.hsb = function (h, s, b) {\n             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n             | };\n             | c.attr({hsb: \"0.5 .8 1\"});\n             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n            \\*/\n            this.ca = this.customAttributes = {};\n          },\n              paperproto,\n              appendChild = \"appendChild\",\n              apply = \"apply\",\n              concat = \"concat\",\n              //taken from Modernizr touch test: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/touchevents.js#L40\n          supportsTouch = 'ontouchstart' in window || window.TouchEvent || window.DocumentTouch && document instanceof DocumentTouch,\n              E = \"\",\n              S = \" \",\n              Str = String,\n              split = \"split\",\n              events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n              touchMap = {\n            mousedown: \"touchstart\",\n            mousemove: \"touchmove\",\n            mouseup: \"touchend\"\n          },\n              lowerCase = Str.prototype.toLowerCase,\n              math = Math,\n              mmax = math.max,\n              mmin = math.min,\n              abs = math.abs,\n              pow = math.pow,\n              PI = math.PI,\n              nu = \"number\",\n              string = \"string\",\n              array = \"array\",\n              toString = \"toString\",\n              fillString = \"fill\",\n              objectToString = Object.prototype.toString,\n              paper = {},\n              push = \"push\",\n              ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n              colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n              isnan = {\n            \"NaN\": 1,\n            \"Infinity\": 1,\n            \"-Infinity\": 1\n          },\n              bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n              round = math.round,\n              setAttribute = \"setAttribute\",\n              toFloat = parseFloat,\n              toInt = parseInt,\n              upperCase = Str.prototype.toUpperCase,\n              availableAttrs = R._availableAttrs = {\n            \"arrow-end\": \"none\",\n            \"arrow-start\": \"none\",\n            blur: 0,\n            \"clip-rect\": \"0 0 1e9 1e9\",\n            cursor: \"default\",\n            cx: 0,\n            cy: 0,\n            fill: \"#fff\",\n            \"fill-opacity\": 1,\n            font: '10px \"Arial\"',\n            \"font-family\": '\"Arial\"',\n            \"font-size\": \"10\",\n            \"font-style\": \"normal\",\n            \"font-weight\": 400,\n            gradient: 0,\n            height: 0,\n            href: \"http://raphaeljs.com/\",\n            \"letter-spacing\": 0,\n            opacity: 1,\n            path: \"M0,0\",\n            r: 0,\n            rx: 0,\n            ry: 0,\n            src: \"\",\n            stroke: \"#000\",\n            \"stroke-dasharray\": \"\",\n            \"stroke-linecap\": \"butt\",\n            \"stroke-linejoin\": \"butt\",\n            \"stroke-miterlimit\": 0,\n            \"stroke-opacity\": 1,\n            \"stroke-width\": 1,\n            target: \"_blank\",\n            \"text-anchor\": \"middle\",\n            title: \"Raphael\",\n            transform: \"\",\n            width: 0,\n            x: 0,\n            y: 0,\n            \"class\": \"\"\n          },\n              availableAnimAttrs = R._availableAnimAttrs = {\n            blur: nu,\n            \"clip-rect\": \"csv\",\n            cx: nu,\n            cy: nu,\n            fill: \"colour\",\n            \"fill-opacity\": nu,\n            \"font-size\": nu,\n            height: nu,\n            opacity: nu,\n            path: \"path\",\n            r: nu,\n            rx: nu,\n            ry: nu,\n            stroke: \"colour\",\n            \"stroke-opacity\": nu,\n            \"stroke-width\": nu,\n            transform: \"transform\",\n            width: nu,\n            x: nu,\n            y: nu\n          },\n              whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n              commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n              hsrg = {\n            hs: 1,\n            rg: 1\n          },\n              p2s = /,?([achlmqrstvxz]),?/gi,\n              pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n              tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n              pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n              radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n              eldata = {},\n              sortByKey = function sortByKey(a, b) {\n            return a.key - b.key;\n          },\n              sortByNumber = function sortByNumber(a, b) {\n            return toFloat(a) - toFloat(b);\n          },\n              fun = function fun() {},\n              pipe = function pipe(x) {\n            return x;\n          },\n              rectPath = R._rectPath = function (x, y, w, h, r) {\n            if (r) {\n              return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n            }\n\n            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n          },\n              ellipsePath = function ellipsePath(x, y, rx, ry) {\n            if (ry == null) {\n              ry = rx;\n            }\n\n            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n          },\n              getPath = R._getPath = {\n            path: function path(el) {\n              return el.attr(\"path\");\n            },\n            circle: function circle(el) {\n              var a = el.attrs;\n              return ellipsePath(a.cx, a.cy, a.r);\n            },\n            ellipse: function ellipse(el) {\n              var a = el.attrs;\n              return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n            },\n            rect: function rect(el) {\n              var a = el.attrs;\n              return rectPath(a.x, a.y, a.width, a.height, a.r);\n            },\n            image: function image(el) {\n              var a = el.attrs;\n              return rectPath(a.x, a.y, a.width, a.height);\n            },\n            text: function text(el) {\n              var bbox = el._getBBox();\n\n              return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n            },\n            set: function set(el) {\n              var bbox = el._getBBox();\n\n              return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n            }\n          },\n\n          /*\\\n           * Raphael.mapPath\n           [ method ]\n           **\n           * Transform the path string with given matrix.\n           > Parameters\n           - path (string) path string\n           - matrix (object) see @Matrix\n           = (string) transformed path string\n          \\*/\n          mapPath = R.mapPath = function (path, matrix) {\n            if (!matrix) {\n              return path;\n            }\n\n            var x, y, i, j, ii, jj, pathi;\n            path = path2curve(path);\n\n            for (i = 0, ii = path.length; i < ii; i++) {\n              pathi = path[i];\n\n              for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n              }\n            }\n\n            return path;\n          };\n\n          R._g = g;\n          /*\\\n           * Raphael.type\n           [ property (string) ]\n           **\n           * Can be “SVG”, “VML” or empty, depending on browser support.\n          \\*/\n\n          R.type = g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\";\n\n          if (R.type == \"VML\") {\n            var d = g.doc.createElement(\"div\"),\n                b;\n            d.innerHTML = '<v:shape adj=\"1\"/>';\n            b = d.firstChild;\n            b.style.behavior = \"url(#default#VML)\";\n\n            if (!(b && _typeof(b.adj) == \"object\")) {\n              return R.type = E;\n            }\n\n            d = null;\n          }\n          /*\\\n           * Raphael.svg\n           [ property (boolean) ]\n           **\n           * `true` if browser supports SVG.\n          \\*/\n\n          /*\\\n           * Raphael.vml\n           [ property (boolean) ]\n           **\n           * `true` if browser supports VML.\n          \\*/\n\n\n          R.svg = !(R.vml = R.type == \"VML\");\n          R._Paper = Paper;\n          /*\\\n           * Raphael.fn\n           [ property (object) ]\n           **\n           * You can add your own method to the canvas. For example if you want to draw a pie chart,\n           * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n           * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n           * Raphaël instance is created, otherwise it will take no effect. Please note that the\n           * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n           * ensure any namespacing ensures proper context.\n           > Usage\n           | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n           |     return this.path( ... );\n           | };\n           | // or create namespace\n           | Raphael.fn.mystuff = {\n           |     arrow: function () {…},\n           |     star: function () {…},\n           |     // etc…\n           | };\n           | var paper = Raphael(10, 10, 630, 480);\n           | // then use it\n           | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n           | paper.mystuff.arrow();\n           | paper.mystuff.star();\n          \\*/\n\n          R.fn = paperproto = Paper.prototype = R.prototype;\n          R._id = 0;\n          /*\\\n           * Raphael.is\n           [ method ]\n           **\n           * Handful of replacements for `typeof` operator.\n           > Parameters\n           - o (…) any object or primitive\n           - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n           = (boolean) is given value is of given type\n          \\*/\n\n          R.is = function (o, type) {\n            type = lowerCase.call(type);\n\n            if (type == \"finite\") {\n              return !isnan[has](+o);\n            }\n\n            if (type == \"array\") {\n              return o instanceof Array;\n            }\n\n            return type == \"null\" && o === null || type == _typeof(o) && o !== null || type == \"object\" && o === Object(o) || type == \"array\" && Array.isArray && Array.isArray(o) || objectToString.call(o).slice(8, -1).toLowerCase() == type;\n          };\n\n          function clone(obj) {\n            if (typeof obj == \"function\" || Object(obj) !== obj) {\n              return obj;\n            }\n\n            var res = new obj.constructor();\n\n            for (var key in obj) {\n              if (obj[has](key)) {\n                res[key] = clone(obj[key]);\n              }\n            }\n\n            return res;\n          }\n          /*\\\n           * Raphael.angle\n           [ method ]\n           **\n           * Returns angle between two or three points\n           > Parameters\n           - x1 (number) x coord of first point\n           - y1 (number) y coord of first point\n           - x2 (number) x coord of second point\n           - y2 (number) y coord of second point\n           - x3 (number) #optional x coord of third point\n           - y3 (number) #optional y coord of third point\n           = (number) angle in degrees.\n          \\*/\n\n\n          R.angle = function (x1, y1, x2, y2, x3, y3) {\n            if (x3 == null) {\n              var x = x1 - x2,\n                  y = y1 - y2;\n\n              if (!x && !y) {\n                return 0;\n              }\n\n              return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n            } else {\n              return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n            }\n          };\n          /*\\\n           * Raphael.rad\n           [ method ]\n           **\n           * Transform angle to radians\n           > Parameters\n           - deg (number) angle in degrees\n           = (number) angle in radians.\n          \\*/\n\n\n          R.rad = function (deg) {\n            return deg % 360 * PI / 180;\n          };\n          /*\\\n           * Raphael.deg\n           [ method ]\n           **\n           * Transform angle to degrees\n           > Parameters\n           - rad (number) angle in radians\n           = (number) angle in degrees.\n          \\*/\n\n\n          R.deg = function (rad) {\n            return Math.round(rad * 180 / PI % 360 * 1000) / 1000;\n          };\n          /*\\\n           * Raphael.snapTo\n           [ method ]\n           **\n           * Snaps given value to given grid.\n           > Parameters\n           - values (array|number) given array of values or step of the grid\n           - value (number) value to adjust\n           - tolerance (number) #optional tolerance for snapping. Default is `10`.\n           = (number) adjusted value.\n          \\*/\n\n\n          R.snapTo = function (values, value, tolerance) {\n            tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\n            if (R.is(values, array)) {\n              var i = values.length;\n\n              while (i--) {\n                if (abs(values[i] - value) <= tolerance) {\n                  return values[i];\n                }\n              }\n            } else {\n              values = +values;\n              var rem = value % values;\n\n              if (rem < tolerance) {\n                return value - rem;\n              }\n\n              if (rem > values - tolerance) {\n                return value - rem + values;\n              }\n            }\n\n            return value;\n          };\n          /*\\\n           * Raphael.createUUID\n           [ method ]\n           **\n           * Returns RFC4122, version 4 ID\n          \\*/\n\n\n          var createUUID = R.createUUID = function (uuidRegEx, uuidReplacer) {\n            return function () {\n              return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n            };\n          }(/[xy]/g, function (c) {\n            var r = math.random() * 16 | 0,\n                v = c == \"x\" ? r : r & 3 | 8;\n            return v.toString(16);\n          });\n          /*\\\n           * Raphael.setWindow\n           [ method ]\n           **\n           * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n           > Parameters\n           - newwin (window) new window object\n          \\*/\n\n\n          R.setWindow = function (newwin) {\n            eve(\"raphael.setWindow\", R, g.win, newwin);\n            g.win = newwin;\n            g.doc = g.win.document;\n\n            if (R._engine.initWin) {\n              R._engine.initWin(g.win);\n            }\n          };\n\n          var _toHex = function toHex(color) {\n            if (R.vml) {\n              // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n              var trim = /^\\s+|\\s+$/g;\n              var bod;\n\n              try {\n                var docum = new ActiveXObject(\"htmlfile\");\n                docum.write(\"<body>\");\n                docum.close();\n                bod = docum.body;\n              } catch (e) {\n                bod = createPopup().document.body;\n              }\n\n              var range = bod.createTextRange();\n              _toHex = cacher(function (color) {\n                try {\n                  bod.style.color = Str(color).replace(trim, E);\n                  var value = range.queryCommandValue(\"ForeColor\");\n                  value = (value & 255) << 16 | value & 65280 | (value & 16711680) >>> 16;\n                  return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n                } catch (e) {\n                  return \"none\";\n                }\n              });\n            } else {\n              var i = g.doc.createElement(\"i\");\n              i.title = \"Rapha\\xebl Colour Picker\";\n              i.style.display = \"none\";\n              g.doc.body.appendChild(i);\n              _toHex = cacher(function (color) {\n                i.style.color = color;\n                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n              });\n            }\n\n            return _toHex(color);\n          },\n              hsbtoString = function hsbtoString() {\n            return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n          },\n              hsltoString = function hsltoString() {\n            return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n          },\n              rgbtoString = function rgbtoString() {\n            return this.hex;\n          },\n              prepareRGB = function prepareRGB(r, g, b) {\n            if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n              b = r.b;\n              g = r.g;\n              r = r.r;\n            }\n\n            if (g == null && R.is(r, string)) {\n              var clr = R.getRGB(r);\n              r = clr.r;\n              g = clr.g;\n              b = clr.b;\n            }\n\n            if (r > 1 || g > 1 || b > 1) {\n              r /= 255;\n              g /= 255;\n              b /= 255;\n            }\n\n            return [r, g, b];\n          },\n              packageRGB = function packageRGB(r, g, b, o) {\n            r *= 255;\n            g *= 255;\n            b *= 255;\n            var rgb = {\n              r: r,\n              g: g,\n              b: b,\n              hex: R.rgb(r, g, b),\n              toString: rgbtoString\n            };\n            R.is(o, \"finite\") && (rgb.opacity = o);\n            return rgb;\n          };\n          /*\\\n           * Raphael.color\n           [ method ]\n           **\n           * Parses the color string and returns object with all values for the given color.\n           > Parameters\n           - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n           = (object) Combined RGB & HSB object in format:\n           o {\n           o     r (number) red,\n           o     g (number) green,\n           o     b (number) blue,\n           o     hex (string) color in HTML/CSS format: #••••••,\n           o     error (boolean) `true` if string can’t be parsed,\n           o     h (number) hue,\n           o     s (number) saturation,\n           o     v (number) value (brightness),\n           o     l (number) lightness\n           o }\n          \\*/\n\n\n          R.color = function (clr) {\n            var rgb;\n\n            if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n              rgb = R.hsb2rgb(clr);\n              clr.r = rgb.r;\n              clr.g = rgb.g;\n              clr.b = rgb.b;\n              clr.hex = rgb.hex;\n            } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n              rgb = R.hsl2rgb(clr);\n              clr.r = rgb.r;\n              clr.g = rgb.g;\n              clr.b = rgb.b;\n              clr.hex = rgb.hex;\n            } else {\n              if (R.is(clr, \"string\")) {\n                clr = R.getRGB(clr);\n              }\n\n              if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n                rgb = R.rgb2hsl(clr);\n                clr.h = rgb.h;\n                clr.s = rgb.s;\n                clr.l = rgb.l;\n                rgb = R.rgb2hsb(clr);\n                clr.v = rgb.b;\n              } else {\n                clr = {\n                  hex: \"none\"\n                };\n                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n              }\n            }\n\n            clr.toString = rgbtoString;\n            return clr;\n          };\n          /*\\\n           * Raphael.hsb2rgb\n           [ method ]\n           **\n           * Converts HSB values to RGB object.\n           > Parameters\n           - h (number) hue\n           - s (number) saturation\n           - v (number) value or brightness\n           = (object) RGB object in format:\n           o {\n           o     r (number) red,\n           o     g (number) green,\n           o     b (number) blue,\n           o     hex (string) color in HTML/CSS format: #••••••\n           o }\n          \\*/\n\n\n          R.hsb2rgb = function (h, s, v, o) {\n            if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n              v = h.b;\n              s = h.s;\n              o = h.o;\n              h = h.h;\n            }\n\n            h *= 360;\n            var R, G, B, X, C;\n            h = h % 360 / 60;\n            C = v * s;\n            X = C * (1 - abs(h % 2 - 1));\n            R = G = B = v - C;\n            h = ~~h;\n            R += [C, X, 0, 0, X, C][h];\n            G += [X, C, C, X, 0, 0][h];\n            B += [0, 0, X, C, C, X][h];\n            return packageRGB(R, G, B, o);\n          };\n          /*\\\n           * Raphael.hsl2rgb\n           [ method ]\n           **\n           * Converts HSL values to RGB object.\n           > Parameters\n           - h (number) hue\n           - s (number) saturation\n           - l (number) luminosity\n           = (object) RGB object in format:\n           o {\n           o     r (number) red,\n           o     g (number) green,\n           o     b (number) blue,\n           o     hex (string) color in HTML/CSS format: #••••••\n           o }\n          \\*/\n\n\n          R.hsl2rgb = function (h, s, l, o) {\n            if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n              l = h.l;\n              s = h.s;\n              h = h.h;\n            }\n\n            if (h > 1 || s > 1 || l > 1) {\n              h /= 360;\n              s /= 100;\n              l /= 100;\n            }\n\n            h *= 360;\n            var R, G, B, X, C;\n            h = h % 360 / 60;\n            C = 2 * s * (l < .5 ? l : 1 - l);\n            X = C * (1 - abs(h % 2 - 1));\n            R = G = B = l - C / 2;\n            h = ~~h;\n            R += [C, X, 0, 0, X, C][h];\n            G += [X, C, C, X, 0, 0][h];\n            B += [0, 0, X, C, C, X][h];\n            return packageRGB(R, G, B, o);\n          };\n          /*\\\n           * Raphael.rgb2hsb\n           [ method ]\n           **\n           * Converts RGB values to HSB object.\n           > Parameters\n           - r (number) red\n           - g (number) green\n           - b (number) blue\n           = (object) HSB object in format:\n           o {\n           o     h (number) hue\n           o     s (number) saturation\n           o     b (number) brightness\n           o }\n          \\*/\n\n\n          R.rgb2hsb = function (r, g, b) {\n            b = prepareRGB(r, g, b);\n            r = b[0];\n            g = b[1];\n            b = b[2];\n            var H, S, V, C;\n            V = mmax(r, g, b);\n            C = V - mmin(r, g, b);\n            H = C == 0 ? null : V == r ? (g - b) / C : V == g ? (b - r) / C + 2 : (r - g) / C + 4;\n            H = (H + 360) % 6 * 60 / 360;\n            S = C == 0 ? 0 : C / V;\n            return {\n              h: H,\n              s: S,\n              b: V,\n              toString: hsbtoString\n            };\n          };\n          /*\\\n           * Raphael.rgb2hsl\n           [ method ]\n           **\n           * Converts RGB values to HSL object.\n           > Parameters\n           - r (number) red\n           - g (number) green\n           - b (number) blue\n           = (object) HSL object in format:\n           o {\n           o     h (number) hue\n           o     s (number) saturation\n           o     l (number) luminosity\n           o }\n          \\*/\n\n\n          R.rgb2hsl = function (r, g, b) {\n            b = prepareRGB(r, g, b);\n            r = b[0];\n            g = b[1];\n            b = b[2];\n            var H, S, L, M, m, C;\n            M = mmax(r, g, b);\n            m = mmin(r, g, b);\n            C = M - m;\n            H = C == 0 ? null : M == r ? (g - b) / C : M == g ? (b - r) / C + 2 : (r - g) / C + 4;\n            H = (H + 360) % 6 * 60 / 360;\n            L = (M + m) / 2;\n            S = C == 0 ? 0 : L < .5 ? C / (2 * L) : C / (2 - 2 * L);\n            return {\n              h: H,\n              s: S,\n              l: L,\n              toString: hsltoString\n            };\n          };\n\n          R._path2string = function () {\n            return this.join(\",\").replace(p2s, \"$1\");\n          };\n\n          function repush(array, item) {\n            for (var i = 0, ii = array.length; i < ii; i++) {\n              if (array[i] === item) {\n                return array.push(array.splice(i, 1)[0]);\n              }\n            }\n          }\n\n          function cacher(f, scope, postprocessor) {\n            function newf() {\n              var arg = Array.prototype.slice.call(arguments, 0),\n                  args = arg.join(\"\\u2400\"),\n                  cache = newf.cache = newf.cache || {},\n                  count = newf.count = newf.count || [];\n\n              if (cache[has](args)) {\n                repush(count, args);\n                return postprocessor ? postprocessor(cache[args]) : cache[args];\n              }\n\n              count.length >= 1e3 && delete cache[count.shift()];\n              count.push(args);\n              cache[args] = f[apply](scope, arg);\n              return postprocessor ? postprocessor(cache[args]) : cache[args];\n            }\n\n            return newf;\n          }\n\n          var preload = R._preload = function (src, f) {\n            var img = g.doc.createElement(\"img\");\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\n            img.onload = function () {\n              f.call(this);\n              this.onload = null;\n              g.doc.body.removeChild(this);\n            };\n\n            img.onerror = function () {\n              g.doc.body.removeChild(this);\n            };\n\n            g.doc.body.appendChild(img);\n            img.src = src;\n          };\n\n          function clrToString() {\n            return this.hex;\n          }\n          /*\\\n           * Raphael.getRGB\n           [ method ]\n           **\n           * Parses colour string as RGB object\n           > Parameters\n           - colour (string) colour string in one of formats:\n           # <ul>\n           #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n           #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n           #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n           #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n           #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n           #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n           #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n           #     <li>hsl(•••, •••, •••) — same as hsb</li>\n           #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n           # </ul>\n           = (object) RGB object in format:\n           o {\n           o     r (number) red,\n           o     g (number) green,\n           o     b (number) blue\n           o     hex (string) color in HTML/CSS format: #••••••,\n           o     error (boolean) true if string can’t be parsed\n           o }\n          \\*/\n\n\n          R.getRGB = cacher(function (colour) {\n            if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n              return {\n                r: -1,\n                g: -1,\n                b: -1,\n                hex: \"none\",\n                error: 1,\n                toString: clrToString\n              };\n            }\n\n            if (colour == \"none\") {\n              return {\n                r: -1,\n                g: -1,\n                b: -1,\n                hex: \"none\",\n                toString: clrToString\n              };\n            }\n\n            !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = _toHex(colour));\n            var res,\n                red,\n                green,\n                blue,\n                opacity,\n                t,\n                values,\n                rgb = colour.match(colourRegExp);\n\n            if (rgb) {\n              if (rgb[2]) {\n                blue = toInt(rgb[2].substring(5), 16);\n                green = toInt(rgb[2].substring(3, 5), 16);\n                red = toInt(rgb[2].substring(1, 3), 16);\n              }\n\n              if (rgb[3]) {\n                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n              }\n\n              if (rgb[4]) {\n                values = rgb[4][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == \"%\" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == \"%\" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n              }\n\n              if (rgb[5]) {\n                values = rgb[5][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == \"%\" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == \"%\" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n                return R.hsb2rgb(red, green, blue, opacity);\n              }\n\n              if (rgb[6]) {\n                values = rgb[6][split](commaSpaces);\n                red = toFloat(values[0]);\n                values[0].slice(-1) == \"%\" && (red *= 2.55);\n                green = toFloat(values[1]);\n                values[1].slice(-1) == \"%\" && (green *= 2.55);\n                blue = toFloat(values[2]);\n                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n                return R.hsl2rgb(red, green, blue, opacity);\n              }\n\n              rgb = {\n                r: red,\n                g: green,\n                b: blue,\n                toString: clrToString\n              };\n              rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n              R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n              return rgb;\n            }\n\n            return {\n              r: -1,\n              g: -1,\n              b: -1,\n              hex: \"none\",\n              error: 1,\n              toString: clrToString\n            };\n          }, R);\n          /*\\\n           * Raphael.hsb\n           [ method ]\n           **\n           * Converts HSB values to hex representation of the colour.\n           > Parameters\n           - h (number) hue\n           - s (number) saturation\n           - b (number) value or brightness\n           = (string) hex representation of the colour.\n          \\*/\n\n          R.hsb = cacher(function (h, s, b) {\n            return R.hsb2rgb(h, s, b).hex;\n          });\n          /*\\\n           * Raphael.hsl\n           [ method ]\n           **\n           * Converts HSL values to hex representation of the colour.\n           > Parameters\n           - h (number) hue\n           - s (number) saturation\n           - l (number) luminosity\n           = (string) hex representation of the colour.\n          \\*/\n\n          R.hsl = cacher(function (h, s, l) {\n            return R.hsl2rgb(h, s, l).hex;\n          });\n          /*\\\n           * Raphael.rgb\n           [ method ]\n           **\n           * Converts RGB values to hex representation of the colour.\n           > Parameters\n           - r (number) red\n           - g (number) green\n           - b (number) blue\n           = (string) hex representation of the colour.\n          \\*/\n\n          R.rgb = cacher(function (r, g, b) {\n            function round(x) {\n              return x + 0.5 | 0;\n            }\n\n            return \"#\" + (16777216 | round(b) | round(g) << 8 | round(r) << 16).toString(16).slice(1);\n          });\n          /*\\\n           * Raphael.getColor\n           [ method ]\n           **\n           * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n           > Parameters\n           - value (number) #optional brightness, default is `0.75`\n           = (string) hex representation of the colour.\n          \\*/\n\n          R.getColor = function (value) {\n            var start = this.getColor.start = this.getColor.start || {\n              h: 0,\n              s: 1,\n              b: value || .75\n            },\n                rgb = this.hsb2rgb(start.h, start.s, start.b);\n            start.h += .075;\n\n            if (start.h > 1) {\n              start.h = 0;\n              start.s -= .2;\n              start.s <= 0 && (this.getColor.start = {\n                h: 0,\n                s: 1,\n                b: start.b\n              });\n            }\n\n            return rgb.hex;\n          };\n          /*\\\n           * Raphael.getColor.reset\n           [ method ]\n           **\n           * Resets spectrum position for @Raphael.getColor back to red.\n          \\*/\n\n\n          R.getColor.reset = function () {\n            delete this.start;\n          }; // http://schepers.cc/getting-to-the-point\n\n\n          function catmullRom2bezier(crp, z) {\n            var d = [];\n\n            for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n              var p = [{\n                x: +crp[i - 2],\n                y: +crp[i - 1]\n              }, {\n                x: +crp[i],\n                y: +crp[i + 1]\n              }, {\n                x: +crp[i + 2],\n                y: +crp[i + 3]\n              }, {\n                x: +crp[i + 4],\n                y: +crp[i + 5]\n              }];\n\n              if (z) {\n                if (!i) {\n                  p[0] = {\n                    x: +crp[iLen - 2],\n                    y: +crp[iLen - 1]\n                  };\n                } else if (iLen - 4 == i) {\n                  p[3] = {\n                    x: +crp[0],\n                    y: +crp[1]\n                  };\n                } else if (iLen - 2 == i) {\n                  p[2] = {\n                    x: +crp[0],\n                    y: +crp[1]\n                  };\n                  p[3] = {\n                    x: +crp[2],\n                    y: +crp[3]\n                  };\n                }\n              } else {\n                if (iLen - 4 == i) {\n                  p[3] = p[2];\n                } else if (!i) {\n                  p[0] = {\n                    x: +crp[i],\n                    y: +crp[i + 1]\n                  };\n                }\n              }\n\n              d.push([\"C\", (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);\n            }\n\n            return d;\n          }\n          /*\\\n           * Raphael.parsePathString\n           [ method ]\n           **\n           * Utility method\n           **\n           * Parses given path string into an array of arrays of path segments.\n           > Parameters\n           - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n           = (array) array of segments.\n          \\*/\n\n\n          R.parsePathString = function (pathString) {\n            if (!pathString) {\n              return null;\n            }\n\n            var pth = paths(pathString);\n\n            if (pth.arr) {\n              return pathClone(pth.arr);\n            }\n\n            var paramCounts = {\n              a: 7,\n              c: 6,\n              h: 1,\n              l: 2,\n              m: 2,\n              r: 4,\n              q: 4,\n              s: 4,\n              t: 2,\n              v: 1,\n              z: 0\n            },\n                data = [];\n\n            if (R.is(pathString, array) && R.is(pathString[0], array)) {\n              // rough assumption\n              data = pathClone(pathString);\n            }\n\n            if (!data.length) {\n              Str(pathString).replace(pathCommand, function (a, b, c) {\n                var params = [],\n                    name = b.toLowerCase();\n                c.replace(pathValues, function (a, b) {\n                  b && params.push(+b);\n                });\n\n                if (name == \"m\" && params.length > 2) {\n                  data.push([b][concat](params.splice(0, 2)));\n                  name = \"l\";\n                  b = b == \"m\" ? \"l\" : \"L\";\n                }\n\n                if (name == \"r\") {\n                  data.push([b][concat](params));\n                } else while (params.length >= paramCounts[name]) {\n                  data.push([b][concat](params.splice(0, paramCounts[name])));\n\n                  if (!paramCounts[name]) {\n                    break;\n                  }\n                }\n              });\n            }\n\n            data.toString = R._path2string;\n            pth.arr = pathClone(data);\n            return data;\n          };\n          /*\\\n           * Raphael.parseTransformString\n           [ method ]\n           **\n           * Utility method\n           **\n           * Parses given path string into an array of transformations.\n           > Parameters\n           - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n           = (array) array of transformations.\n          \\*/\n\n\n          R.parseTransformString = cacher(function (TString) {\n            if (!TString) {\n              return null;\n            }\n\n            var paramCounts = {\n              r: 3,\n              s: 4,\n              t: 2,\n              m: 6\n            },\n                data = [];\n\n            if (R.is(TString, array) && R.is(TString[0], array)) {\n              // rough assumption\n              data = pathClone(TString);\n            }\n\n            if (!data.length) {\n              Str(TString).replace(tCommand, function (a, b, c) {\n                var params = [],\n                    name = lowerCase.call(b);\n                c.replace(pathValues, function (a, b) {\n                  b && params.push(+b);\n                });\n                data.push([b][concat](params));\n              });\n            }\n\n            data.toString = R._path2string;\n            return data;\n          }, this, function (elem) {\n            if (!elem) return elem;\n            var newData = [];\n\n            for (var i = 0; i < elem.length; i++) {\n              var newLevel = [];\n\n              for (var j = 0; j < elem[i].length; j++) {\n                newLevel.push(elem[i][j]);\n              }\n\n              newData.push(newLevel);\n            }\n\n            return newData;\n          }); // PATHS\n\n          var paths = function paths(ps) {\n            var p = paths.ps = paths.ps || {};\n\n            if (p[ps]) {\n              p[ps].sleep = 100;\n            } else {\n              p[ps] = {\n                sleep: 100\n              };\n            }\n\n            setTimeout(function () {\n              for (var key in p) {\n                if (p[has](key) && key != ps) {\n                  p[key].sleep--;\n                  !p[key].sleep && delete p[key];\n                }\n              }\n            });\n            return p[ps];\n          };\n          /*\\\n           * Raphael.findDotsAtSegment\n           [ method ]\n           **\n           * Utility method\n           **\n           * Find dot coordinates on the given cubic bezier curve at the given t.\n           > Parameters\n           - p1x (number) x of the first point of the curve\n           - p1y (number) y of the first point of the curve\n           - c1x (number) x of the first anchor of the curve\n           - c1y (number) y of the first anchor of the curve\n           - c2x (number) x of the second anchor of the curve\n           - c2y (number) y of the second anchor of the curve\n           - p2x (number) x of the second point of the curve\n           - p2y (number) y of the second point of the curve\n           - t (number) position on the curve (0..1)\n           = (object) point information in format:\n           o {\n           o     x: (number) x coordinate of the point\n           o     y: (number) y coordinate of the point\n           o     m: {\n           o         x: (number) x coordinate of the left anchor\n           o         y: (number) y coordinate of the left anchor\n           o     }\n           o     n: {\n           o         x: (number) x coordinate of the right anchor\n           o         y: (number) y coordinate of the right anchor\n           o     }\n           o     start: {\n           o         x: (number) x coordinate of the start of the curve\n           o         y: (number) y coordinate of the start of the curve\n           o     }\n           o     end: {\n           o         x: (number) x coordinate of the end of the curve\n           o         y: (number) y coordinate of the end of the curve\n           o     }\n           o     alpha: (number) angle of the curve derivative at the point\n           o }\n          \\*/\n\n\n          R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n            var t1 = 1 - t,\n                t13 = pow(t1, 3),\n                t12 = pow(t1, 2),\n                t2 = t * t,\n                t3 = t2 * t,\n                x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n                y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n                mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n                my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n                nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n                ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n                ax = t1 * p1x + t * c1x,\n                ay = t1 * p1y + t * c1y,\n                cx = t1 * c2x + t * p2x,\n                cy = t1 * c2y + t * p2y,\n                alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n            (mx > nx || my < ny) && (alpha += 180);\n            return {\n              x: x,\n              y: y,\n              m: {\n                x: mx,\n                y: my\n              },\n              n: {\n                x: nx,\n                y: ny\n              },\n              start: {\n                x: ax,\n                y: ay\n              },\n              end: {\n                x: cx,\n                y: cy\n              },\n              alpha: alpha\n            };\n          };\n          /*\\\n           * Raphael.bezierBBox\n           [ method ]\n           **\n           * Utility method\n           **\n           * Return bounding box of a given cubic bezier curve\n           > Parameters\n           - p1x (number) x of the first point of the curve\n           - p1y (number) y of the first point of the curve\n           - c1x (number) x of the first anchor of the curve\n           - c1y (number) y of the first anchor of the curve\n           - c2x (number) x of the second anchor of the curve\n           - c2y (number) y of the second anchor of the curve\n           - p2x (number) x of the second point of the curve\n           - p2y (number) y of the second point of the curve\n           * or\n           - bez (array) array of six points for bezier curve\n           = (object) point information in format:\n           o {\n           o     min: {\n           o         x: (number) x coordinate of the left point\n           o         y: (number) y coordinate of the top point\n           o     }\n           o     max: {\n           o         x: (number) x coordinate of the right point\n           o         y: (number) y coordinate of the bottom point\n           o     }\n           o }\n          \\*/\n\n\n          R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n            if (!R.is(p1x, \"array\")) {\n              p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n            }\n\n            var bbox = curveDim.apply(null, p1x);\n            return {\n              x: bbox.min.x,\n              y: bbox.min.y,\n              x2: bbox.max.x,\n              y2: bbox.max.y,\n              width: bbox.max.x - bbox.min.x,\n              height: bbox.max.y - bbox.min.y\n            };\n          };\n          /*\\\n           * Raphael.isPointInsideBBox\n           [ method ]\n           **\n           * Utility method\n           **\n           * Returns `true` if given point is inside bounding boxes.\n           > Parameters\n           - bbox (string) bounding box\n           - x (string) x coordinate of the point\n           - y (string) y coordinate of the point\n           = (boolean) `true` if point inside\n          \\*/\n\n\n          R.isPointInsideBBox = function (bbox, x, y) {\n            return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n          };\n          /*\\\n           * Raphael.isBBoxIntersect\n           [ method ]\n           **\n           * Utility method\n           **\n           * Returns `true` if two bounding boxes intersect\n           > Parameters\n           - bbox1 (string) first bounding box\n           - bbox2 (string) second bounding box\n           = (boolean) `true` if they intersect\n          \\*/\n\n\n          R.isBBoxIntersect = function (bbox1, bbox2) {\n            var i = R.isPointInsideBBox;\n            return i(bbox2, bbox1.x, bbox1.y) || i(bbox2, bbox1.x2, bbox1.y) || i(bbox2, bbox1.x, bbox1.y2) || i(bbox2, bbox1.x2, bbox1.y2) || i(bbox1, bbox2.x, bbox2.y) || i(bbox1, bbox2.x2, bbox2.y) || i(bbox1, bbox2.x, bbox2.y2) || i(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n          };\n\n          function base3(t, p1, p2, p3, p4) {\n            var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n                t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n            return t * t2 - 3 * p1 + 3 * p2;\n          }\n\n          function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n            if (z == null) {\n              z = 1;\n            }\n\n            z = z > 1 ? 1 : z < 0 ? 0 : z;\n            var z2 = z / 2,\n                n = 12,\n                Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816],\n                Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472],\n                sum = 0;\n\n            for (var i = 0; i < n; i++) {\n              var ct = z2 * Tvalues[i] + z2,\n                  xbase = base3(ct, x1, x2, x3, x4),\n                  ybase = base3(ct, y1, y2, y3, y4),\n                  comb = xbase * xbase + ybase * ybase;\n              sum += Cvalues[i] * math.sqrt(comb);\n            }\n\n            return z2 * sum;\n          }\n\n          function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n            if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n              return;\n            }\n\n            var t = 1,\n                step = t / 2,\n                t2 = t - step,\n                l,\n                e = .01;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\n            while (abs(l - ll) > e) {\n              step /= 2;\n              t2 += (l < ll ? 1 : -1) * step;\n              l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n            }\n\n            return t2;\n          }\n\n          function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n            if (mmax(x1, x2) < mmin(x3, x4) || mmin(x1, x2) > mmax(x3, x4) || mmax(y1, y2) < mmin(y3, y4) || mmin(y1, y2) > mmax(y3, y4)) {\n              return;\n            }\n\n            var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n                ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n                denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n            if (!denominator) {\n              return;\n            }\n\n            var px = nx / denominator,\n                py = ny / denominator,\n                px2 = +px.toFixed(2),\n                py2 = +py.toFixed(2);\n\n            if (px2 < +mmin(x1, x2).toFixed(2) || px2 > +mmax(x1, x2).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y2).toFixed(2) || py2 > +mmax(y1, y2).toFixed(2) || py2 < +mmin(y3, y4).toFixed(2) || py2 > +mmax(y3, y4).toFixed(2)) {\n              return;\n            }\n\n            return {\n              x: px,\n              y: py\n            };\n          }\n\n          function inter(bez1, bez2) {\n            return interHelper(bez1, bez2);\n          }\n\n          function interCount(bez1, bez2) {\n            return interHelper(bez1, bez2, 1);\n          }\n\n          function interHelper(bez1, bez2, justCount) {\n            var bbox1 = R.bezierBBox(bez1),\n                bbox2 = R.bezierBBox(bez2);\n\n            if (!R.isBBoxIntersect(bbox1, bbox2)) {\n              return justCount ? 0 : [];\n            }\n\n            var l1 = bezlen.apply(0, bez1),\n                l2 = bezlen.apply(0, bez2),\n                n1 = mmax(~~(l1 / 5), 1),\n                n2 = mmax(~~(l2 / 5), 1),\n                dots1 = [],\n                dots2 = [],\n                xy = {},\n                res = justCount ? 0 : [];\n\n            for (var i = 0; i < n1 + 1; i++) {\n              var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n              dots1.push({\n                x: p.x,\n                y: p.y,\n                t: i / n1\n              });\n            }\n\n            for (i = 0; i < n2 + 1; i++) {\n              p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n              dots2.push({\n                x: p.x,\n                y: p.y,\n                t: i / n2\n              });\n            }\n\n            for (i = 0; i < n1; i++) {\n              for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\n                if (is) {\n                  if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                    continue;\n                  }\n\n                  xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                  var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                      t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\n                  if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n                    if (justCount) {\n                      res++;\n                    } else {\n                      res.push({\n                        x: is.x,\n                        y: is.y,\n                        t1: mmin(t1, 1),\n                        t2: mmin(t2, 1)\n                      });\n                    }\n                  }\n                }\n              }\n            }\n\n            return res;\n          }\n          /*\\\n           * Raphael.pathIntersection\n           [ method ]\n           **\n           * Utility method\n           **\n           * Finds intersections of two paths\n           > Parameters\n           - path1 (string) path string\n           - path2 (string) path string\n           = (array) dots of intersection\n           o [\n           o     {\n           o         x: (number) x coordinate of the point\n           o         y: (number) y coordinate of the point\n           o         t1: (number) t value for segment of path1\n           o         t2: (number) t value for segment of path2\n           o         segment1: (number) order number for segment of path1\n           o         segment2: (number) order number for segment of path2\n           o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n           o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n           o     }\n           o ]\n          \\*/\n\n\n          R.pathIntersection = function (path1, path2) {\n            return interPathHelper(path1, path2);\n          };\n\n          R.pathIntersectionNumber = function (path1, path2) {\n            return interPathHelper(path1, path2, 1);\n          };\n\n          function interPathHelper(path1, path2, justCount) {\n            path1 = R._path2curve(path1);\n            path2 = R._path2curve(path2);\n            var x1,\n                y1,\n                x2,\n                y2,\n                x1m,\n                y1m,\n                x2m,\n                y2m,\n                bez1,\n                bez2,\n                res = justCount ? 0 : [];\n\n            for (var i = 0, ii = path1.length; i < ii; i++) {\n              var pi = path1[i];\n\n              if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n              } else {\n                if (pi[0] == \"C\") {\n                  bez1 = [x1, y1].concat(pi.slice(1));\n                  x1 = bez1[6];\n                  y1 = bez1[7];\n                } else {\n                  bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                  x1 = x1m;\n                  y1 = y1m;\n                }\n\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                  var pj = path2[j];\n\n                  if (pj[0] == \"M\") {\n                    x2 = x2m = pj[1];\n                    y2 = y2m = pj[2];\n                  } else {\n                    if (pj[0] == \"C\") {\n                      bez2 = [x2, y2].concat(pj.slice(1));\n                      x2 = bez2[6];\n                      y2 = bez2[7];\n                    } else {\n                      bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                      x2 = x2m;\n                      y2 = y2m;\n                    }\n\n                    var intr = interHelper(bez1, bez2, justCount);\n\n                    if (justCount) {\n                      res += intr;\n                    } else {\n                      for (var k = 0, kk = intr.length; k < kk; k++) {\n                        intr[k].segment1 = i;\n                        intr[k].segment2 = j;\n                        intr[k].bez1 = bez1;\n                        intr[k].bez2 = bez2;\n                      }\n\n                      res = res.concat(intr);\n                    }\n                  }\n                }\n              }\n            }\n\n            return res;\n          }\n          /*\\\n           * Raphael.isPointInsidePath\n           [ method ]\n           **\n           * Utility method\n           **\n           * Returns `true` if given point is inside a given closed path.\n           > Parameters\n           - path (string) path string\n           - x (number) x of the point\n           - y (number) y of the point\n           = (boolean) true, if point is inside the path\n          \\*/\n\n\n          R.isPointInsidePath = function (path, x, y) {\n            var bbox = R.pathBBox(path);\n            return R.isPointInsideBBox(bbox, x, y) && interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n          };\n\n          R._removedFactory = function (methodname) {\n            return function () {\n              eve(\"raphael.log\", null, \"Rapha\\xEBl: you are calling to method \\u201C\" + methodname + \"\\u201D of removed object\", methodname);\n            };\n          };\n          /*\\\n           * Raphael.pathBBox\n           [ method ]\n           **\n           * Utility method\n           **\n           * Return bounding box of a given path\n           > Parameters\n           - path (string) path string\n           = (object) bounding box\n           o {\n           o     x: (number) x coordinate of the left top point of the box\n           o     y: (number) y coordinate of the left top point of the box\n           o     x2: (number) x coordinate of the right bottom point of the box\n           o     y2: (number) y coordinate of the right bottom point of the box\n           o     width: (number) width of the box\n           o     height: (number) height of the box\n           o     cx: (number) x coordinate of the center of the box\n           o     cy: (number) y coordinate of the center of the box\n           o }\n          \\*/\n\n\n          var pathDimensions = R.pathBBox = function (path) {\n            var pth = paths(path);\n\n            if (pth.bbox) {\n              return clone(pth.bbox);\n            }\n\n            if (!path) {\n              return {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0,\n                x2: 0,\n                y2: 0\n              };\n            }\n\n            path = path2curve(path);\n            var x = 0,\n                y = 0,\n                X = [],\n                Y = [],\n                p;\n\n            for (var i = 0, ii = path.length; i < ii; i++) {\n              p = path[i];\n\n              if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n              } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X[concat](dim.min.x, dim.max.x);\n                Y = Y[concat](dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n              }\n            }\n\n            var xmin = mmin[apply](0, X),\n                ymin = mmin[apply](0, Y),\n                xmax = mmax[apply](0, X),\n                ymax = mmax[apply](0, Y),\n                width = xmax - xmin,\n                height = ymax - ymin,\n                bb = {\n              x: xmin,\n              y: ymin,\n              x2: xmax,\n              y2: ymax,\n              width: width,\n              height: height,\n              cx: xmin + width / 2,\n              cy: ymin + height / 2\n            };\n            pth.bbox = clone(bb);\n            return bb;\n          },\n              pathClone = function pathClone(pathArray) {\n            var res = clone(pathArray);\n            res.toString = R._path2string;\n            return res;\n          },\n              pathToRelative = R._pathToRelative = function (pathArray) {\n            var pth = paths(pathArray);\n\n            if (pth.rel) {\n              return pathClone(pth.rel);\n            }\n\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) {\n              // rough assumption\n              pathArray = R.parsePathString(pathArray);\n            }\n\n            var res = [],\n                x = 0,\n                y = 0,\n                mx = 0,\n                my = 0,\n                start = 0;\n\n            if (pathArray[0][0] == \"M\") {\n              x = pathArray[0][1];\n              y = pathArray[0][2];\n              mx = x;\n              my = y;\n              start++;\n              res.push([\"M\", x, y]);\n            }\n\n            for (var i = start, ii = pathArray.length; i < ii; i++) {\n              var r = res[i] = [],\n                  pa = pathArray[i];\n\n              if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n\n                switch (r[0]) {\n                  case \"a\":\n                    r[1] = pa[1];\n                    r[2] = pa[2];\n                    r[3] = pa[3];\n                    r[4] = pa[4];\n                    r[5] = pa[5];\n                    r[6] = +(pa[6] - x).toFixed(3);\n                    r[7] = +(pa[7] - y).toFixed(3);\n                    break;\n\n                  case \"v\":\n                    r[1] = +(pa[1] - y).toFixed(3);\n                    break;\n\n                  case \"m\":\n                    mx = pa[1];\n                    my = pa[2];\n\n                  default:\n                    for (var j = 1, jj = pa.length; j < jj; j++) {\n                      r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                    }\n\n                }\n              } else {\n                r = res[i] = [];\n\n                if (pa[0] == \"m\") {\n                  mx = pa[1] + x;\n                  my = pa[2] + y;\n                }\n\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                  res[i][k] = pa[k];\n                }\n              }\n\n              var len = res[i].length;\n\n              switch (res[i][0]) {\n                case \"z\":\n                  x = mx;\n                  y = my;\n                  break;\n\n                case \"h\":\n                  x += +res[i][len - 1];\n                  break;\n\n                case \"v\":\n                  y += +res[i][len - 1];\n                  break;\n\n                default:\n                  x += +res[i][len - 2];\n                  y += +res[i][len - 1];\n              }\n            }\n\n            res.toString = R._path2string;\n            pth.rel = pathClone(res);\n            return res;\n          },\n              pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n            var pth = paths(pathArray);\n\n            if (pth.abs) {\n              return pathClone(pth.abs);\n            }\n\n            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) {\n              // rough assumption\n              pathArray = R.parsePathString(pathArray);\n            }\n\n            if (!pathArray || !pathArray.length) {\n              return [[\"M\", 0, 0]];\n            }\n\n            var res = [],\n                x = 0,\n                y = 0,\n                mx = 0,\n                my = 0,\n                start = 0;\n\n            if (pathArray[0][0] == \"M\") {\n              x = +pathArray[0][1];\n              y = +pathArray[0][2];\n              mx = x;\n              my = y;\n              start++;\n              res[0] = [\"M\", x, y];\n            }\n\n            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\n            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n              res.push(r = []);\n              pa = pathArray[i];\n\n              if (pa[0] != upperCase.call(pa[0])) {\n                r[0] = upperCase.call(pa[0]);\n\n                switch (r[0]) {\n                  case \"A\":\n                    r[1] = pa[1];\n                    r[2] = pa[2];\n                    r[3] = pa[3];\n                    r[4] = pa[4];\n                    r[5] = pa[5];\n                    r[6] = +(pa[6] + x);\n                    r[7] = +(pa[7] + y);\n                    break;\n\n                  case \"V\":\n                    r[1] = +pa[1] + y;\n                    break;\n\n                  case \"H\":\n                    r[1] = +pa[1] + x;\n                    break;\n\n                  case \"R\":\n                    var dots = [x, y][concat](pa.slice(1));\n\n                    for (var j = 2, jj = dots.length; j < jj; j++) {\n                      dots[j] = +dots[j] + x;\n                      dots[++j] = +dots[j] + y;\n                    }\n\n                    res.pop();\n                    res = res[concat](catmullRom2bezier(dots, crz));\n                    break;\n\n                  case \"M\":\n                    mx = +pa[1] + x;\n                    my = +pa[2] + y;\n\n                  default:\n                    for (j = 1, jj = pa.length; j < jj; j++) {\n                      r[j] = +pa[j] + (j % 2 ? x : y);\n                    }\n\n                }\n              } else if (pa[0] == \"R\") {\n                dots = [x, y][concat](pa.slice(1));\n                res.pop();\n                res = res[concat](catmullRom2bezier(dots, crz));\n                r = [\"R\"][concat](pa.slice(-2));\n              } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                  r[k] = pa[k];\n                }\n              }\n\n              switch (r[0]) {\n                case \"Z\":\n                  x = mx;\n                  y = my;\n                  break;\n\n                case \"H\":\n                  x = r[1];\n                  break;\n\n                case \"V\":\n                  y = r[1];\n                  break;\n\n                case \"M\":\n                  mx = r[r.length - 2];\n                  my = r[r.length - 1];\n\n                default:\n                  x = r[r.length - 2];\n                  y = r[r.length - 1];\n              }\n            }\n\n            res.toString = R._path2string;\n            pth.abs = pathClone(res);\n            return res;\n          },\n              l2c = function l2c(x1, y1, x2, y2) {\n            return [x1, y1, x2, y2, x2, y2];\n          },\n              q2c = function q2c(x1, y1, ax, ay, x2, y2) {\n            var _13 = 1 / 3,\n                _23 = 2 / 3;\n\n            return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n          },\n              a2c = function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n            // for more information of where this math came from visit:\n            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n            var _120 = PI * 120 / 180,\n                rad = PI / 180 * (+angle || 0),\n                res = [],\n                xy,\n                rotate = cacher(function (x, y, rad) {\n              var X = x * math.cos(rad) - y * math.sin(rad),\n                  Y = x * math.sin(rad) + y * math.cos(rad);\n              return {\n                x: X,\n                y: Y\n              };\n            });\n\n            if (!recursive) {\n              xy = rotate(x1, y1, -rad);\n              x1 = xy.x;\n              y1 = xy.y;\n              xy = rotate(x2, y2, -rad);\n              x2 = xy.x;\n              y2 = xy.y;\n              var cos = math.cos(PI / 180 * angle),\n                  sin = math.sin(PI / 180 * angle),\n                  x = (x1 - x2) / 2,\n                  y = (y1 - y2) / 2;\n              var h = x * x / (rx * rx) + y * y / (ry * ry);\n\n              if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n              }\n\n              var rx2 = rx * rx,\n                  ry2 = ry * ry,\n                  k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                  cx = k * rx * y / ry + (x1 + x2) / 2,\n                  cy = k * -ry * x / rx + (y1 + y2) / 2,\n                  f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                  f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n              f1 = x1 < cx ? PI - f1 : f1;\n              f2 = x2 < cx ? PI - f2 : f2;\n              f1 < 0 && (f1 = PI * 2 + f1);\n              f2 < 0 && (f2 = PI * 2 + f2);\n\n              if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n              }\n\n              if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n              }\n            } else {\n              f1 = recursive[0];\n              f2 = recursive[1];\n              cx = recursive[2];\n              cy = recursive[3];\n            }\n\n            var df = f2 - f1;\n\n            if (abs(df) > _120) {\n              var f2old = f2,\n                  x2old = x2,\n                  y2old = y2;\n              f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n              x2 = cx + rx * math.cos(f2);\n              y2 = cy + ry * math.sin(f2);\n              res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n            }\n\n            df = f2 - f1;\n            var c1 = math.cos(f1),\n                s1 = math.sin(f1),\n                c2 = math.cos(f2),\n                s2 = math.sin(f2),\n                t = math.tan(df / 4),\n                hx = 4 / 3 * rx * t,\n                hy = 4 / 3 * ry * t,\n                m1 = [x1, y1],\n                m2 = [x1 + hx * s1, y1 - hy * c1],\n                m3 = [x2 + hx * s2, y2 - hy * c2],\n                m4 = [x2, y2];\n            m2[0] = 2 * m1[0] - m2[0];\n            m2[1] = 2 * m1[1] - m2[1];\n\n            if (recursive) {\n              return [m2, m3, m4][concat](res);\n            } else {\n              res = [m2, m3, m4][concat](res).join()[split](\",\");\n              var newres = [];\n\n              for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n              }\n\n              return newres;\n            }\n          },\n              findDotAtSegment = function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n            var t1 = 1 - t;\n            return {\n              x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n              y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n            };\n          },\n              curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n            var a = c2x - 2 * c1x + p1x - (p2x - 2 * c2x + c1x),\n                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n                c = p1x - c1x,\n                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n                y = [p1y, p2y],\n                x = [p1x, p2x],\n                dot;\n            abs(t1) > \"1e12\" && (t1 = .5);\n            abs(t2) > \"1e12\" && (t2 = .5);\n\n            if (t1 > 0 && t1 < 1) {\n              dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n              x.push(dot.x);\n              y.push(dot.y);\n            }\n\n            if (t2 > 0 && t2 < 1) {\n              dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n              x.push(dot.x);\n              y.push(dot.y);\n            }\n\n            a = c2y - 2 * c1y + p1y - (p2y - 2 * c2y + c1y);\n            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n            c = p1y - c1y;\n            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n            abs(t1) > \"1e12\" && (t1 = .5);\n            abs(t2) > \"1e12\" && (t2 = .5);\n\n            if (t1 > 0 && t1 < 1) {\n              dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n              x.push(dot.x);\n              y.push(dot.y);\n            }\n\n            if (t2 > 0 && t2 < 1) {\n              dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n              x.push(dot.x);\n              y.push(dot.y);\n            }\n\n            return {\n              min: {\n                x: mmin[apply](0, x),\n                y: mmin[apply](0, y)\n              },\n              max: {\n                x: mmax[apply](0, x),\n                y: mmax[apply](0, y)\n              }\n            };\n          }),\n              path2curve = R._path2curve = cacher(function (path, path2) {\n            var pth = !path2 && paths(path);\n\n            if (!path2 && pth.curve) {\n              return pathClone(pth.curve);\n            }\n\n            var p = pathToAbsolute(path),\n                p2 = path2 && pathToAbsolute(path2),\n                attrs = {\n              x: 0,\n              y: 0,\n              bx: 0,\n              by: 0,\n              X: 0,\n              Y: 0,\n              qx: null,\n              qy: null\n            },\n                attrs2 = {\n              x: 0,\n              y: 0,\n              bx: 0,\n              by: 0,\n              X: 0,\n              Y: 0,\n              qx: null,\n              qy: null\n            },\n                processPath = function processPath(path, d, pcom) {\n              var nx,\n                  ny,\n                  tq = {\n                T: 1,\n                Q: 1\n              };\n\n              if (!path) {\n                return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n              }\n\n              !(path[0] in tq) && (d.qx = d.qy = null);\n\n              switch (path[0]) {\n                case \"M\":\n                  d.X = path[1];\n                  d.Y = path[2];\n                  break;\n\n                case \"A\":\n                  path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n                  break;\n\n                case \"S\":\n                  if (pcom == \"C\" || pcom == \"S\") {\n                    // In \"S\" case we have to take into account, if the previous command is C/S.\n                    nx = d.x * 2 - d.bx; // And reflect the previous\n\n                    ny = d.y * 2 - d.by; // command's control point relative to the current point.\n                  } else {\n                    // or some else or nothing\n                    nx = d.x;\n                    ny = d.y;\n                  }\n\n                  path = [\"C\", nx, ny][concat](path.slice(1));\n                  break;\n\n                case \"T\":\n                  if (pcom == \"Q\" || pcom == \"T\") {\n                    // In \"T\" case we have to take into account, if the previous command is Q/T.\n                    d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\n                    d.qy = d.y * 2 - d.qy; // to case \"S\".\n                  } else {\n                    // or something else or nothing\n                    d.qx = d.x;\n                    d.qy = d.y;\n                  }\n\n                  path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                  break;\n\n                case \"Q\":\n                  d.qx = path[1];\n                  d.qy = path[2];\n                  path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                  break;\n\n                case \"L\":\n                  path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n                  break;\n\n                case \"H\":\n                  path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n                  break;\n\n                case \"V\":\n                  path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n                  break;\n\n                case \"Z\":\n                  path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n                  break;\n              }\n\n              return path;\n            },\n                fixArc = function fixArc(pp, i) {\n              if (pp[i].length > 7) {\n                pp[i].shift();\n                var pi = pp[i];\n\n                while (pi.length) {\n                  pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\n                  p2 && (pcoms2[i] = \"A\"); // the same as above\n\n                  pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n                }\n\n                pp.splice(i, 1);\n                ii = mmax(p.length, p2 && p2.length || 0);\n              }\n            },\n                fixM = function fixM(path1, path2, a1, a2, i) {\n              if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                a1.bx = 0;\n                a1.by = 0;\n                a1.x = path1[i][1];\n                a1.y = path1[i][2];\n                ii = mmax(p.length, p2 && p2.length || 0);\n              }\n            },\n                pcoms1 = [],\n                // path commands of original path p\n            pcoms2 = [],\n                // path commands of original path p2\n            pfirst = \"\",\n                // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n\n\n            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n              p[i] && (pfirst = p[i][0]); // save current path command\n\n              if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n                {\n                  pcoms1[i] = pfirst; // Save current path command\n\n                  i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n                }\n\n              p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n              if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n              // which may produce multiple C:s\n              // so we have to make sure that C is also C in original path\n\n              fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n              if (p2) {\n                // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n\n                if (pfirst != \"C\") {\n                  pcoms2[i] = pfirst;\n                  i && (pcom = pcoms2[i - 1]);\n                }\n\n                p2[i] = processPath(p2[i], attrs2, pcom);\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") pcoms2[i] = \"C\";\n                fixArc(p2, i);\n              }\n\n              fixM(p, p2, attrs, attrs2, i);\n              fixM(p2, p, attrs2, attrs, i);\n              var seg = p[i],\n                  seg2 = p2 && p2[i],\n                  seglen = seg.length,\n                  seg2len = p2 && seg2.length;\n              attrs.x = seg[seglen - 2];\n              attrs.y = seg[seglen - 1];\n              attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n              attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n              attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n              attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n              attrs2.x = p2 && seg2[seg2len - 2];\n              attrs2.y = p2 && seg2[seg2len - 1];\n            }\n\n            if (!p2) {\n              pth.curve = pathClone(p);\n            }\n\n            return p2 ? [p, p2] : p;\n          }, null, pathClone),\n              parseDots = R._parseDots = cacher(function (gradient) {\n            var dots = [];\n\n            for (var i = 0, ii = gradient.length; i < ii; i++) {\n              var dot = {},\n                  par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n              dot.color = R.getRGB(par[1]);\n\n              if (dot.color.error) {\n                return null;\n              }\n\n              dot.opacity = dot.color.opacity;\n              dot.color = dot.color.hex;\n              par[2] && (dot.offset = par[2] + \"%\");\n              dots.push(dot);\n            }\n\n            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n              if (!dots[i].offset) {\n                var start = toFloat(dots[i - 1].offset || 0),\n                    end = 0;\n\n                for (var j = i + 1; j < ii; j++) {\n                  if (dots[j].offset) {\n                    end = dots[j].offset;\n                    break;\n                  }\n                }\n\n                if (!end) {\n                  end = 100;\n                  j = ii;\n                }\n\n                end = toFloat(end);\n                var d = (end - start) / (j - i + 1);\n\n                for (; i < j; i++) {\n                  start += d;\n                  dots[i].offset = start + \"%\";\n                }\n              }\n            }\n\n            return dots;\n          }),\n              tear = R._tear = function (el, paper) {\n            el == paper.top && (paper.top = el.prev);\n            el == paper.bottom && (paper.bottom = el.next);\n            el.next && (el.next.prev = el.prev);\n            el.prev && (el.prev.next = el.next);\n          },\n              tofront = R._tofront = function (el, paper) {\n            if (paper.top === el) {\n              return;\n            }\n\n            tear(el, paper);\n            el.next = null;\n            el.prev = paper.top;\n            paper.top.next = el;\n            paper.top = el;\n          },\n              toback = R._toback = function (el, paper) {\n            if (paper.bottom === el) {\n              return;\n            }\n\n            tear(el, paper);\n            el.next = paper.bottom;\n            el.prev = null;\n            paper.bottom.prev = el;\n            paper.bottom = el;\n          },\n              insertafter = R._insertafter = function (el, el2, paper) {\n            tear(el, paper);\n            el2 == paper.top && (paper.top = el);\n            el2.next && (el2.next.prev = el);\n            el.next = el2.next;\n            el.prev = el2;\n            el2.next = el;\n          },\n              insertbefore = R._insertbefore = function (el, el2, paper) {\n            tear(el, paper);\n            el2 == paper.bottom && (paper.bottom = el);\n            el2.prev && (el2.prev.next = el);\n            el.prev = el2.prev;\n            el2.prev = el;\n            el.next = el2;\n          },\n\n          /*\\\n           * Raphael.toMatrix\n           [ method ]\n           **\n           * Utility method\n           **\n           * Returns matrix of transformations applied to a given path\n           > Parameters\n           - path (string) path string\n           - transform (string|array) transformation string\n           = (object) @Matrix\n          \\*/\n          toMatrix = R.toMatrix = function (path, transform) {\n            var bb = pathDimensions(path),\n                el = {\n              _: {\n                transform: E\n              },\n              getBBox: function getBBox() {\n                return bb;\n              }\n            };\n            extractTransform(el, transform);\n            return el.matrix;\n          },\n\n          /*\\\n           * Raphael.transformPath\n           [ method ]\n           **\n           * Utility method\n           **\n           * Returns path transformed by a given transformation\n           > Parameters\n           - path (string) path string\n           - transform (string|array) transformation string\n           = (string) path\n          \\*/\n          transformPath = R.transformPath = function (path, transform) {\n            return mapPath(path, toMatrix(path, transform));\n          },\n              extractTransform = R._extractTransform = function (el, tstr) {\n            if (tstr == null) {\n              return el._.transform;\n            }\n\n            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            var tdata = R.parseTransformString(tstr),\n                deg = 0,\n                dx = 0,\n                dy = 0,\n                sx = 1,\n                sy = 1,\n                _ = el._,\n                m = new Matrix();\n            _.transform = tdata || [];\n\n            if (tdata) {\n              for (var i = 0, ii = tdata.length; i < ii; i++) {\n                var t = tdata[i],\n                    tlen = t.length,\n                    command = Str(t[0]).toLowerCase(),\n                    absolute = t[0] != command,\n                    inver = absolute ? m.invert() : 0,\n                    x1,\n                    y1,\n                    x2,\n                    y2,\n                    bb;\n\n                if (command == \"t\" && tlen == 3) {\n                  if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                  } else {\n                    m.translate(t[1], t[2]);\n                  }\n                } else if (command == \"r\") {\n                  if (tlen == 2) {\n                    bb = bb || el.getBBox(1);\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                    deg += t[1];\n                  } else if (tlen == 4) {\n                    if (absolute) {\n                      x2 = inver.x(t[2], t[3]);\n                      y2 = inver.y(t[2], t[3]);\n                      m.rotate(t[1], x2, y2);\n                    } else {\n                      m.rotate(t[1], t[2], t[3]);\n                    }\n\n                    deg += t[1];\n                  }\n                } else if (command == \"s\") {\n                  if (tlen == 2 || tlen == 3) {\n                    bb = bb || el.getBBox(1);\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                    sx *= t[1];\n                    sy *= t[tlen - 1];\n                  } else if (tlen == 5) {\n                    if (absolute) {\n                      x2 = inver.x(t[3], t[4]);\n                      y2 = inver.y(t[3], t[4]);\n                      m.scale(t[1], t[2], x2, y2);\n                    } else {\n                      m.scale(t[1], t[2], t[3], t[4]);\n                    }\n\n                    sx *= t[1];\n                    sy *= t[2];\n                  }\n                } else if (command == \"m\" && tlen == 7) {\n                  m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n                }\n\n                _.dirtyT = 1;\n                el.matrix = m;\n              }\n            }\n            /*\\\n             * Element.matrix\n             [ property (object) ]\n             **\n             * Keeps @Matrix object, which represents element transformation\n            \\*/\n\n\n            el.matrix = m;\n            _.sx = sx;\n            _.sy = sy;\n            _.deg = deg;\n            _.dx = dx = m.e;\n            _.dy = dy = m.f;\n\n            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n              _.bbox.x += +dx;\n              _.bbox.y += +dy;\n            } else {\n              _.dirtyT = 1;\n            }\n          },\n              getEmpty = function getEmpty(item) {\n            var l = item[0];\n\n            switch (l.toLowerCase()) {\n              case \"t\":\n                return [l, 0, 0];\n\n              case \"m\":\n                return [l, 1, 0, 0, 1, 0, 0];\n\n              case \"r\":\n                if (item.length == 4) {\n                  return [l, 0, item[2], item[3]];\n                } else {\n                  return [l, 0];\n                }\n\n              case \"s\":\n                if (item.length == 5) {\n                  return [l, 1, 1, item[3], item[4]];\n                } else if (item.length == 3) {\n                  return [l, 1, 1];\n                } else {\n                  return [l, 1];\n                }\n\n            }\n          },\n              equaliseTransform = R._equaliseTransform = function (t1, t2) {\n            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n            t1 = R.parseTransformString(t1) || [];\n            t2 = R.parseTransformString(t2) || [];\n            var maxlength = mmax(t1.length, t2.length),\n                from = [],\n                to = [],\n                i = 0,\n                j,\n                jj,\n                tt1,\n                tt2;\n\n            for (; i < maxlength; i++) {\n              tt1 = t1[i] || getEmpty(t2[i]);\n              tt2 = t2[i] || getEmpty(tt1);\n\n              if (tt1[0] != tt2[0] || tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) || tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])) {\n                return;\n              }\n\n              from[i] = [];\n              to[i] = [];\n\n              for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n              }\n            }\n\n            return {\n              from: from,\n              to: to\n            };\n          };\n\n          R._getContainer = function (x, y, w, h) {\n            var container;\n            container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\n            if (container == null) {\n              return;\n            }\n\n            if (container.tagName) {\n              if (y == null) {\n                return {\n                  container: container,\n                  width: container.style.pixelWidth || container.offsetWidth,\n                  height: container.style.pixelHeight || container.offsetHeight\n                };\n              } else {\n                return {\n                  container: container,\n                  width: y,\n                  height: w\n                };\n              }\n            }\n\n            return {\n              container: 1,\n              x: x,\n              y: y,\n              width: w,\n              height: h\n            };\n          };\n          /*\\\n           * Raphael.pathToRelative\n           [ method ]\n           **\n           * Utility method\n           **\n           * Converts path to relative form\n           > Parameters\n           - pathString (string|array) path string or array of segments\n           = (array) array of segments.\n          \\*/\n\n\n          R.pathToRelative = pathToRelative;\n          R._engine = {};\n          /*\\\n           * Raphael.path2curve\n           [ method ]\n           **\n           * Utility method\n           **\n           * Converts path to a new path where all segments are cubic bezier curves.\n           > Parameters\n           - pathString (string|array) path string or array of segments\n           = (array) array of segments.\n          \\*/\n\n          R.path2curve = path2curve;\n          /*\\\n           * Raphael.matrix\n           [ method ]\n           **\n           * Utility method\n           **\n           * Returns matrix based on given parameters.\n           > Parameters\n           - a (number)\n           - b (number)\n           - c (number)\n           - d (number)\n           - e (number)\n           - f (number)\n           = (object) @Matrix\n          \\*/\n\n          R.matrix = function (a, b, c, d, e, f) {\n            return new Matrix(a, b, c, d, e, f);\n          };\n\n          function Matrix(a, b, c, d, e, f) {\n            if (a != null) {\n              this.a = +a;\n              this.b = +b;\n              this.c = +c;\n              this.d = +d;\n              this.e = +e;\n              this.f = +f;\n            } else {\n              this.a = 1;\n              this.b = 0;\n              this.c = 0;\n              this.d = 1;\n              this.e = 0;\n              this.f = 0;\n            }\n          }\n\n          (function (matrixproto) {\n            /*\\\n             * Matrix.add\n             [ method ]\n             **\n             * Adds given matrix to existing one.\n             > Parameters\n             - a (number)\n             - b (number)\n             - c (number)\n             - d (number)\n             - e (number)\n             - f (number)\n             or\n             - matrix (object) @Matrix\n            \\*/\n            matrixproto.add = function (a, b, c, d, e, f) {\n              var out = [[], [], []],\n                  m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                  matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                  x,\n                  y,\n                  z,\n                  res;\n\n              if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n              }\n\n              for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                  res = 0;\n\n                  for (z = 0; z < 3; z++) {\n                    res += m[x][z] * matrix[z][y];\n                  }\n\n                  out[x][y] = res;\n                }\n              }\n\n              this.a = out[0][0];\n              this.b = out[1][0];\n              this.c = out[0][1];\n              this.d = out[1][1];\n              this.e = out[0][2];\n              this.f = out[1][2];\n            };\n            /*\\\n             * Matrix.invert\n             [ method ]\n             **\n             * Returns inverted version of the matrix\n             = (object) @Matrix\n            \\*/\n\n\n            matrixproto.invert = function () {\n              var me = this,\n                  x = me.a * me.d - me.b * me.c;\n              return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n            };\n            /*\\\n             * Matrix.clone\n             [ method ]\n             **\n             * Returns copy of the matrix\n             = (object) @Matrix\n            \\*/\n\n\n            matrixproto.clone = function () {\n              return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n            };\n            /*\\\n             * Matrix.translate\n             [ method ]\n             **\n             * Translate the matrix\n             > Parameters\n             - x (number)\n             - y (number)\n            \\*/\n\n\n            matrixproto.translate = function (x, y) {\n              this.add(1, 0, 0, 1, x, y);\n            };\n            /*\\\n             * Matrix.scale\n             [ method ]\n             **\n             * Scales the matrix\n             > Parameters\n             - x (number)\n             - y (number) #optional\n             - cx (number) #optional\n             - cy (number) #optional\n            \\*/\n\n\n            matrixproto.scale = function (x, y, cx, cy) {\n              y == null && (y = x);\n              (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n              this.add(x, 0, 0, y, 0, 0);\n              (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n            };\n            /*\\\n             * Matrix.rotate\n             [ method ]\n             **\n             * Rotates the matrix\n             > Parameters\n             - a (number)\n             - x (number)\n             - y (number)\n            \\*/\n\n\n            matrixproto.rotate = function (a, x, y) {\n              a = R.rad(a);\n              x = x || 0;\n              y = y || 0;\n              var cos = +math.cos(a).toFixed(9),\n                  sin = +math.sin(a).toFixed(9);\n              this.add(cos, sin, -sin, cos, x, y);\n              this.add(1, 0, 0, 1, -x, -y);\n            };\n            /*\\\n             * Matrix.x\n             [ method ]\n             **\n             * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n             > Parameters\n             - x (number)\n             - y (number)\n             = (number) x\n            \\*/\n\n\n            matrixproto.x = function (x, y) {\n              return x * this.a + y * this.c + this.e;\n            };\n            /*\\\n             * Matrix.y\n             [ method ]\n             **\n             * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n             > Parameters\n             - x (number)\n             - y (number)\n             = (number) y\n            \\*/\n\n\n            matrixproto.y = function (x, y) {\n              return x * this.b + y * this.d + this.f;\n            };\n\n            matrixproto.get = function (i) {\n              return +this[Str.fromCharCode(97 + i)].toFixed(4);\n            };\n\n            matrixproto.toString = function () {\n              return R.svg ? \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" : [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n            };\n\n            matrixproto.toFilter = function () {\n              return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) + \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) + \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n            };\n\n            matrixproto.offset = function () {\n              return [this.e.toFixed(4), this.f.toFixed(4)];\n            };\n\n            function norm(a) {\n              return a[0] * a[0] + a[1] * a[1];\n            }\n\n            function normalize(a) {\n              var mag = math.sqrt(norm(a));\n              a[0] && (a[0] /= mag);\n              a[1] && (a[1] /= mag);\n            }\n            /*\\\n             * Matrix.split\n             [ method ]\n             **\n             * Splits matrix into primitive transformations\n             = (object) in format:\n             o dx (number) translation by x\n             o dy (number) translation by y\n             o scalex (number) scale by x\n             o scaley (number) scale by y\n             o shear (number) shear\n             o rotate (number) rotation in deg\n             o isSimple (boolean) could it be represented via simple transformations\n            \\*/\n\n\n            matrixproto.split = function () {\n              var out = {}; // translation\n\n              out.dx = this.e;\n              out.dy = this.f; // scale and shear\n\n              var row = [[this.a, this.c], [this.b, this.d]];\n              out.scalex = math.sqrt(norm(row[0]));\n              normalize(row[0]);\n              out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n              row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n              out.scaley = math.sqrt(norm(row[1]));\n              normalize(row[1]);\n              out.shear /= out.scaley; // rotation\n\n              var sin = -row[0][1],\n                  cos = row[1][1];\n\n              if (cos < 0) {\n                out.rotate = R.deg(math.acos(cos));\n\n                if (sin < 0) {\n                  out.rotate = 360 - out.rotate;\n                }\n              } else {\n                out.rotate = R.deg(math.asin(sin));\n              }\n\n              out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n              out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n              out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n              return out;\n            };\n            /*\\\n             * Matrix.toTransformString\n             [ method ]\n             **\n             * Return transform string that represents given matrix\n             = (string) transform string\n            \\*/\n\n\n            matrixproto.toTransformString = function (shorter) {\n              var s = shorter || this[split]();\n\n              if (s.isSimple) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) + (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) + (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n              } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n              }\n            };\n          })(Matrix.prototype);\n\n          var preventDefault = function preventDefault() {\n            this.returnValue = false;\n          },\n              preventTouch = function preventTouch() {\n            return this.originalEvent.preventDefault();\n          },\n              stopPropagation = function stopPropagation() {\n            this.cancelBubble = true;\n          },\n              stopTouch = function stopTouch() {\n            return this.originalEvent.stopPropagation();\n          },\n              getEventPosition = function getEventPosition(e) {\n            var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n            return {\n              x: e.clientX + scrollX,\n              y: e.clientY + scrollY\n            };\n          },\n              addEvent = function () {\n            if (g.doc.addEventListener) {\n              return function (obj, type, fn, element) {\n                var f = function f(e) {\n                  var pos = getEventPosition(e);\n                  return fn.call(element, e, pos.x, pos.y);\n                };\n\n                obj.addEventListener(type, f, false);\n\n                if (supportsTouch && touchMap[type]) {\n                  var _f = function _f(e) {\n                    var pos = getEventPosition(e),\n                        olde = e;\n\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                      if (e.targetTouches[i].target == obj) {\n                        e = e.targetTouches[i];\n                        e.originalEvent = olde;\n                        e.preventDefault = preventTouch;\n                        e.stopPropagation = stopTouch;\n                        break;\n                      }\n                    }\n\n                    return fn.call(element, e, pos.x, pos.y);\n                  };\n\n                  obj.addEventListener(touchMap[type], _f, false);\n                }\n\n                return function () {\n                  obj.removeEventListener(type, f, false);\n                  if (supportsTouch && touchMap[type]) obj.removeEventListener(touchMap[type], _f, false);\n                  return true;\n                };\n              };\n            } else if (g.doc.attachEvent) {\n              return function (obj, type, fn, element) {\n                var f = function f(e) {\n                  e = e || g.win.event;\n                  var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                      scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n                      x = e.clientX + scrollX,\n                      y = e.clientY + scrollY;\n                  e.preventDefault = e.preventDefault || preventDefault;\n                  e.stopPropagation = e.stopPropagation || stopPropagation;\n                  return fn.call(element, e, x, y);\n                };\n\n                obj.attachEvent(\"on\" + type, f);\n\n                var detacher = function detacher() {\n                  obj.detachEvent(\"on\" + type, f);\n                  return true;\n                };\n\n                return detacher;\n              };\n            }\n          }(),\n              drag = [],\n              dragMove = function dragMove(e) {\n            var x = e.clientX,\n                y = e.clientY,\n                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n                dragi,\n                j = drag.length;\n\n            while (j--) {\n              dragi = drag[j];\n\n              if (supportsTouch && e.touches) {\n                var i = e.touches.length,\n                    touch;\n\n                while (i--) {\n                  touch = e.touches[i];\n\n                  if (touch.identifier == dragi.el._drag.id) {\n                    x = touch.clientX;\n                    y = touch.clientY;\n                    (e.originalEvent ? e.originalEvent : e).preventDefault();\n                    break;\n                  }\n                }\n              } else {\n                e.preventDefault();\n              }\n\n              var node = dragi.el.node,\n                  o,\n                  next = node.nextSibling,\n                  parent = node.parentNode,\n                  display = node.style.display;\n              g.win.opera && parent.removeChild(node);\n              node.style.display = \"none\";\n              o = dragi.el.paper.getElementByPoint(x, y);\n              node.style.display = display;\n              g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n              o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n              x += scrollX;\n              y += scrollY;\n              eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n            }\n          },\n              dragUp = function dragUp(e) {\n            R.unmousemove(dragMove).unmouseup(dragUp);\n            var i = drag.length,\n                dragi;\n\n            while (i--) {\n              dragi = drag[i];\n              dragi.el._drag = {};\n              eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            }\n\n            drag = [];\n          },\n\n          /*\\\n           * Raphael.el\n           [ property (object) ]\n           **\n           * You can add your own method to elements. This is useful when you want to hack default functionality or\n           * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n           * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n           > Usage\n           | Raphael.el.red = function () {\n           |     this.attr({fill: \"#f00\"});\n           | };\n           | // then use it\n           | paper.circle(100, 100, 20).red();\n          \\*/\n          elproto = R.el = {};\n          /*\\\n           * Element.click\n           [ method ]\n           **\n           * Adds event handler for click for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.unclick\n           [ method ]\n           **\n           * Removes event handler for click for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.dblclick\n           [ method ]\n           **\n           * Adds event handler for double click for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.undblclick\n           [ method ]\n           **\n           * Removes event handler for double click for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.mousedown\n           [ method ]\n           **\n           * Adds event handler for mousedown for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.unmousedown\n           [ method ]\n           **\n           * Removes event handler for mousedown for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.mousemove\n           [ method ]\n           **\n           * Adds event handler for mousemove for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.unmousemove\n           [ method ]\n           **\n           * Removes event handler for mousemove for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.mouseout\n           [ method ]\n           **\n           * Adds event handler for mouseout for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.unmouseout\n           [ method ]\n           **\n           * Removes event handler for mouseout for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.mouseover\n           [ method ]\n           **\n           * Adds event handler for mouseover for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.unmouseover\n           [ method ]\n           **\n           * Removes event handler for mouseover for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.mouseup\n           [ method ]\n           **\n           * Adds event handler for mouseup for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.unmouseup\n           [ method ]\n           **\n           * Removes event handler for mouseup for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.touchstart\n           [ method ]\n           **\n           * Adds event handler for touchstart for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.untouchstart\n           [ method ]\n           **\n           * Removes event handler for touchstart for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.touchmove\n           [ method ]\n           **\n           * Adds event handler for touchmove for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.untouchmove\n           [ method ]\n           **\n           * Removes event handler for touchmove for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.touchend\n           [ method ]\n           **\n           * Adds event handler for touchend for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.untouchend\n           [ method ]\n           **\n           * Removes event handler for touchend for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.touchcancel\n           [ method ]\n           **\n           * Adds event handler for touchcancel for the element.\n           > Parameters\n           - handler (function) handler for the event\n           = (object) @Element\n          \\*/\n\n          /*\\\n           * Element.untouchcancel\n           [ method ]\n           **\n           * Removes event handler for touchcancel for the element.\n           > Parameters\n           - handler (function) #optional handler for the event\n           = (object) @Element\n          \\*/\n\n\n          for (var i = events.length; i--;) {\n            (function (eventName) {\n              R[eventName] = elproto[eventName] = function (fn, scope) {\n                if (R.is(fn, \"function\")) {\n                  this.events = this.events || [];\n                  this.events.push({\n                    name: eventName,\n                    f: fn,\n                    unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)\n                  });\n                }\n\n                return this;\n              };\n\n              R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n\n                while (l--) {\n                  if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                  }\n                }\n\n                return this;\n              };\n            })(events[i]);\n          }\n          /*\\\n           * Element.data\n           [ method ]\n           **\n           * Adds or retrieves given value associated with given key.\n           **\n           * See also @Element.removeData\n           > Parameters\n           - key (string) key to store data\n           - value (any) #optional value to store\n           = (object) @Element\n           * or, if value is not specified:\n           = (any) value\n           * or, if key and value are not specified:\n           = (object) Key/value pairs for all the data associated with the element.\n           > Usage\n           | for (var i = 0, i < 5, i++) {\n           |     paper.circle(10 + 15 * i, 10, 10)\n           |          .attr({fill: \"#000\"})\n           |          .data(\"i\", i)\n           |          .click(function () {\n           |             alert(this.data(\"i\"));\n           |          });\n           | }\n          \\*/\n\n\n          elproto.data = function (key, value) {\n            var data = eldata[this.id] = eldata[this.id] || {};\n\n            if (arguments.length == 0) {\n              return data;\n            }\n\n            if (arguments.length == 1) {\n              if (R.is(key, \"object\")) {\n                for (var i in key) {\n                  if (key[has](i)) {\n                    this.data(i, key[i]);\n                  }\n                }\n\n                return this;\n              }\n\n              eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n              return data[key];\n            }\n\n            data[key] = value;\n            eve(\"raphael.data.set.\" + this.id, this, value, key);\n            return this;\n          };\n          /*\\\n           * Element.removeData\n           [ method ]\n           **\n           * Removes value associated with an element by given key.\n           * If key is not provided, removes all the data of the element.\n           > Parameters\n           - key (string) #optional key\n           = (object) @Element\n          \\*/\n\n\n          elproto.removeData = function (key) {\n            if (key == null) {\n              delete eldata[this.id];\n            } else {\n              eldata[this.id] && delete eldata[this.id][key];\n            }\n\n            return this;\n          };\n          /*\\\n          * Element.getData\n          [ method ]\n          **\n          * Retrieves the element data\n          = (object) data\n          \\*/\n\n\n          elproto.getData = function () {\n            return clone(eldata[this.id] || {});\n          };\n          /*\\\n           * Element.hover\n           [ method ]\n           **\n           * Adds event handlers for hover for the element.\n           > Parameters\n           - f_in (function) handler for hover in\n           - f_out (function) handler for hover out\n           - icontext (object) #optional context for hover in handler\n           - ocontext (object) #optional context for hover out handler\n           = (object) @Element\n          \\*/\n\n\n          elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n            return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n          };\n          /*\\\n           * Element.unhover\n           [ method ]\n           **\n           * Removes event handlers for hover for the element.\n           > Parameters\n           - f_in (function) handler for hover in\n           - f_out (function) handler for hover out\n           = (object) @Element\n          \\*/\n\n\n          elproto.unhover = function (f_in, f_out) {\n            return this.unmouseover(f_in).unmouseout(f_out);\n          };\n\n          var draggable = [];\n          /*\\\n           * Element.drag\n           [ method ]\n           **\n           * Adds event handlers for drag of the element.\n           > Parameters\n           - onmove (function) handler for moving\n           - onstart (function) handler for drag start\n           - onend (function) handler for drag end\n           - mcontext (object) #optional context for moving handler\n           - scontext (object) #optional context for drag start handler\n           - econtext (object) #optional context for drag end handler\n           * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n           * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n           * `drag.over.<id>` will be fired as well.\n           *\n           * Start event and start handler will be called in specified context or in context of the element with following parameters:\n           o x (number) x position of the mouse\n           o y (number) y position of the mouse\n           o event (object) DOM event object\n           * Move event and move handler will be called in specified context or in context of the element with following parameters:\n           o dx (number) shift by x from the start point\n           o dy (number) shift by y from the start point\n           o x (number) x position of the mouse\n           o y (number) y position of the mouse\n           o event (object) DOM event object\n           * End event and end handler will be called in specified context or in context of the element with following parameters:\n           o event (object) DOM event object\n           = (object) @Element\n          \\*/\n\n          elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n            function start(e) {\n              (e.originalEvent || e).preventDefault();\n              var x = e.clientX,\n                  y = e.clientY,\n                  scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n                  scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n              this._drag.id = e.identifier;\n\n              if (supportsTouch && e.touches) {\n                var i = e.touches.length,\n                    touch;\n\n                while (i--) {\n                  touch = e.touches[i];\n                  this._drag.id = touch.identifier;\n\n                  if (touch.identifier == this._drag.id) {\n                    x = touch.clientX;\n                    y = touch.clientY;\n                    break;\n                  }\n                }\n              }\n\n              this._drag.x = x + scrollX;\n              this._drag.y = y + scrollY;\n              !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n              drag.push({\n                el: this,\n                move_scope: move_scope,\n                start_scope: start_scope,\n                end_scope: end_scope\n              });\n              onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n              onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n              onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n              eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, this._drag.x, this._drag.y, e);\n            }\n\n            this._drag = {};\n            draggable.push({\n              el: this,\n              start: start\n            });\n            this.mousedown(start);\n            return this;\n          };\n          /*\\\n           * Element.onDragOver\n           [ method ]\n           **\n           * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n           > Parameters\n           - f (function) handler for event, first argument would be the element you are dragging over\n          \\*/\n\n\n          elproto.onDragOver = function (f) {\n            f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n          };\n          /*\\\n           * Element.undrag\n           [ method ]\n           **\n           * Removes all drag event handlers from given element.\n          \\*/\n\n\n          elproto.undrag = function () {\n            var i = draggable.length;\n\n            while (i--) {\n              if (draggable[i].el == this) {\n                this.unmousedown(draggable[i].start);\n                draggable.splice(i, 1);\n                eve.unbind(\"raphael.drag.*.\" + this.id);\n              }\n            }\n\n            !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n            drag = [];\n          };\n          /*\\\n           * Paper.circle\n           [ method ]\n           **\n           * Draws a circle.\n           **\n           > Parameters\n           **\n           - x (number) x coordinate of the centre\n           - y (number) y coordinate of the centre\n           - r (number) radius\n           = (object) Raphaël element object with type “circle”\n           **\n           > Usage\n           | var c = paper.circle(50, 50, 40);\n          \\*/\n\n\n          paperproto.circle = function (x, y, r) {\n            var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\n            this.__set__ && this.__set__.push(out);\n            return out;\n          };\n          /*\\\n           * Paper.rect\n           [ method ]\n           *\n           * Draws a rectangle.\n           **\n           > Parameters\n           **\n           - x (number) x coordinate of the top left corner\n           - y (number) y coordinate of the top left corner\n           - width (number) width\n           - height (number) height\n           - r (number) #optional radius for rounded corners, default is 0\n           = (object) Raphaël element object with type “rect”\n           **\n           > Usage\n           | // regular rectangle\n           | var c = paper.rect(10, 10, 50, 50);\n           | // rectangle with rounded corners\n           | var c = paper.rect(40, 40, 50, 50, 10);\n          \\*/\n\n\n          paperproto.rect = function (x, y, w, h, r) {\n            var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\n            this.__set__ && this.__set__.push(out);\n            return out;\n          };\n          /*\\\n           * Paper.ellipse\n           [ method ]\n           **\n           * Draws an ellipse.\n           **\n           > Parameters\n           **\n           - x (number) x coordinate of the centre\n           - y (number) y coordinate of the centre\n           - rx (number) horizontal radius\n           - ry (number) vertical radius\n           = (object) Raphaël element object with type “ellipse”\n           **\n           > Usage\n           | var c = paper.ellipse(50, 50, 40, 20);\n          \\*/\n\n\n          paperproto.ellipse = function (x, y, rx, ry) {\n            var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\n            this.__set__ && this.__set__.push(out);\n            return out;\n          };\n          /*\\\n           * Paper.path\n           [ method ]\n           **\n           * Creates a path element by given path data string.\n           > Parameters\n           - pathString (string) #optional path string in SVG format.\n           * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n           | \"M10,20L30,40\"\n           * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n           *\n           # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n           # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n           # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n           # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n           # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n           # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n           # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n           # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n           # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n           # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n           # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n           # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n           # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n           * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n           * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n           > Usage\n           | var c = paper.path(\"M10 10L90 90\");\n           | // draw a diagonal line:\n           | // move to 10,10, line to 90,90\n           * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n          \\*/\n\n\n          paperproto.path = function (pathString) {\n            pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\n            var out = R._engine.path(R.format[apply](R, arguments), this);\n\n            this.__set__ && this.__set__.push(out);\n            return out;\n          };\n          /*\\\n           * Paper.image\n           [ method ]\n           **\n           * Embeds an image into the surface.\n           **\n           > Parameters\n           **\n           - src (string) URI of the source image\n           - x (number) x coordinate position\n           - y (number) y coordinate position\n           - width (number) width of the image\n           - height (number) height of the image\n           = (object) Raphaël element object with type “image”\n           **\n           > Usage\n           | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n          \\*/\n\n\n          paperproto.image = function (src, x, y, w, h) {\n            var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\n            this.__set__ && this.__set__.push(out);\n            return out;\n          };\n          /*\\\n           * Paper.text\n           [ method ]\n           **\n           * Draws a text string. If you need line breaks, put “\\n” in the string.\n           **\n           > Parameters\n           **\n           - x (number) x coordinate position\n           - y (number) y coordinate position\n           - text (string) The text string to draw\n           = (object) Raphaël element object with type “text”\n           **\n           > Usage\n           | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n          \\*/\n\n\n          paperproto.text = function (x, y, text) {\n            var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\n            this.__set__ && this.__set__.push(out);\n            return out;\n          };\n          /*\\\n           * Paper.set\n           [ method ]\n           **\n           * Creates array-like object to keep and operate several elements at once.\n           * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n           * Sets act as pseudo elements — all methods available to an element can be used on a set.\n           = (object) array-like object that represents set of elements\n           **\n           > Usage\n           | var st = paper.set();\n           | st.push(\n           |     paper.circle(10, 10, 5),\n           |     paper.circle(30, 10, 5)\n           | );\n           | st.attr({fill: \"red\"}); // changes the fill of both circles\n          \\*/\n\n\n          paperproto.set = function (itemsArray) {\n            !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n            var out = new Set(itemsArray);\n            this.__set__ && this.__set__.push(out);\n            out[\"paper\"] = this;\n            out[\"type\"] = \"set\";\n            return out;\n          };\n          /*\\\n           * Paper.setStart\n           [ method ]\n           **\n           * Creates @Paper.set. All elements that will be created after calling this method and before calling\n           * @Paper.setFinish will be added to the set.\n           **\n           > Usage\n           | paper.setStart();\n           | paper.circle(10, 10, 5),\n           | paper.circle(30, 10, 5)\n           | var st = paper.setFinish();\n           | st.attr({fill: \"red\"}); // changes the fill of both circles\n          \\*/\n\n\n          paperproto.setStart = function (set) {\n            this.__set__ = set || this.set();\n          };\n          /*\\\n           * Paper.setFinish\n           [ method ]\n           **\n           * See @Paper.setStart. This method finishes catching and returns resulting set.\n           **\n           = (object) set\n          \\*/\n\n\n          paperproto.setFinish = function (set) {\n            var out = this.__set__;\n            delete this.__set__;\n            return out;\n          };\n          /*\\\n           * Paper.getSize\n           [ method ]\n           **\n           * Obtains current paper actual size.\n           **\n           = (object)\n           \\*/\n\n\n          paperproto.getSize = function () {\n            var container = this.canvas.parentNode;\n            return {\n              width: container.offsetWidth,\n              height: container.offsetHeight\n            };\n          };\n          /*\\\n           * Paper.setSize\n           [ method ]\n           **\n           * If you need to change dimensions of the canvas call this method\n           **\n           > Parameters\n           **\n           - width (number) new width of the canvas\n           - height (number) new height of the canvas\n          \\*/\n\n\n          paperproto.setSize = function (width, height) {\n            return R._engine.setSize.call(this, width, height);\n          };\n          /*\\\n           * Paper.setViewBox\n           [ method ]\n           **\n           * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n           * specifying new boundaries.\n           **\n           > Parameters\n           **\n           - x (number) new x position, default is `0`\n           - y (number) new y position, default is `0`\n           - w (number) new width of the canvas\n           - h (number) new height of the canvas\n           - fit (boolean) `true` if you want graphics to fit into new boundary box\n          \\*/\n\n\n          paperproto.setViewBox = function (x, y, w, h, fit) {\n            return R._engine.setViewBox.call(this, x, y, w, h, fit);\n          };\n          /*\\\n           * Paper.top\n           [ property ]\n           **\n           * Points to the topmost element on the paper\n          \\*/\n\n          /*\\\n           * Paper.bottom\n           [ property ]\n           **\n           * Points to the bottom element on the paper\n          \\*/\n\n\n          paperproto.top = paperproto.bottom = null;\n          /*\\\n           * Paper.raphael\n           [ property ]\n           **\n           * Points to the @Raphael object/function\n          \\*/\n\n          paperproto.raphael = R;\n\n          var getOffset = function getOffset(elem) {\n            var box = elem.getBoundingClientRect(),\n                doc = elem.ownerDocument,\n                body = doc.body,\n                docElem = doc.documentElement,\n                clientTop = docElem.clientTop || body.clientTop || 0,\n                clientLeft = docElem.clientLeft || body.clientLeft || 0,\n                top = box.top + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop) - clientTop,\n                left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n            return {\n              y: top,\n              x: left\n            };\n          };\n          /*\\\n           * Paper.getElementByPoint\n           [ method ]\n           **\n           * Returns you topmost element under given point.\n           **\n           = (object) Raphaël element object\n           > Parameters\n           **\n           - x (number) x coordinate from the top left corner of the window\n           - y (number) y coordinate from the top left corner of the window\n           > Usage\n           | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n          \\*/\n\n\n          paperproto.getElementByPoint = function (x, y) {\n            var paper = this,\n                svg = paper.canvas,\n                target = g.doc.elementFromPoint(x, y);\n\n            if (g.win.opera && target.tagName == \"svg\") {\n              var so = getOffset(svg),\n                  sr = svg.createSVGRect();\n              sr.x = x - so.x;\n              sr.y = y - so.y;\n              sr.width = sr.height = 1;\n              var hits = svg.getIntersectionList(sr, null);\n\n              if (hits.length) {\n                target = hits[hits.length - 1];\n              }\n            }\n\n            if (!target) {\n              return null;\n            }\n\n            while (target.parentNode && target != svg.parentNode && !target.raphael) {\n              target = target.parentNode;\n            }\n\n            target == paper.canvas.parentNode && (target = svg);\n            target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n            return target;\n          };\n          /*\\\n           * Paper.getElementsByBBox\n           [ method ]\n           **\n           * Returns set of elements that have an intersecting bounding box\n           **\n           > Parameters\n           **\n           - bbox (object) bbox to check with\n           = (object) @Set\n           \\*/\n\n\n          paperproto.getElementsByBBox = function (bbox) {\n            var set = this.set();\n            this.forEach(function (el) {\n              if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n                set.push(el);\n              }\n            });\n            return set;\n          };\n          /*\\\n           * Paper.getById\n           [ method ]\n           **\n           * Returns you element by its internal ID.\n           **\n           > Parameters\n           **\n           - id (number) id\n           = (object) Raphaël element object\n          \\*/\n\n\n          paperproto.getById = function (id) {\n            var bot = this.bottom;\n\n            while (bot) {\n              if (bot.id == id) {\n                return bot;\n              }\n\n              bot = bot.next;\n            }\n\n            return null;\n          };\n          /*\\\n           * Paper.forEach\n           [ method ]\n           **\n           * Executes given function for each element on the paper\n           *\n           * If callback function returns `false` it will stop loop running.\n           **\n           > Parameters\n           **\n           - callback (function) function to run\n           - thisArg (object) context object for the callback\n           = (object) Paper object\n           > Usage\n           | paper.forEach(function (el) {\n           |     el.attr({ stroke: \"blue\" });\n           | });\n          \\*/\n\n\n          paperproto.forEach = function (callback, thisArg) {\n            var bot = this.bottom;\n\n            while (bot) {\n              if (callback.call(thisArg, bot) === false) {\n                return this;\n              }\n\n              bot = bot.next;\n            }\n\n            return this;\n          };\n          /*\\\n           * Paper.getElementsByPoint\n           [ method ]\n           **\n           * Returns set of elements that have common point inside\n           **\n           > Parameters\n           **\n           - x (number) x coordinate of the point\n           - y (number) y coordinate of the point\n           = (object) @Set\n          \\*/\n\n\n          paperproto.getElementsByPoint = function (x, y) {\n            var set = this.set();\n            this.forEach(function (el) {\n              if (el.isPointInside(x, y)) {\n                set.push(el);\n              }\n            });\n            return set;\n          };\n\n          function x_y() {\n            return this.x + S + this.y;\n          }\n\n          function x_y_w_h() {\n            return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n          }\n          /*\\\n           * Element.isPointInside\n           [ method ]\n           **\n           * Determine if given point is inside this element’s shape\n           **\n           > Parameters\n           **\n           - x (number) x coordinate of the point\n           - y (number) y coordinate of the point\n           = (boolean) `true` if point inside the shape\n          \\*/\n\n\n          elproto.isPointInside = function (x, y) {\n            var rp = this.realPath = getPath[this.type](this);\n\n            if (this.attr('transform') && this.attr('transform').length) {\n              rp = R.transformPath(rp, this.attr('transform'));\n            }\n\n            return R.isPointInsidePath(rp, x, y);\n          };\n          /*\\\n           * Element.getBBox\n           [ method ]\n           **\n           * Return bounding box for a given element\n           **\n           > Parameters\n           **\n           - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n           = (object) Bounding box object:\n           o {\n           o     x: (number) top left corner x\n           o     y: (number) top left corner y\n           o     x2: (number) bottom right corner x\n           o     y2: (number) bottom right corner y\n           o     width: (number) width\n           o     height: (number) height\n           o }\n          \\*/\n\n\n          elproto.getBBox = function (isWithoutTransform) {\n            if (this.removed) {\n              return {};\n            }\n\n            var _ = this._;\n\n            if (isWithoutTransform) {\n              if (_.dirty || !_.bboxwt) {\n                this.realPath = getPath[this.type](this);\n                _.bboxwt = pathDimensions(this.realPath);\n                _.bboxwt.toString = x_y_w_h;\n                _.dirty = 0;\n              }\n\n              return _.bboxwt;\n            }\n\n            if (_.dirty || _.dirtyT || !_.bbox) {\n              if (_.dirty || !this.realPath) {\n                _.bboxwt = 0;\n                this.realPath = getPath[this.type](this);\n              }\n\n              _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n              _.bbox.toString = x_y_w_h;\n              _.dirty = _.dirtyT = 0;\n            }\n\n            return _.bbox;\n          };\n          /*\\\n           * Element.clone\n           [ method ]\n           **\n           = (object) clone of a given element\n           **\n          \\*/\n\n\n          elproto.clone = function () {\n            if (this.removed) {\n              return null;\n            }\n\n            var out = this.paper[this.type]().attr(this.attr());\n            this.__set__ && this.__set__.push(out);\n            return out;\n          };\n          /*\\\n           * Element.glow\n           [ method ]\n           **\n           * Return set of elements that create glow-like effect around given element. See @Paper.set.\n           *\n           * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n           **\n           > Parameters\n           **\n           - glow (object) #optional parameters object with all properties optional:\n           o {\n           o     width (number) size of the glow, default is `10`\n           o     fill (boolean) will it be filled, default is `false`\n           o     opacity (number) opacity, default is `0.5`\n           o     offsetx (number) horizontal offset, default is `0`\n           o     offsety (number) vertical offset, default is `0`\n           o     color (string) glow colour, default is `black`\n           o }\n           = (object) @Paper.set of elements that represents glow\n          \\*/\n\n\n          elproto.glow = function (glow) {\n            if (this.type == \"text\") {\n              return null;\n            }\n\n            glow = glow || {};\n            var s = {\n              width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n              fill: glow.fill || false,\n              opacity: glow.opacity == null ? .5 : glow.opacity,\n              offsetx: glow.offsetx || 0,\n              offsety: glow.offsety || 0,\n              color: glow.color || \"#000\"\n            },\n                c = s.width / 2,\n                r = this.paper,\n                out = r.set(),\n                path = this.realPath || getPath[this.type](this);\n            path = this.matrix ? mapPath(path, this.matrix) : path;\n\n            for (var i = 1; i < c + 1; i++) {\n              out.push(r.path(path).attr({\n                stroke: s.color,\n                fill: s.fill ? s.color : \"none\",\n                \"stroke-linejoin\": \"round\",\n                \"stroke-linecap\": \"round\",\n                \"stroke-width\": +(s.width / c * i).toFixed(3),\n                opacity: +(s.opacity / c).toFixed(3)\n              }));\n            }\n\n            return out.insertBefore(this).translate(s.offsetx, s.offsety);\n          };\n\n          var curveslengths = {},\n              getPointAtSegmentLength = function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n            if (length == null) {\n              return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n            } else {\n              return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n            }\n          },\n              getLengthFactory = function getLengthFactory(istotal, subpath) {\n            return function (path, length, onlystart) {\n              path = path2curve(path);\n              var x,\n                  y,\n                  p,\n                  l,\n                  sp = \"\",\n                  subpaths = {},\n                  point,\n                  len = 0;\n\n              for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n\n                if (p[0] == \"M\") {\n                  x = +p[1];\n                  y = +p[2];\n                } else {\n                  l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\n                  if (len + l > length) {\n                    if (subpath && !subpaths.start) {\n                      point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                      sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\n                      if (onlystart) {\n                        return sp;\n                      }\n\n                      subpaths.start = sp;\n                      sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n                      len += l;\n                      x = +p[5];\n                      y = +p[6];\n                      continue;\n                    }\n\n                    if (!istotal && !subpath) {\n                      point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                      return {\n                        x: point.x,\n                        y: point.y,\n                        alpha: point.alpha\n                      };\n                    }\n                  }\n\n                  len += l;\n                  x = +p[5];\n                  y = +p[6];\n                }\n\n                sp += p.shift() + p;\n              }\n\n              subpaths.end = sp;\n              point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n              point.alpha && (point = {\n                x: point.x,\n                y: point.y,\n                alpha: point.alpha\n              });\n              return point;\n            };\n          };\n\n          var getTotalLength = getLengthFactory(1),\n              getPointAtLength = getLengthFactory(),\n              getSubpathsAtLength = getLengthFactory(0, 1);\n          /*\\\n           * Raphael.getTotalLength\n           [ method ]\n           **\n           * Returns length of the given path in pixels.\n           **\n           > Parameters\n           **\n           - path (string) SVG path string.\n           **\n           = (number) length.\n          \\*/\n\n          R.getTotalLength = getTotalLength;\n          /*\\\n           * Raphael.getPointAtLength\n           [ method ]\n           **\n           * Return coordinates of the point located at the given length on the given path.\n           **\n           > Parameters\n           **\n           - path (string) SVG path string\n           - length (number)\n           **\n           = (object) representation of the point:\n           o {\n           o     x: (number) x coordinate\n           o     y: (number) y coordinate\n           o     alpha: (number) angle of derivative\n           o }\n          \\*/\n\n          R.getPointAtLength = getPointAtLength;\n          /*\\\n           * Raphael.getSubpath\n           [ method ]\n           **\n           * Return subpath of a given path from given length to given length.\n           **\n           > Parameters\n           **\n           - path (string) SVG path string\n           - from (number) position of the start of the segment\n           - to (number) position of the end of the segment\n           **\n           = (string) pathstring for the segment\n          \\*/\n\n          R.getSubpath = function (path, from, to) {\n            if (this.getTotalLength(path) - to < 1e-6) {\n              return getSubpathsAtLength(path, from).end;\n            }\n\n            var a = getSubpathsAtLength(path, to, 1);\n            return from ? getSubpathsAtLength(a, from).end : a;\n          };\n          /*\\\n           * Element.getTotalLength\n           [ method ]\n           **\n           * Returns length of the path in pixels. Only works for element of “path” type.\n           = (number) length.\n          \\*/\n\n\n          elproto.getTotalLength = function () {\n            var path = this.getPath();\n\n            if (!path) {\n              return;\n            }\n\n            if (this.node.getTotalLength) {\n              return this.node.getTotalLength();\n            }\n\n            return getTotalLength(path);\n          };\n          /*\\\n           * Element.getPointAtLength\n           [ method ]\n           **\n           * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n           **\n           > Parameters\n           **\n           - length (number)\n           **\n           = (object) representation of the point:\n           o {\n           o     x: (number) x coordinate\n           o     y: (number) y coordinate\n           o     alpha: (number) angle of derivative\n           o }\n          \\*/\n\n\n          elproto.getPointAtLength = function (length) {\n            var path = this.getPath();\n\n            if (!path) {\n              return;\n            }\n\n            return getPointAtLength(path, length);\n          };\n          /*\\\n           * Element.getPath\n           [ method ]\n           **\n           * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n           = (object) path\n           **\n          \\*/\n\n\n          elproto.getPath = function () {\n            var path,\n                getPath = R._getPath[this.type];\n\n            if (this.type == \"text\" || this.type == \"set\") {\n              return;\n            }\n\n            if (getPath) {\n              path = getPath(this);\n            }\n\n            return path;\n          };\n          /*\\\n           * Element.getSubpath\n           [ method ]\n           **\n           * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n           **\n           > Parameters\n           **\n           - from (number) position of the start of the segment\n           - to (number) position of the end of the segment\n           **\n           = (string) pathstring for the segment\n          \\*/\n\n\n          elproto.getSubpath = function (from, to) {\n            var path = this.getPath();\n\n            if (!path) {\n              return;\n            }\n\n            return R.getSubpath(path, from, to);\n          };\n          /*\\\n           * Raphael.easing_formulas\n           [ property ]\n           **\n           * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n           # <ul>\n           #     <li>“linear”</li>\n           #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n           #     <li>“>” or “easeOut” or “ease-out”</li>\n           #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n           #     <li>“backIn” or “back-in”</li>\n           #     <li>“backOut” or “back-out”</li>\n           #     <li>“elastic”</li>\n           #     <li>“bounce”</li>\n           # </ul>\n           # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n          \\*/\n\n\n          var ef = R.easing_formulas = {\n            linear: function linear(n) {\n              return n;\n            },\n            \"<\": function _(n) {\n              return pow(n, 1.7);\n            },\n            \">\": function _(n) {\n              return pow(n, .48);\n            },\n            \"<>\": function _(n) {\n              var q = .48 - n / 1.04,\n                  Q = math.sqrt(.1734 + q * q),\n                  x = Q - q,\n                  X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n                  y = -Q - q,\n                  Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n                  t = X + Y + .5;\n              return (1 - t) * 3 * t * t + t * t * t;\n            },\n            backIn: function backIn(n) {\n              var s = 1.70158;\n              return n * n * ((s + 1) * n - s);\n            },\n            backOut: function backOut(n) {\n              n = n - 1;\n              var s = 1.70158;\n              return n * n * ((s + 1) * n + s) + 1;\n            },\n            elastic: function elastic(n) {\n              if (n == !!n) {\n                return n;\n              }\n\n              return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n            },\n            bounce: function bounce(n) {\n              var s = 7.5625,\n                  p = 2.75,\n                  l;\n\n              if (n < 1 / p) {\n                l = s * n * n;\n              } else {\n                if (n < 2 / p) {\n                  n -= 1.5 / p;\n                  l = s * n * n + .75;\n                } else {\n                  if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                  } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                  }\n                }\n              }\n\n              return l;\n            }\n          };\n          ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n          ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n          ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n          ef[\"back-in\"] = ef.backIn;\n          ef[\"back-out\"] = ef.backOut;\n\n          var animationElements = [],\n              requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n            setTimeout(callback, 16);\n          },\n              animation = function animation() {\n            var Now = +new Date(),\n                l = 0;\n\n            for (; l < animationElements.length; l++) {\n              var e = animationElements[l];\n\n              if (e.el.removed || e.paused) {\n                continue;\n              }\n\n              var time = Now - e.start,\n                  ms = e.ms,\n                  easing = e.easing,\n                  from = e.from,\n                  diff = e.diff,\n                  to = e.to,\n                  t = e.t,\n                  that = e.el,\n                  set = {},\n                  now,\n                  init = {},\n                  key;\n\n              if (e.initstatus) {\n                time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n                e.status = e.initstatus;\n                delete e.initstatus;\n                e.stop && animationElements.splice(l--, 1);\n              } else {\n                e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n              }\n\n              if (time < 0) {\n                continue;\n              }\n\n              if (time < ms) {\n                var pos = easing(time / ms);\n\n                for (var attr in from) {\n                  if (from[has](attr)) {\n                    switch (availableAnimAttrs[attr]) {\n                      case nu:\n                        now = +from[attr] + pos * ms * diff[attr];\n                        break;\n\n                      case \"colour\":\n                        now = \"rgb(\" + [upto255(round(from[attr].r + pos * ms * diff[attr].r)), upto255(round(from[attr].g + pos * ms * diff[attr].g)), upto255(round(from[attr].b + pos * ms * diff[attr].b))].join(\",\") + \")\";\n                        break;\n\n                      case \"path\":\n                        now = [];\n\n                        for (var i = 0, ii = from[attr].length; i < ii; i++) {\n                          now[i] = [from[attr][i][0]];\n\n                          for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n                            now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n                          }\n\n                          now[i] = now[i].join(S);\n                        }\n\n                        now = now.join(S);\n                        break;\n\n                      case \"transform\":\n                        if (diff[attr].real) {\n                          now = [];\n\n                          for (i = 0, ii = from[attr].length; i < ii; i++) {\n                            now[i] = [from[attr][i][0]];\n\n                            for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n                              now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n                            }\n                          }\n                        } else {\n                          var get = function get(i) {\n                            return +from[attr][i] + pos * ms * diff[attr][i];\n                          }; // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\n\n                          now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n                        }\n\n                        break;\n\n                      case \"csv\":\n                        if (attr == \"clip-rect\") {\n                          now = [];\n                          i = 4;\n\n                          while (i--) {\n                            now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n                          }\n                        }\n\n                        break;\n\n                      default:\n                        var from2 = [][concat](from[attr]);\n                        now = [];\n                        i = that.paper.customAttributes[attr].length;\n\n                        while (i--) {\n                          now[i] = +from2[i] + pos * ms * diff[attr][i];\n                        }\n\n                        break;\n                    }\n\n                    set[attr] = now;\n                  }\n                }\n\n                that.attr(set);\n\n                (function (id, that, anim) {\n                  setTimeout(function () {\n                    eve(\"raphael.anim.frame.\" + id, that, anim);\n                  });\n                })(that.id, that, e.anim);\n              } else {\n                (function (f, el, a) {\n                  setTimeout(function () {\n                    eve(\"raphael.anim.frame.\" + el.id, el, a);\n                    eve(\"raphael.anim.finish.\" + el.id, el, a);\n                    R.is(f, \"function\") && f.call(el);\n                  });\n                })(e.callback, that, e.anim);\n\n                that.attr(to);\n                animationElements.splice(l--, 1);\n\n                if (e.repeat > 1 && !e.next) {\n                  for (key in to) {\n                    if (to[has](key)) {\n                      init[key] = e.totalOrigin[key];\n                    }\n                  }\n\n                  e.el.attr(init);\n                  runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n                }\n\n                if (e.next && !e.stop) {\n                  runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n                }\n              }\n            }\n\n            animationElements.length && requestAnimFrame(animation);\n          },\n              upto255 = function upto255(color) {\n            return color > 255 ? 255 : color < 0 ? 0 : color;\n          };\n          /*\\\n           * Element.animateWith\n           [ method ]\n           **\n           * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n           **\n           > Parameters\n           **\n           - el (object) element to sync with\n           - anim (object) animation to sync with\n           - params (object) #optional final attributes for the element, see also @Element.attr\n           - ms (number) #optional number of milliseconds for animation to run\n           - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n           - callback (function) #optional callback function. Will be called at the end of animation.\n           * or\n           - element (object) element to sync with\n           - anim (object) animation to sync with\n           - animation (object) #optional animation object, see @Raphael.animation\n           **\n           = (object) original element\n          \\*/\n\n\n          elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n            var element = this;\n\n            if (element.removed) {\n              callback && callback.call(element);\n              return element;\n            }\n\n            var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n                x,\n                y;\n            runAnimation(a, element, a.percents[0], null, element.attr());\n\n            for (var i = 0, ii = animationElements.length; i < ii; i++) {\n              if (animationElements[i].anim == anim && animationElements[i].el == el) {\n                animationElements[ii - 1].start = animationElements[i].start;\n                break;\n              }\n            }\n\n            return element; //\n            //\n            // var a = params ? R.animation(params, ms, easing, callback) : anim,\n            //     status = element.status(anim);\n            // return this.animate(a).status(a, status * anim.ms / a.ms);\n          };\n\n          function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n            var cx = 3 * p1x,\n                bx = 3 * (p2x - p1x) - cx,\n                ax = 1 - cx - bx,\n                cy = 3 * p1y,\n                by = 3 * (p2y - p1y) - cy,\n                ay = 1 - cy - by;\n\n            function sampleCurveX(t) {\n              return ((ax * t + bx) * t + cx) * t;\n            }\n\n            function solve(x, epsilon) {\n              var t = solveCurveX(x, epsilon);\n              return ((ay * t + by) * t + cy) * t;\n            }\n\n            function solveCurveX(x, epsilon) {\n              var t0, t1, t2, x2, d2, i;\n\n              for (t2 = x, i = 0; i < 8; i++) {\n                x2 = sampleCurveX(t2) - x;\n\n                if (abs(x2) < epsilon) {\n                  return t2;\n                }\n\n                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\n                if (abs(d2) < 1e-6) {\n                  break;\n                }\n\n                t2 = t2 - x2 / d2;\n              }\n\n              t0 = 0;\n              t1 = 1;\n              t2 = x;\n\n              if (t2 < t0) {\n                return t0;\n              }\n\n              if (t2 > t1) {\n                return t1;\n              }\n\n              while (t0 < t1) {\n                x2 = sampleCurveX(t2);\n\n                if (abs(x2 - x) < epsilon) {\n                  return t2;\n                }\n\n                if (x > x2) {\n                  t0 = t2;\n                } else {\n                  t1 = t2;\n                }\n\n                t2 = (t1 - t0) / 2 + t0;\n              }\n\n              return t2;\n            }\n\n            return solve(t, 1 / (200 * duration));\n          }\n\n          elproto.onAnimation = function (f) {\n            f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n            return this;\n          };\n\n          function Animation(anim, ms) {\n            var percents = [],\n                newAnim = {};\n            this.ms = ms;\n            this.times = 1;\n\n            if (anim) {\n              for (var attr in anim) {\n                if (anim[has](attr)) {\n                  newAnim[toFloat(attr)] = anim[attr];\n                  percents.push(toFloat(attr));\n                }\n              }\n\n              percents.sort(sortByNumber);\n            }\n\n            this.anim = newAnim;\n            this.top = percents[percents.length - 1];\n            this.percents = percents;\n          }\n          /*\\\n           * Animation.delay\n           [ method ]\n           **\n           * Creates a copy of existing animation object with given delay.\n           **\n           > Parameters\n           **\n           - delay (number) number of ms to pass between animation start and actual animation\n           **\n           = (object) new altered Animation object\n           | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n           | circle1.animate(anim); // run the given animation immediately\n           | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n          \\*/\n\n\n          Animation.prototype.delay = function (delay) {\n            var a = new Animation(this.anim, this.ms);\n            a.times = this.times;\n            a.del = +delay || 0;\n            return a;\n          };\n          /*\\\n           * Animation.repeat\n           [ method ]\n           **\n           * Creates a copy of existing animation object with given repetition.\n           **\n           > Parameters\n           **\n           - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n           **\n           = (object) new altered Animation object\n          \\*/\n\n\n          Animation.prototype.repeat = function (times) {\n            var a = new Animation(this.anim, this.ms);\n            a.del = this.del;\n            a.times = math.floor(mmax(times, 0)) || 1;\n            return a;\n          };\n\n          function runAnimation(anim, element, percent, status, totalOrigin, times) {\n            percent = toFloat(percent);\n            var params,\n                isInAnim,\n                isInAnimSet,\n                percents = [],\n                next,\n                prev,\n                timestamp,\n                ms = anim.ms,\n                from = {},\n                to = {},\n                diff = {};\n\n            if (status) {\n              for (i = 0, ii = animationElements.length; i < ii; i++) {\n                var e = animationElements[i];\n\n                if (e.el.id == element.id && e.anim == anim) {\n                  if (e.percent != percent) {\n                    animationElements.splice(i, 1);\n                    isInAnimSet = 1;\n                  } else {\n                    isInAnim = e;\n                  }\n\n                  element.attr(e.totalOrigin);\n                  break;\n                }\n              }\n            } else {\n              status = +to; // NaN\n            }\n\n            for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n              if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n                percent = anim.percents[i];\n                prev = anim.percents[i - 1] || 0;\n                ms = ms / anim.top * (percent - prev);\n                next = anim.percents[i + 1];\n                params = anim.anim[percent];\n                break;\n              } else if (status) {\n                element.attr(anim.anim[anim.percents[i]]);\n              }\n            }\n\n            if (!params) {\n              return;\n            }\n\n            if (!isInAnim) {\n              for (var attr in params) {\n                if (params[has](attr)) {\n                  if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n                    from[attr] = element.attr(attr);\n                    from[attr] == null && (from[attr] = availableAttrs[attr]);\n                    to[attr] = params[attr];\n\n                    switch (availableAnimAttrs[attr]) {\n                      case nu:\n                        diff[attr] = (to[attr] - from[attr]) / ms;\n                        break;\n\n                      case \"colour\":\n                        from[attr] = R.getRGB(from[attr]);\n                        var toColour = R.getRGB(to[attr]);\n                        diff[attr] = {\n                          r: (toColour.r - from[attr].r) / ms,\n                          g: (toColour.g - from[attr].g) / ms,\n                          b: (toColour.b - from[attr].b) / ms\n                        };\n                        break;\n\n                      case \"path\":\n                        var pathes = path2curve(from[attr], to[attr]),\n                            toPath = pathes[1];\n                        from[attr] = pathes[0];\n                        diff[attr] = [];\n\n                        for (i = 0, ii = from[attr].length; i < ii; i++) {\n                          diff[attr][i] = [0];\n\n                          for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n                            diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n                          }\n                        }\n\n                        break;\n\n                      case \"transform\":\n                        var _ = element._,\n                            eq = equaliseTransform(_[attr], to[attr]);\n\n                        if (eq) {\n                          from[attr] = eq.from;\n                          to[attr] = eq.to;\n                          diff[attr] = [];\n                          diff[attr].real = true;\n\n                          for (i = 0, ii = from[attr].length; i < ii; i++) {\n                            diff[attr][i] = [from[attr][i][0]];\n\n                            for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n                              diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n                            }\n                          }\n                        } else {\n                          var m = element.matrix || new Matrix(),\n                              to2 = {\n                            _: {\n                              transform: _.transform\n                            },\n                            getBBox: function getBBox() {\n                              return element.getBBox(1);\n                            }\n                          };\n                          from[attr] = [m.a, m.b, m.c, m.d, m.e, m.f];\n                          extractTransform(to2, to[attr]);\n                          to[attr] = to2._.transform;\n                          diff[attr] = [(to2.matrix.a - m.a) / ms, (to2.matrix.b - m.b) / ms, (to2.matrix.c - m.c) / ms, (to2.matrix.d - m.d) / ms, (to2.matrix.e - m.e) / ms, (to2.matrix.f - m.f) / ms]; // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n                          // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n                          // extractTransform(to2, to[attr]);\n                          // diff[attr] = [\n                          //     (to2._.sx - _.sx) / ms,\n                          //     (to2._.sy - _.sy) / ms,\n                          //     (to2._.deg - _.deg) / ms,\n                          //     (to2._.dx - _.dx) / ms,\n                          //     (to2._.dy - _.dy) / ms\n                          // ];\n                        }\n\n                        break;\n\n                      case \"csv\":\n                        var values = Str(params[attr])[split](separator),\n                            from2 = Str(from[attr])[split](separator);\n\n                        if (attr == \"clip-rect\") {\n                          from[attr] = from2;\n                          diff[attr] = [];\n                          i = from2.length;\n\n                          while (i--) {\n                            diff[attr][i] = (values[i] - from[attr][i]) / ms;\n                          }\n                        }\n\n                        to[attr] = values;\n                        break;\n\n                      default:\n                        values = [][concat](params[attr]);\n                        from2 = [][concat](from[attr]);\n                        diff[attr] = [];\n                        i = element.paper.customAttributes[attr].length;\n\n                        while (i--) {\n                          diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n                        }\n\n                        break;\n                    }\n                  }\n                }\n              }\n\n              var easing = params.easing,\n                  easyeasy = R.easing_formulas[easing];\n\n              if (!easyeasy) {\n                easyeasy = Str(easing).match(bezierrg);\n\n                if (easyeasy && easyeasy.length == 5) {\n                  var curve = easyeasy;\n\n                  easyeasy = function easyeasy(t) {\n                    return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n                  };\n                } else {\n                  easyeasy = pipe;\n                }\n              }\n\n              timestamp = params.start || anim.start || +new Date();\n              e = {\n                anim: anim,\n                percent: percent,\n                timestamp: timestamp,\n                start: timestamp + (anim.del || 0),\n                status: 0,\n                initstatus: status || 0,\n                stop: false,\n                ms: ms,\n                easing: easyeasy,\n                from: from,\n                diff: diff,\n                to: to,\n                el: element,\n                callback: params.callback,\n                prev: prev,\n                next: next,\n                repeat: times || anim.times,\n                origin: element.attr(),\n                totalOrigin: totalOrigin\n              };\n              animationElements.push(e);\n\n              if (status && !isInAnim && !isInAnimSet) {\n                e.stop = true;\n                e.start = new Date() - ms * status;\n\n                if (animationElements.length == 1) {\n                  return animation();\n                }\n              }\n\n              if (isInAnimSet) {\n                e.start = new Date() - e.ms * status;\n              }\n\n              animationElements.length == 1 && requestAnimFrame(animation);\n            } else {\n              isInAnim.initstatus = status;\n              isInAnim.start = new Date() - isInAnim.ms * status;\n            }\n\n            eve(\"raphael.anim.start.\" + element.id, element, anim);\n          }\n          /*\\\n           * Raphael.animation\n           [ method ]\n           **\n           * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n           * See also @Animation.delay and @Animation.repeat methods.\n           **\n           > Parameters\n           **\n           - params (object) final attributes for the element, see also @Element.attr\n           - ms (number) number of milliseconds for animation to run\n           - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n           - callback (function) #optional callback function. Will be called at the end of animation.\n           **\n           = (object) @Animation\n          \\*/\n\n\n          R.animation = function (params, ms, easing, callback) {\n            if (params instanceof Animation) {\n              return params;\n            }\n\n            if (R.is(easing, \"function\") || !easing) {\n              callback = callback || easing || null;\n              easing = null;\n            }\n\n            params = Object(params);\n            ms = +ms || 0;\n            var p = {},\n                json,\n                attr;\n\n            for (attr in params) {\n              if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n                json = true;\n                p[attr] = params[attr];\n              }\n            }\n\n            if (!json) {\n              // if percent-like syntax is used and end-of-all animation callback used\n              if (callback) {\n                // find the last one\n                var lastKey = 0;\n\n                for (var i in params) {\n                  var percent = toInt(i);\n\n                  if (params[has](i) && percent > lastKey) {\n                    lastKey = percent;\n                  }\n                }\n\n                lastKey += '%'; // if already defined callback in the last keyframe, skip\n\n                !params[lastKey].callback && (params[lastKey].callback = callback);\n              }\n\n              return new Animation(params, ms);\n            } else {\n              easing && (p.easing = easing);\n              callback && (p.callback = callback);\n              return new Animation({\n                100: p\n              }, ms);\n            }\n          };\n          /*\\\n           * Element.animate\n           [ method ]\n           **\n           * Creates and starts animation for given element.\n           **\n           > Parameters\n           **\n           - params (object) final attributes for the element, see also @Element.attr\n           - ms (number) number of milliseconds for animation to run\n           - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n           - callback (function) #optional callback function. Will be called at the end of animation.\n           * or\n           - animation (object) animation object, see @Raphael.animation\n           **\n           = (object) original element\n          \\*/\n\n\n          elproto.animate = function (params, ms, easing, callback) {\n            var element = this;\n\n            if (element.removed) {\n              callback && callback.call(element);\n              return element;\n            }\n\n            var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n            runAnimation(anim, element, anim.percents[0], null, element.attr());\n            return element;\n          };\n          /*\\\n           * Element.setTime\n           [ method ]\n           **\n           * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n           **\n           > Parameters\n           **\n           - anim (object) animation object\n           - value (number) number of milliseconds from the beginning of the animation\n           **\n           = (object) original element if `value` is specified\n           * Note, that during animation following events are triggered:\n           *\n           * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n          \\*/\n\n\n          elproto.setTime = function (anim, value) {\n            if (anim && value != null) {\n              this.status(anim, mmin(value, anim.ms) / anim.ms);\n            }\n\n            return this;\n          };\n          /*\\\n           * Element.status\n           [ method ]\n           **\n           * Gets or sets the status of animation of the element.\n           **\n           > Parameters\n           **\n           - anim (object) #optional animation object\n           - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n           **\n           = (number) status\n           * or\n           = (array) status if `anim` is not specified. Array of objects in format:\n           o {\n           o     anim: (object) animation object\n           o     status: (number) status\n           o }\n           * or\n           = (object) original element if `value` is specified\n          \\*/\n\n\n          elproto.status = function (anim, value) {\n            var out = [],\n                i = 0,\n                len,\n                e;\n\n            if (value != null) {\n              runAnimation(anim, this, -1, mmin(value, 1));\n              return this;\n            } else {\n              len = animationElements.length;\n\n              for (; i < len; i++) {\n                e = animationElements[i];\n\n                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n                  if (anim) {\n                    return e.status;\n                  }\n\n                  out.push({\n                    anim: e.anim,\n                    status: e.status\n                  });\n                }\n              }\n\n              if (anim) {\n                return 0;\n              }\n\n              return out;\n            }\n          };\n          /*\\\n           * Element.pause\n           [ method ]\n           **\n           * Stops animation of the element with ability to resume it later on.\n           **\n           > Parameters\n           **\n           - anim (object) #optional animation object\n           **\n           = (object) original element\n          \\*/\n\n\n          elproto.pause = function (anim) {\n            for (var i = 0; i < animationElements.length; i++) {\n              if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n                if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n                  animationElements[i].paused = true;\n                }\n              }\n            }\n\n            return this;\n          };\n          /*\\\n           * Element.resume\n           [ method ]\n           **\n           * Resumes animation if it was paused with @Element.pause method.\n           **\n           > Parameters\n           **\n           - anim (object) #optional animation object\n           **\n           = (object) original element\n          \\*/\n\n\n          elproto.resume = function (anim) {\n            for (var i = 0; i < animationElements.length; i++) {\n              if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n                var e = animationElements[i];\n\n                if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n                  delete e.paused;\n                  this.status(e.anim, e.status);\n                }\n              }\n            }\n\n            return this;\n          };\n          /*\\\n           * Element.stop\n           [ method ]\n           **\n           * Stops animation of the element.\n           **\n           > Parameters\n           **\n           - anim (object) #optional animation object\n           **\n           = (object) original element\n          \\*/\n\n\n          elproto.stop = function (anim) {\n            for (var i = 0; i < animationElements.length; i++) {\n              if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n                if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n                  animationElements.splice(i--, 1);\n                }\n              }\n            }\n\n            return this;\n          };\n\n          function stopAnimation(paper) {\n            for (var i = 0; i < animationElements.length; i++) {\n              if (animationElements[i].el.paper == paper) {\n                animationElements.splice(i--, 1);\n              }\n            }\n          }\n\n          eve.on(\"raphael.remove\", stopAnimation);\n          eve.on(\"raphael.clear\", stopAnimation);\n\n          elproto.toString = function () {\n            return \"Rapha\\xEBl\\u2019s object\";\n          }; // Set\n\n\n          var Set = function Set(items) {\n            this.items = [];\n            this.length = 0;\n            this.type = \"set\";\n\n            if (items) {\n              for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n                  this[this.items.length] = this.items[this.items.length] = items[i];\n                  this.length++;\n                }\n              }\n            }\n          },\n              setproto = Set.prototype;\n          /*\\\n           * Set.push\n           [ method ]\n           **\n           * Adds each argument to the current set.\n           = (object) original element\n          \\*/\n\n\n          setproto.push = function () {\n            var item, len;\n\n            for (var i = 0, ii = arguments.length; i < ii; i++) {\n              item = arguments[i];\n\n              if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n              }\n            }\n\n            return this;\n          };\n          /*\\\n           * Set.pop\n           [ method ]\n           **\n           * Removes last element and returns it.\n           = (object) element\n          \\*/\n\n\n          setproto.pop = function () {\n            this.length && delete this[this.length--];\n            return this.items.pop();\n          };\n          /*\\\n           * Set.forEach\n           [ method ]\n           **\n           * Executes given function for each element in the set.\n           *\n           * If function returns `false` it will stop loop running.\n           **\n           > Parameters\n           **\n           - callback (function) function to run\n           - thisArg (object) context object for the callback\n           = (object) Set object\n          \\*/\n\n\n          setproto.forEach = function (callback, thisArg) {\n            for (var i = 0, ii = this.items.length; i < ii; i++) {\n              if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n              }\n            }\n\n            return this;\n          };\n\n          for (var method in elproto) {\n            if (elproto[has](method)) {\n              setproto[method] = function (methodname) {\n                return function () {\n                  var arg = arguments;\n                  return this.forEach(function (el) {\n                    el[methodname][apply](el, arg);\n                  });\n                };\n              }(method);\n            }\n          }\n\n          setproto.attr = function (name, value) {\n            if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n              for (var j = 0, jj = name.length; j < jj; j++) {\n                this.items[j].attr(name[j]);\n              }\n            } else {\n              for (var i = 0, ii = this.items.length; i < ii; i++) {\n                this.items[i].attr(name, value);\n              }\n            }\n\n            return this;\n          };\n          /*\\\n           * Set.clear\n           [ method ]\n           **\n           * Removes all elements from the set\n          \\*/\n\n\n          setproto.clear = function () {\n            while (this.length) {\n              this.pop();\n            }\n          };\n          /*\\\n           * Set.splice\n           [ method ]\n           **\n           * Removes given element from the set\n           **\n           > Parameters\n           **\n           - index (number) position of the deletion\n           - count (number) number of element to remove\n           - insertion… (object) #optional elements to insert\n           = (object) set elements that were deleted\n          \\*/\n\n\n          setproto.splice = function (index, count, insertion) {\n            index = index < 0 ? mmax(this.length + index, 0) : index;\n            count = mmax(0, mmin(this.length - index, count));\n            var tail = [],\n                todel = [],\n                args = [],\n                i;\n\n            for (i = 2; i < arguments.length; i++) {\n              args.push(arguments[i]);\n            }\n\n            for (i = 0; i < count; i++) {\n              todel.push(this[index + i]);\n            }\n\n            for (; i < this.length - index; i++) {\n              tail.push(this[index + i]);\n            }\n\n            var arglen = args.length;\n\n            for (i = 0; i < arglen + tail.length; i++) {\n              this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n            }\n\n            i = this.items.length = this.length -= count - arglen;\n\n            while (this[i]) {\n              delete this[i++];\n            }\n\n            return new Set(todel);\n          };\n          /*\\\n           * Set.exclude\n           [ method ]\n           **\n           * Removes given element from the set\n           **\n           > Parameters\n           **\n           - element (object) element to remove\n           = (boolean) `true` if object was found & removed from the set\n          \\*/\n\n\n          setproto.exclude = function (el) {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n              if (this[i] == el) {\n                this.splice(i, 1);\n                return true;\n              }\n            }\n          };\n\n          setproto.animate = function (params, ms, easing, callback) {\n            (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n            var len = this.items.length,\n                i = len,\n                item,\n                set = this,\n                collector;\n\n            if (!len) {\n              return this;\n            }\n\n            callback && (collector = function collector() {\n              ! --len && callback.call(set);\n            });\n            easing = R.is(easing, string) ? easing : collector;\n            var anim = R.animation(params, ms, easing, collector);\n            item = this.items[--i].animate(anim);\n\n            while (i--) {\n              this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n              this.items[i] && !this.items[i].removed || len--;\n            }\n\n            return this;\n          };\n\n          setproto.insertAfter = function (el) {\n            var i = this.items.length;\n\n            while (i--) {\n              this.items[i].insertAfter(el);\n            }\n\n            return this;\n          };\n\n          setproto.getBBox = function () {\n            var x = [],\n                y = [],\n                x2 = [],\n                y2 = [];\n\n            for (var i = this.items.length; i--;) {\n              if (!this.items[i].removed) {\n                var box = this.items[i].getBBox();\n                x.push(box.x);\n                y.push(box.y);\n                x2.push(box.x + box.width);\n                y2.push(box.y + box.height);\n              }\n            }\n\n            x = mmin[apply](0, x);\n            y = mmin[apply](0, y);\n            x2 = mmax[apply](0, x2);\n            y2 = mmax[apply](0, y2);\n            return {\n              x: x,\n              y: y,\n              x2: x2,\n              y2: y2,\n              width: x2 - x,\n              height: y2 - y\n            };\n          };\n\n          setproto.clone = function (s) {\n            s = this.paper.set();\n\n            for (var i = 0, ii = this.items.length; i < ii; i++) {\n              s.push(this.items[i].clone());\n            }\n\n            return s;\n          };\n\n          setproto.toString = function () {\n            return \"Rapha\\xEBl\\u2018s set\";\n          };\n\n          setproto.glow = function (glowConfig) {\n            var ret = this.paper.set();\n            this.forEach(function (shape, index) {\n              var g = shape.glow(glowConfig);\n\n              if (g != null) {\n                g.forEach(function (shape2, index2) {\n                  ret.push(shape2);\n                });\n              }\n            });\n            return ret;\n          };\n          /*\\\n           * Set.isPointInside\n           [ method ]\n           **\n           * Determine if given point is inside this set’s elements\n           **\n           > Parameters\n           **\n           - x (number) x coordinate of the point\n           - y (number) y coordinate of the point\n           = (boolean) `true` if point is inside any of the set's elements\n           \\*/\n\n\n          setproto.isPointInside = function (x, y) {\n            var isPointInside = false;\n            this.forEach(function (el) {\n              if (el.isPointInside(x, y)) {\n                isPointInside = true;\n                return false; // stop loop\n              }\n            });\n            return isPointInside;\n          };\n          /*\\\n           * Raphael.registerFont\n           [ method ]\n           **\n           * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n           * Returns original parameter, so it could be used with chaining.\n           # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n           **\n           > Parameters\n           **\n           - font (object) the font to register\n           = (object) the font you passed in\n           > Usage\n           | Cufon.registerFont(Raphael.registerFont({…}));\n          \\*/\n\n\n          R.registerFont = function (font) {\n            if (!font.face) {\n              return font;\n            }\n\n            this.fonts = this.fonts || {};\n            var fontcopy = {\n              w: font.w,\n              face: {},\n              glyphs: {}\n            },\n                family = font.face[\"font-family\"];\n\n            for (var prop in font.face) {\n              if (font.face[has](prop)) {\n                fontcopy.face[prop] = font.face[prop];\n              }\n            }\n\n            if (this.fonts[family]) {\n              this.fonts[family].push(fontcopy);\n            } else {\n              this.fonts[family] = [fontcopy];\n            }\n\n            if (!font.svg) {\n              fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\n              for (var glyph in font.glyphs) {\n                if (font.glyphs[has](glyph)) {\n                  var path = font.glyphs[glyph];\n                  fontcopy.glyphs[glyph] = {\n                    w: path.w,\n                    k: {},\n                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n                      return {\n                        l: \"L\",\n                        c: \"C\",\n                        x: \"z\",\n                        t: \"m\",\n                        r: \"l\",\n                        v: \"c\"\n                      }[command] || \"M\";\n                    }) + \"z\"\n                  };\n\n                  if (path.k) {\n                    for (var k in path.k) {\n                      if (path[has](k)) {\n                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            return font;\n          };\n          /*\\\n           * Paper.getFont\n           [ method ]\n           **\n           * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n           **\n           > Parameters\n           **\n           - family (string) font family name or any word from it\n           - weight (string) #optional font weight\n           - style (string) #optional font style\n           - stretch (string) #optional font stretch\n           = (object) the font object\n           > Usage\n           | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n          \\*/\n\n\n          paperproto.getFont = function (family, weight, style, stretch) {\n            stretch = stretch || \"normal\";\n            style = style || \"normal\";\n            weight = +weight || {\n              normal: 400,\n              bold: 700,\n              lighter: 300,\n              bolder: 800\n            }[weight] || 400;\n\n            if (!R.fonts) {\n              return;\n            }\n\n            var font = R.fonts[family];\n\n            if (!font) {\n              var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\n              for (var fontName in R.fonts) {\n                if (R.fonts[has](fontName)) {\n                  if (name.test(fontName)) {\n                    font = R.fonts[fontName];\n                    break;\n                  }\n                }\n              }\n            }\n\n            var thefont;\n\n            if (font) {\n              for (var i = 0, ii = font.length; i < ii; i++) {\n                thefont = font[i];\n\n                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n                  break;\n                }\n              }\n            }\n\n            return thefont;\n          };\n          /*\\\n           * Paper.print\n           [ method ]\n           **\n           * Creates path that represent given text written using given font at given position with given size.\n           * Result of the method is path element that contains whole text as a separate path.\n           **\n           > Parameters\n           **\n           - x (number) x position of the text\n           - y (number) y position of the text\n           - string (string) text to print\n           - font (object) font object, see @Paper.getFont\n           - size (number) #optional size of the font, default is `16`\n           - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n           - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n           - line_spacing (number) #optional number in range `1..3`, default is `1`\n           = (object) resulting path element, which consist of all letters\n           > Usage\n           | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n          \\*/\n\n\n          paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n            origin = origin || \"middle\"; // baseline|middle\n\n            letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n            line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n            var letters = Str(string)[split](E),\n                shift = 0,\n                notfirst = 0,\n                path = E,\n                scale;\n            R.is(font, \"string\") && (font = this.getFont(font));\n\n            if (font) {\n              scale = (size || 16) / font.face[\"units-per-em\"];\n              var bb = font.face.bbox[split](separator),\n                  top = +bb[0],\n                  lineHeight = bb[3] - bb[1],\n                  shifty = 0,\n                  height = +bb[1] + (origin == \"baseline\" ? lineHeight + +font.face.descent : lineHeight / 2);\n\n              for (var i = 0, ii = letters.length; i < ii; i++) {\n                if (letters[i] == \"\\n\") {\n                  shift = 0;\n                  curr = 0;\n                  notfirst = 0;\n                  shifty += lineHeight * line_spacing;\n                } else {\n                  var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n                      curr = font.glyphs[letters[i]];\n                  shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + font.w * letter_spacing : 0;\n                  notfirst = 1;\n                }\n\n                if (curr && curr.d) {\n                  path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n                }\n              }\n            }\n\n            return this.path(path).attr({\n              fill: \"#000\",\n              stroke: \"none\"\n            });\n          };\n          /*\\\n           * Paper.add\n           [ method ]\n           **\n           * Imports elements in JSON array in format `{type: type, <attributes>}`\n           **\n           > Parameters\n           **\n           - json (array)\n           = (object) resulting set of imported elements\n           > Usage\n           | paper.add([\n           |     {\n           |         type: \"circle\",\n           |         cx: 10,\n           |         cy: 10,\n           |         r: 5\n           |     },\n           |     {\n           |         type: \"rect\",\n           |         x: 10,\n           |         y: 10,\n           |         width: 10,\n           |         height: 10,\n           |         fill: \"#fc0\"\n           |     }\n           | ]);\n          \\*/\n\n\n          paperproto.add = function (json) {\n            if (R.is(json, \"array\")) {\n              var res = this.set(),\n                  i = 0,\n                  ii = json.length,\n                  j;\n\n              for (; i < ii; i++) {\n                j = json[i] || {};\n                elements[has](j.type) && res.push(this[j.type]().attr(j));\n              }\n            }\n\n            return res;\n          };\n          /*\\\n           * Raphael.format\n           [ method ]\n           **\n           * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n           **\n           > Parameters\n           **\n           - token (string) string to format\n           - … (string) rest of arguments will be treated as parameters for replacement\n           = (string) formated string\n           > Usage\n           | var x = 10,\n           |     y = 20,\n           |     width = 40,\n           |     height = 50;\n           | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n           | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n          \\*/\n\n\n          R.format = function (token, params) {\n            var args = R.is(params, array) ? [0][concat](params) : arguments;\n            token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n              return args[++i] == null ? E : args[i];\n            }));\n            return token || E;\n          };\n          /*\\\n           * Raphael.fullfill\n           [ method ]\n           **\n           * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n           **\n           > Parameters\n           **\n           - token (string) string to format\n           - json (object) object which properties will be used as a replacement\n           = (string) formated string\n           > Usage\n           | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n           | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n           |     x: 10,\n           |     y: 20,\n           |     dim: {\n           |         width: 40,\n           |         height: 50,\n           |         \"negative width\": -40\n           |     }\n           | }));\n          \\*/\n\n\n          R.fullfill = function () {\n            var tokenRegex = /\\{([^\\}]+)\\}/g,\n                objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g,\n                // matches .xxxxx or [\"xxxxx\"] to run over object properties\n            replacer = function replacer(all, key, obj) {\n              var res = obj;\n              key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n\n                if (res) {\n                  if (name in res) {\n                    res = res[name];\n                  }\n\n                  typeof res == \"function\" && isFunc && (res = res());\n                }\n              });\n              res = (res == null || res == obj ? all : res) + \"\";\n              return res;\n            };\n\n            return function (str, obj) {\n              return String(str).replace(tokenRegex, function (all, key) {\n                return replacer(all, key, obj);\n              });\n            };\n          }();\n          /*\\\n           * Raphael.ninja\n           [ method ]\n           **\n           * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n           * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n           **\n           = (object) Raphael object\n           > Usage\n           | (function (local_raphael) {\n           |     var paper = local_raphael(10, 10, 320, 200);\n           |     …\n           | })(Raphael.ninja());\n          \\*/\n\n\n          R.ninja = function () {\n            if (oldRaphael.was) {\n              g.win.Raphael = oldRaphael.is;\n            } else {\n              // IE8 raises an error when deleting window property\n              window.Raphael = undefined;\n\n              try {\n                delete window.Raphael;\n              } catch (e) {}\n            }\n\n            return R;\n          };\n          /*\\\n           * Raphael.st\n           [ property (object) ]\n           **\n           * You can add your own method to elements and sets. It is wise to add a set method for each element method\n           * you added, so you will be able to call the same method on sets too.\n           **\n           * See also @Raphael.el.\n           > Usage\n           | Raphael.el.red = function () {\n           |     this.attr({fill: \"#f00\"});\n           | };\n           | Raphael.st.red = function () {\n           |     this.forEach(function (el) {\n           |         el.red();\n           |     });\n           | };\n           | // then use it\n           | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n          \\*/\n\n\n          R.st = setproto;\n          eve.on(\"raphael.DOMload\", function () {\n            loaded = true;\n          }); // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\n          (function (doc, loaded, _f2) {\n            if (doc.readyState == null && doc.addEventListener) {\n              doc.addEventListener(loaded, _f2 = function f() {\n                doc.removeEventListener(loaded, _f2, false);\n                doc.readyState = \"complete\";\n              }, false);\n              doc.readyState = \"loading\";\n            }\n\n            function isLoaded() {\n              /in/.test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n            }\n\n            isLoaded();\n          })(document, \"DOMContentLoaded\");\n\n          return R;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        /***/\n      },\n\n      /***/\n      \"./dev/raphael.svg.js\":\n      /*!****************************!*\\\n        !*** ./dev/raphael.svg.js ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function devRaphaelSvgJs(module, exports, __nested_webpack_require_218764__) {\n        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__nested_webpack_require_218764__(\n        /*! ./raphael.core */\n        \"./dev/raphael.core.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = function (R) {\n          if (R && !R.svg) {\n            return;\n          }\n\n          var has = \"hasOwnProperty\",\n              Str = String,\n              toFloat = parseFloat,\n              toInt = parseInt,\n              math = Math,\n              mmax = math.max,\n              abs = math.abs,\n              pow = math.pow,\n              separator = /[, ]+/,\n              eve = R.eve,\n              E = \"\",\n              S = \" \";\n          var xlink = \"http://www.w3.org/1999/xlink\",\n              markers = {\n            block: \"M5,0 0,2.5 5,5z\",\n            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n            open: \"M6,1 1,3.5 6,6\",\n            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n          },\n              markerCounter = {};\n\n          R.toString = function () {\n            return \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n          };\n\n          var $ = function $(el, attr) {\n            if (attr) {\n              if (typeof el == \"string\") {\n                el = $(el);\n              }\n\n              for (var key in attr) {\n                if (attr[has](key)) {\n                  if (key.substring(0, 6) == \"xlink:\") {\n                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n                  } else {\n                    el.setAttribute(key, Str(attr[key]));\n                  }\n                }\n              }\n            } else {\n              el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n              el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n            }\n\n            return el;\n          },\n              addGradientFill = function addGradientFill(element, gradient) {\n            var type = \"linear\",\n                id = element.id + gradient,\n                fx = .5,\n                fy = .5,\n                o = element.node,\n                SVG = element.paper,\n                s = o.style,\n                el = R._g.doc.getElementById(id);\n\n            if (!el) {\n              gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n                type = \"radial\";\n\n                if (_fx && _fy) {\n                  fx = toFloat(_fx);\n                  fy = toFloat(_fy);\n                  var dir = (fy > .5) * 2 - 1;\n                  pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) && fy != .5 && (fy = fy.toFixed(5) - 1e-5 * dir);\n                }\n\n                return E;\n              });\n              gradient = gradient.split(/\\s*\\-\\s*/);\n\n              if (type == \"linear\") {\n                var angle = gradient.shift();\n                angle = -toFloat(angle);\n\n                if (isNaN(angle)) {\n                  return null;\n                }\n\n                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n                vector[2] *= max;\n                vector[3] *= max;\n\n                if (vector[2] < 0) {\n                  vector[0] = -vector[2];\n                  vector[2] = 0;\n                }\n\n                if (vector[3] < 0) {\n                  vector[1] = -vector[3];\n                  vector[3] = 0;\n                }\n              }\n\n              var dots = R._parseDots(gradient);\n\n              if (!dots) {\n                return null;\n              }\n\n              id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n              if (element.gradient && id != element.gradient.id) {\n                SVG.defs.removeChild(element.gradient);\n                delete element.gradient;\n              }\n\n              if (!element.gradient) {\n                el = $(type + \"Gradient\", {\n                  id: id\n                });\n                element.gradient = el;\n                $(el, type == \"radial\" ? {\n                  fx: fx,\n                  fy: fy\n                } : {\n                  x1: vector[0],\n                  y1: vector[1],\n                  x2: vector[2],\n                  y2: vector[3],\n                  gradientTransform: element.matrix.invert()\n                });\n                SVG.defs.appendChild(el);\n\n                for (var i = 0, ii = dots.length; i < ii; i++) {\n                  el.appendChild($(\"stop\", {\n                    offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n                    \"stop-color\": dots[i].color || \"#fff\",\n                    \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n                  }));\n                }\n              }\n            }\n\n            $(o, {\n              fill: fillurl(id),\n              opacity: 1,\n              \"fill-opacity\": 1\n            });\n            s.fill = E;\n            s.opacity = 1;\n            s.fillOpacity = 1;\n            return 1;\n          },\n              isIE9or10 = function isIE9or10() {\n            var mode = document.documentMode;\n            return mode && (mode === 9 || mode === 10);\n          },\n              fillurl = function fillurl(id) {\n            if (isIE9or10()) {\n              return \"url('#\" + id + \"')\";\n            }\n\n            var location = document.location;\n            var locationString = location.protocol + '//' + location.host + location.pathname + location.search;\n            return \"url('\" + locationString + \"#\" + id + \"')\";\n          },\n              updatePosition = function updatePosition(o) {\n            var bbox = o.getBBox(1);\n            $(o.pattern, {\n              patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"\n            });\n          },\n              addArrow = function addArrow(o, value, isEnd) {\n            if (o.type == \"path\") {\n              var values = Str(value).toLowerCase().split(\"-\"),\n                  p = o.paper,\n                  se = isEnd ? \"end\" : \"start\",\n                  node = o.node,\n                  attrs = o.attrs,\n                  stroke = attrs[\"stroke-width\"],\n                  i = values.length,\n                  type = \"classic\",\n                  from,\n                  to,\n                  dx,\n                  refX,\n                  attr,\n                  w = 3,\n                  h = 3,\n                  t = 5;\n\n              while (i--) {\n                switch (values[i]) {\n                  case \"block\":\n                  case \"classic\":\n                  case \"oval\":\n                  case \"diamond\":\n                  case \"open\":\n                  case \"none\":\n                    type = values[i];\n                    break;\n\n                  case \"wide\":\n                    h = 5;\n                    break;\n\n                  case \"narrow\":\n                    h = 2;\n                    break;\n\n                  case \"long\":\n                    w = 5;\n                    break;\n\n                  case \"short\":\n                    w = 2;\n                    break;\n                }\n              }\n\n              if (type == \"open\") {\n                w += 2;\n                h += 2;\n                t += 2;\n                dx = 1;\n                refX = isEnd ? 4 : 1;\n                attr = {\n                  fill: \"none\",\n                  stroke: attrs.stroke\n                };\n              } else {\n                refX = dx = w / 2;\n                attr = {\n                  fill: attrs.stroke,\n                  stroke: \"none\"\n                };\n              }\n\n              if (o._.arrows) {\n                if (isEnd) {\n                  o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n                  o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n                } else {\n                  o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n                  o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n                }\n              } else {\n                o._.arrows = {};\n              }\n\n              if (type != \"none\") {\n                var pathId = \"raphael-marker-\" + type,\n                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\n                if (!R._g.doc.getElementById(pathId)) {\n                  p.defs.appendChild($($(\"path\"), {\n                    \"stroke-linecap\": \"round\",\n                    d: markers[type],\n                    id: pathId\n                  }));\n                  markerCounter[pathId] = 1;\n                } else {\n                  markerCounter[pathId]++;\n                }\n\n                var marker = R._g.doc.getElementById(markerId),\n                    use;\n\n                if (!marker) {\n                  marker = $($(\"marker\"), {\n                    id: markerId,\n                    markerHeight: h,\n                    markerWidth: w,\n                    orient: \"auto\",\n                    refX: refX,\n                    refY: h / 2\n                  });\n                  use = $($(\"use\"), {\n                    \"xlink:href\": \"#\" + pathId,\n                    transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n                    \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n                  });\n                  marker.appendChild(use);\n                  p.defs.appendChild(marker);\n                  markerCounter[markerId] = 1;\n                } else {\n                  markerCounter[markerId]++;\n                  use = marker.getElementsByTagName(\"use\")[0];\n                }\n\n                $(use, attr);\n                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\n                if (isEnd) {\n                  from = o._.arrows.startdx * stroke || 0;\n                  to = R.getTotalLength(attrs.path) - delta * stroke;\n                } else {\n                  from = delta * stroke;\n                  to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n                }\n\n                attr = {};\n                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\n                if (to || from) {\n                  attr.d = R.getSubpath(attrs.path, from, to);\n                }\n\n                $(node, attr);\n                o._.arrows[se + \"Path\"] = pathId;\n                o._.arrows[se + \"Marker\"] = markerId;\n                o._.arrows[se + \"dx\"] = delta;\n                o._.arrows[se + \"Type\"] = type;\n                o._.arrows[se + \"String\"] = value;\n              } else {\n                if (isEnd) {\n                  from = o._.arrows.startdx * stroke || 0;\n                  to = R.getTotalLength(attrs.path) - from;\n                } else {\n                  from = 0;\n                  to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n                }\n\n                o._.arrows[se + \"Path\"] && $(node, {\n                  d: R.getSubpath(attrs.path, from, to)\n                });\n                delete o._.arrows[se + \"Path\"];\n                delete o._.arrows[se + \"Marker\"];\n                delete o._.arrows[se + \"dx\"];\n                delete o._.arrows[se + \"Type\"];\n                delete o._.arrows[se + \"String\"];\n              }\n\n              for (attr in markerCounter) {\n                if (markerCounter[has](attr) && !markerCounter[attr]) {\n                  var item = R._g.doc.getElementById(attr);\n\n                  item && item.parentNode.removeChild(item);\n                }\n              }\n            }\n          },\n              dasharray = {\n            \"-\": [3, 1],\n            \".\": [1, 1],\n            \"-.\": [3, 1, 1, 1],\n            \"-..\": [3, 1, 1, 1, 1, 1],\n            \". \": [1, 3],\n            \"- \": [4, 3],\n            \"--\": [8, 3],\n            \"- .\": [4, 3, 1, 3],\n            \"--.\": [8, 3, 1, 3],\n            \"--..\": [8, 3, 1, 3, 1, 3]\n          },\n              addDashes = function addDashes(o, value, params) {\n            value = dasharray[Str(value).toLowerCase()];\n\n            if (value) {\n              var width = o.attrs[\"stroke-width\"] || \"1\",\n                  butt = {\n                round: width,\n                square: width,\n                butt: 0\n              }[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n                  dashes = [],\n                  i = value.length;\n\n              while (i--) {\n                dashes[i] = value[i] * width + (i % 2 ? 1 : -1) * butt;\n              }\n\n              $(o.node, {\n                \"stroke-dasharray\": dashes.join(\",\")\n              });\n            } else {\n              $(o.node, {\n                \"stroke-dasharray\": \"none\"\n              });\n            }\n          },\n              setFillAndStroke = function setFillAndStroke(o, params) {\n            var node = o.node,\n                attrs = o.attrs,\n                vis = node.style.visibility;\n            node.style.visibility = \"hidden\";\n\n            for (var att in params) {\n              if (params[has](att)) {\n                if (!R._availableAttrs[has](att)) {\n                  continue;\n                }\n\n                var value = params[att];\n                attrs[att] = value;\n\n                switch (att) {\n                  case \"blur\":\n                    o.blur(value);\n                    break;\n\n                  case \"title\":\n                    var title = node.getElementsByTagName(\"title\"); // Use the existing <title>.\n\n                    if (title.length && (title = title[0])) {\n                      title.firstChild.nodeValue = value;\n                    } else {\n                      title = $(\"title\");\n\n                      var val = R._g.doc.createTextNode(value);\n\n                      title.appendChild(val);\n                      node.appendChild(title);\n                    }\n\n                    break;\n\n                  case \"href\":\n                  case \"target\":\n                    var pn = node.parentNode;\n\n                    if (pn.tagName.toLowerCase() != \"a\") {\n                      var hl = $(\"a\");\n                      pn.insertBefore(hl, node);\n                      hl.appendChild(node);\n                      pn = hl;\n                    }\n\n                    if (att == \"target\") {\n                      pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n                    } else {\n                      pn.setAttributeNS(xlink, att, value);\n                    }\n\n                    break;\n\n                  case \"cursor\":\n                    node.style.cursor = value;\n                    break;\n\n                  case \"transform\":\n                    o.transform(value);\n                    break;\n\n                  case \"arrow-start\":\n                    addArrow(o, value);\n                    break;\n\n                  case \"arrow-end\":\n                    addArrow(o, value, 1);\n                    break;\n\n                  case \"clip-rect\":\n                    var rect = Str(value).split(separator);\n\n                    if (rect.length == 4) {\n                      o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n                      var el = $(\"clipPath\"),\n                          rc = $(\"rect\");\n                      el.id = R.createUUID();\n                      $(rc, {\n                        x: rect[0],\n                        y: rect[1],\n                        width: rect[2],\n                        height: rect[3]\n                      });\n                      el.appendChild(rc);\n                      o.paper.defs.appendChild(el);\n                      $(node, {\n                        \"clip-path\": \"url(#\" + el.id + \")\"\n                      });\n                      o.clip = rc;\n                    }\n\n                    if (!value) {\n                      var path = node.getAttribute(\"clip-path\");\n\n                      if (path) {\n                        var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\n                        clip && clip.parentNode.removeChild(clip);\n                        $(node, {\n                          \"clip-path\": E\n                        });\n                        delete o.clip;\n                      }\n                    }\n\n                    break;\n\n                  case \"path\":\n                    if (o.type == \"path\") {\n                      $(node, {\n                        d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"\n                      });\n                      o._.dirty = 1;\n\n                      if (o._.arrows) {\n                        \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n                        \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                      }\n                    }\n\n                    break;\n\n                  case \"width\":\n                    node.setAttribute(att, value);\n                    o._.dirty = 1;\n\n                    if (attrs.fx) {\n                      att = \"x\";\n                      value = attrs.x;\n                    } else {\n                      break;\n                    }\n\n                  case \"x\":\n                    if (attrs.fx) {\n                      value = -attrs.x - (attrs.width || 0);\n                    }\n\n                  case \"rx\":\n                    if (att == \"rx\" && o.type == \"rect\") {\n                      break;\n                    }\n\n                  case \"cx\":\n                    node.setAttribute(att, value);\n                    o.pattern && updatePosition(o);\n                    o._.dirty = 1;\n                    break;\n\n                  case \"height\":\n                    node.setAttribute(att, value);\n                    o._.dirty = 1;\n\n                    if (attrs.fy) {\n                      att = \"y\";\n                      value = attrs.y;\n                    } else {\n                      break;\n                    }\n\n                  case \"y\":\n                    if (attrs.fy) {\n                      value = -attrs.y - (attrs.height || 0);\n                    }\n\n                  case \"ry\":\n                    if (att == \"ry\" && o.type == \"rect\") {\n                      break;\n                    }\n\n                  case \"cy\":\n                    node.setAttribute(att, value);\n                    o.pattern && updatePosition(o);\n                    o._.dirty = 1;\n                    break;\n\n                  case \"r\":\n                    if (o.type == \"rect\") {\n                      $(node, {\n                        rx: value,\n                        ry: value\n                      });\n                    } else {\n                      node.setAttribute(att, value);\n                    }\n\n                    o._.dirty = 1;\n                    break;\n\n                  case \"src\":\n                    if (o.type == \"image\") {\n                      node.setAttributeNS(xlink, \"href\", value);\n                    }\n\n                    break;\n\n                  case \"stroke-width\":\n                    if (o._.sx != 1 || o._.sy != 1) {\n                      value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n                    }\n\n                    node.setAttribute(att, value);\n\n                    if (attrs[\"stroke-dasharray\"]) {\n                      addDashes(o, attrs[\"stroke-dasharray\"], params);\n                    }\n\n                    if (o._.arrows) {\n                      \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n                      \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                    }\n\n                    break;\n\n                  case \"stroke-dasharray\":\n                    addDashes(o, value, params);\n                    break;\n\n                  case \"fill\":\n                    var isURL = Str(value).match(R._ISURL);\n\n                    if (isURL) {\n                      el = $(\"pattern\");\n                      var ig = $(\"image\");\n                      el.id = R.createUUID();\n                      $(el, {\n                        x: 0,\n                        y: 0,\n                        patternUnits: \"userSpaceOnUse\",\n                        height: 1,\n                        width: 1\n                      });\n                      $(ig, {\n                        x: 0,\n                        y: 0,\n                        \"xlink:href\": isURL[1]\n                      });\n                      el.appendChild(ig);\n\n                      (function (el) {\n                        R._preload(isURL[1], function () {\n                          var w = this.offsetWidth,\n                              h = this.offsetHeight;\n                          $(el, {\n                            width: w,\n                            height: h\n                          });\n                          $(ig, {\n                            width: w,\n                            height: h\n                          });\n                        });\n                      })(el);\n\n                      o.paper.defs.appendChild(el);\n                      $(node, {\n                        fill: \"url(#\" + el.id + \")\"\n                      });\n                      o.pattern = el;\n                      o.pattern && updatePosition(o);\n                      break;\n                    }\n\n                    var clr = R.getRGB(value);\n\n                    if (!clr.error) {\n                      delete params.gradient;\n                      delete attrs.gradient;\n                      !R.is(attrs.opacity, \"undefined\") && R.is(params.opacity, \"undefined\") && $(node, {\n                        opacity: attrs.opacity\n                      });\n                      !R.is(attrs[\"fill-opacity\"], \"undefined\") && R.is(params[\"fill-opacity\"], \"undefined\") && $(node, {\n                        \"fill-opacity\": attrs[\"fill-opacity\"]\n                      });\n                    } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n                      if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n                        var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\n                        if (gradient) {\n                          var stops = gradient.getElementsByTagName(\"stop\");\n                          $(stops[stops.length - 1], {\n                            \"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)\n                          });\n                        }\n                      }\n\n                      attrs.gradient = value;\n                      attrs.fill = \"none\";\n                      break;\n                    }\n\n                    clr[has](\"opacity\") && $(node, {\n                      \"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity\n                    });\n\n                  case \"stroke\":\n                    clr = R.getRGB(value);\n                    node.setAttribute(att, clr.hex);\n                    att == \"stroke\" && clr[has](\"opacity\") && $(node, {\n                      \"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity\n                    });\n\n                    if (att == \"stroke\" && o._.arrows) {\n                      \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n                      \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n                    }\n\n                    break;\n\n                  case \"gradient\":\n                    (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n                    break;\n\n                  case \"opacity\":\n                    if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n                      $(node, {\n                        \"stroke-opacity\": value > 1 ? value / 100 : value\n                      });\n                    }\n\n                  // fall\n\n                  case \"fill-opacity\":\n                    if (attrs.gradient) {\n                      gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\n                      if (gradient) {\n                        stops = gradient.getElementsByTagName(\"stop\");\n                        $(stops[stops.length - 1], {\n                          \"stop-opacity\": value\n                        });\n                      }\n\n                      break;\n                    }\n\n                  default:\n                    att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n                    var cssrule = att.replace(/(\\-.)/g, function (w) {\n                      return w.substring(1).toUpperCase();\n                    });\n                    node.style[cssrule] = value;\n                    o._.dirty = 1;\n                    node.setAttribute(att, value);\n                    break;\n                }\n              }\n            }\n\n            tuneText(o, params);\n            node.style.visibility = vis;\n          },\n              leading = 1.2,\n              tuneText = function tuneText(el, params) {\n            if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n              return;\n            }\n\n            var a = el.attrs,\n                node = el.node,\n                fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n            if (params[has](\"text\")) {\n              a.text = params.text;\n\n              while (node.firstChild) {\n                node.removeChild(node.firstChild);\n              }\n\n              var texts = Str(params.text).split(\"\\n\"),\n                  tspans = [],\n                  tspan;\n\n              for (var i = 0, ii = texts.length; i < ii; i++) {\n                tspan = $(\"tspan\");\n                i && $(tspan, {\n                  dy: fontSize * leading,\n                  x: a.x\n                });\n                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n                node.appendChild(tspan);\n                tspans[i] = tspan;\n              }\n            } else {\n              tspans = node.getElementsByTagName(\"tspan\");\n\n              for (i = 0, ii = tspans.length; i < ii; i++) {\n                if (i) {\n                  $(tspans[i], {\n                    dy: fontSize * leading,\n                    x: a.x\n                  });\n                } else {\n                  $(tspans[0], {\n                    dy: 0\n                  });\n                }\n              }\n            }\n\n            $(node, {\n              x: a.x,\n              y: a.y\n            });\n            el._.dirty = 1;\n\n            var bb = el._getBBox(),\n                dif = a.y - (bb.y + bb.height / 2);\n\n            dif && R.is(dif, \"finite\") && $(tspans[0], {\n              dy: dif\n            });\n          },\n              getRealNode = function getRealNode(node) {\n            if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n              return node.parentNode;\n            } else {\n              return node;\n            }\n          },\n              Element = function Element(node, svg) {\n            var X = 0,\n                Y = 0;\n            /*\\\n             * Element.node\n             [ property (object) ]\n             **\n             * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n             **\n             * Note: Don’t mess with it.\n             > Usage\n             | // draw a circle at coordinate 10,10 with radius of 10\n             | var c = paper.circle(10, 10, 10);\n             | c.node.onclick = function () {\n             |     c.attr(\"fill\", \"red\");\n             | };\n            \\*/\n\n            this[0] = this.node = node;\n            /*\\\n             * Element.raphael\n             [ property (object) ]\n             **\n             * Internal reference to @Raphael object. In case it is not available.\n             > Usage\n             | Raphael.el.red = function () {\n             |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n             |     hsb.h = 1;\n             |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n             | }\n            \\*/\n\n            node.raphael = true;\n            /*\\\n             * Element.id\n             [ property (number) ]\n             **\n             * Unique id of the element. Especially useful when you want to listen to events of the element,\n             * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n            \\*/\n\n            this.id = guid();\n            node.raphaelid = this.id;\n            /**\n            * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n            * @returns {string} id\n            */\n\n            function guid() {\n              return (\"0000\" + (Math.random() * Math.pow(36, 5) << 0).toString(36)).slice(-5);\n            }\n\n            this.matrix = R.matrix();\n            this.realPath = null;\n            /*\\\n             * Element.paper\n             [ property (object) ]\n             **\n             * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n             > Usage\n             | Raphael.el.cross = function () {\n             |     this.attr({fill: \"red\"});\n             |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n             |         .attr({stroke: \"red\"});\n             | }\n            \\*/\n\n            this.paper = svg;\n            this.attrs = this.attrs || {};\n            this._ = {\n              transform: [],\n              sx: 1,\n              sy: 1,\n              deg: 0,\n              dx: 0,\n              dy: 0,\n              dirty: 1\n            };\n            !svg.bottom && (svg.bottom = this);\n            /*\\\n             * Element.prev\n             [ property (object) ]\n             **\n             * Reference to the previous element in the hierarchy.\n            \\*/\n\n            this.prev = svg.top;\n            svg.top && (svg.top.next = this);\n            svg.top = this;\n            /*\\\n             * Element.next\n             [ property (object) ]\n             **\n             * Reference to the next element in the hierarchy.\n            \\*/\n\n            this.next = null;\n          },\n              elproto = R.el;\n\n          Element.prototype = elproto;\n          elproto.constructor = Element;\n\n          R._engine.path = function (pathString, SVG) {\n            var el = $(\"path\");\n            SVG.canvas && SVG.canvas.appendChild(el);\n            var p = new Element(el, SVG);\n            p.type = \"path\";\n            setFillAndStroke(p, {\n              fill: \"none\",\n              stroke: \"#000\",\n              path: pathString\n            });\n            return p;\n          };\n          /*\\\n           * Element.rotate\n           [ method ]\n           **\n           * Deprecated! Use @Element.transform instead.\n           * Adds rotation by given angle around given point to the list of\n           * transformations of the element.\n           > Parameters\n           - deg (number) angle in degrees\n           - cx (number) #optional x coordinate of the centre of rotation\n           - cy (number) #optional y coordinate of the centre of rotation\n           * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n           = (object) @Element\n          \\*/\n\n\n          elproto.rotate = function (deg, cx, cy) {\n            if (this.removed) {\n              return this;\n            }\n\n            deg = Str(deg).split(separator);\n\n            if (deg.length - 1) {\n              cx = toFloat(deg[1]);\n              cy = toFloat(deg[2]);\n            }\n\n            deg = toFloat(deg[0]);\n            cy == null && (cx = cy);\n\n            if (cx == null || cy == null) {\n              var bbox = this.getBBox(1);\n              cx = bbox.x + bbox.width / 2;\n              cy = bbox.y + bbox.height / 2;\n            }\n\n            this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n            return this;\n          };\n          /*\\\n           * Element.scale\n           [ method ]\n           **\n           * Deprecated! Use @Element.transform instead.\n           * Adds scale by given amount relative to given point to the list of\n           * transformations of the element.\n           > Parameters\n           - sx (number) horisontal scale amount\n           - sy (number) vertical scale amount\n           - cx (number) #optional x coordinate of the centre of scale\n           - cy (number) #optional y coordinate of the centre of scale\n           * If cx & cy aren’t specified centre of the shape is used instead.\n           = (object) @Element\n          \\*/\n\n\n          elproto.scale = function (sx, sy, cx, cy) {\n            if (this.removed) {\n              return this;\n            }\n\n            sx = Str(sx).split(separator);\n\n            if (sx.length - 1) {\n              sy = toFloat(sx[1]);\n              cx = toFloat(sx[2]);\n              cy = toFloat(sx[3]);\n            }\n\n            sx = toFloat(sx[0]);\n            sy == null && (sy = sx);\n            cy == null && (cx = cy);\n\n            if (cx == null || cy == null) {\n              var bbox = this.getBBox(1);\n            }\n\n            cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n            cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n            this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n            return this;\n          };\n          /*\\\n           * Element.translate\n           [ method ]\n           **\n           * Deprecated! Use @Element.transform instead.\n           * Adds translation by given amount to the list of transformations of the element.\n           > Parameters\n           - dx (number) horisontal shift\n           - dy (number) vertical shift\n           = (object) @Element\n          \\*/\n\n\n          elproto.translate = function (dx, dy) {\n            if (this.removed) {\n              return this;\n            }\n\n            dx = Str(dx).split(separator);\n\n            if (dx.length - 1) {\n              dy = toFloat(dx[1]);\n            }\n\n            dx = toFloat(dx[0]) || 0;\n            dy = +dy || 0;\n            this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n            return this;\n          };\n          /*\\\n           * Element.transform\n           [ method ]\n           **\n           * Adds transformation to the element which is separate to other attributes,\n           * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n           * of transformation string is similar to the path string syntax:\n           | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n           * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n           * scale and `m` is for matrix.\n           *\n           * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n           *\n           * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n           * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n           * coordinates as optional parameters, the default is the centre point of the element.\n           * Matrix accepts six parameters.\n           > Usage\n           | var el = paper.rect(10, 20, 300, 200);\n           | // translate 100, 100, rotate 45°, translate -100, 0\n           | el.transform(\"t100,100r45t-100,0\");\n           | // if you want you can append or prepend transformations\n           | el.transform(\"...t50,50\");\n           | el.transform(\"s2...\");\n           | // or even wrap\n           | el.transform(\"t50,50...t-50-50\");\n           | // to reset transformation call method with empty string\n           | el.transform(\"\");\n           | // to get current value call it without parameters\n           | console.log(el.transform());\n           > Parameters\n           - tstr (string) #optional transformation string\n           * If tstr isn’t specified\n           = (string) current transformation string\n           * else\n           = (object) @Element\n          \\*/\n\n\n          elproto.transform = function (tstr) {\n            var _ = this._;\n\n            if (tstr == null) {\n              return _.transform;\n            }\n\n            R._extractTransform(this, tstr);\n\n            this.clip && $(this.clip, {\n              transform: this.matrix.invert()\n            });\n            this.pattern && updatePosition(this);\n            this.node && $(this.node, {\n              transform: this.matrix\n            });\n\n            if (_.sx != 1 || _.sy != 1) {\n              var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n              this.attr({\n                \"stroke-width\": sw\n              });\n            }\n\n            return this;\n          };\n          /*\\\n           * Element.hide\n           [ method ]\n           **\n           * Makes element invisible. See @Element.show.\n           = (object) @Element\n          \\*/\n\n\n          elproto.hide = function () {\n            if (!this.removed) this.node.style.display = \"none\";\n            return this;\n          };\n          /*\\\n           * Element.show\n           [ method ]\n           **\n           * Makes element visible. See @Element.hide.\n           = (object) @Element\n          \\*/\n\n\n          elproto.show = function () {\n            if (!this.removed) this.node.style.display = \"\";\n            return this;\n          };\n          /*\\\n           * Element.remove\n           [ method ]\n           **\n           * Removes element from the paper.\n          \\*/\n\n\n          elproto.remove = function () {\n            var node = getRealNode(this.node);\n\n            if (this.removed || !node.parentNode) {\n              return;\n            }\n\n            var paper = this.paper;\n            paper.__set__ && paper.__set__.exclude(this);\n            eve.unbind(\"raphael.*.*.\" + this.id);\n\n            if (this.gradient) {\n              paper.defs.removeChild(this.gradient);\n            }\n\n            R._tear(this, paper);\n\n            node.parentNode.removeChild(node); // Remove custom data for element\n\n            this.removeData();\n\n            for (var i in this) {\n              this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n            }\n\n            this.removed = true;\n          };\n\n          elproto._getBBox = function () {\n            if (this.node.style.display == \"none\") {\n              this.show();\n              var hide = true;\n            }\n\n            var canvasHidden = false,\n                containerStyle;\n\n            if (this.paper.canvas.parentElement) {\n              containerStyle = this.paper.canvas.parentElement.style;\n            } //IE10+ can't find parentElement\n            else if (this.paper.canvas.parentNode) {\n              containerStyle = this.paper.canvas.parentNode.style;\n            }\n\n            if (containerStyle && containerStyle.display == \"none\") {\n              canvasHidden = true;\n              containerStyle.display = \"\";\n            }\n\n            var bbox = {};\n\n            try {\n              bbox = this.node.getBBox();\n            } catch (e) {\n              // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n              bbox = {\n                x: this.node.clientLeft,\n                y: this.node.clientTop,\n                width: this.node.clientWidth,\n                height: this.node.clientHeight\n              };\n            } finally {\n              bbox = bbox || {};\n\n              if (canvasHidden) {\n                containerStyle.display = \"none\";\n              }\n            }\n\n            hide && this.hide();\n            return bbox;\n          };\n          /*\\\n           * Element.attr\n           [ method ]\n           **\n           * Sets the attributes of the element.\n           > Parameters\n           - attrName (string) attribute’s name\n           - value (string) value\n           * or\n           - params (object) object of name/value pairs\n           * or\n           - attrName (string) attribute’s name\n           * or\n           - attrNames (array) in this case method returns array of current values for given attribute names\n           = (object) @Element if attrsName & value or params are passed in.\n           = (...) value of the attribute if only attrsName is passed in.\n           = (array) array of values of the attribute if attrsNames is passed in.\n           = (object) object of attributes if nothing is passed in.\n           > Possible parameters\n           # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n           o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n           o clip-rect (string) comma or space separated values: x, y, width and height\n           o cursor (string) CSS type of the cursor\n           o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n           o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n           o fill (string) colour, gradient or image\n           o fill-opacity (number)\n           o font (string)\n           o font-family (string)\n           o font-size (number) font size in pixels\n           o font-weight (string)\n           o height (number)\n           o href (string) URL, if specified element behaves as hyperlink\n           o opacity (number)\n           o path (string) SVG path string format\n           o r (number) radius of the circle, ellipse or rounded corner on the rect\n           o rx (number) horisontal radius of the ellipse\n           o ry (number) vertical radius of the ellipse\n           o src (string) image URL, only works for @Element.image element\n           o stroke (string) stroke colour\n           o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n           o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n           o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n           o stroke-miterlimit (number)\n           o stroke-opacity (number)\n           o stroke-width (number) stroke width in pixels, default is '1'\n           o target (string) used with href\n           o text (string) contents of the text element. Use `\\n` for multiline text\n           o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n           o title (string) will create tooltip with a given text\n           o transform (string) see @Element.transform\n           o width (number)\n           o x (number)\n           o y (number)\n           > Gradients\n           * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n           * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n           *\n           * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n           * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n           * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n           > Path String\n           # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n           > Colour Parsing\n           # <ul>\n           #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n           #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n           #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n           #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n           #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n           #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n           #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n           #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n           #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n           #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n           #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n           #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n           #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n           #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n           # </ul>\n          \\*/\n\n\n          elproto.attr = function (name, value) {\n            if (this.removed) {\n              return this;\n            }\n\n            if (name == null) {\n              var res = {};\n\n              for (var a in this.attrs) {\n                if (this.attrs[has](a)) {\n                  res[a] = this.attrs[a];\n                }\n              }\n\n              res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n              res.transform = this._.transform;\n              return res;\n            }\n\n            if (value == null && R.is(name, \"string\")) {\n              if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n                return this.attrs.gradient;\n              }\n\n              if (name == \"transform\") {\n                return this._.transform;\n              }\n\n              var names = name.split(separator),\n                  out = {};\n\n              for (var i = 0, ii = names.length; i < ii; i++) {\n                name = names[i];\n\n                if (name in this.attrs) {\n                  out[name] = this.attrs[name];\n                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n                  out[name] = this.paper.customAttributes[name].def;\n                } else {\n                  out[name] = R._availableAttrs[name];\n                }\n              }\n\n              return ii - 1 ? out : out[names[0]];\n            }\n\n            if (value == null && R.is(name, \"array\")) {\n              out = {};\n\n              for (i = 0, ii = name.length; i < ii; i++) {\n                out[name[i]] = this.attr(name[i]);\n              }\n\n              return out;\n            }\n\n            if (value != null) {\n              var params = {};\n              params[name] = value;\n            } else if (name != null && R.is(name, \"object\")) {\n              params = name;\n            }\n\n            for (var key in params) {\n              eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n            }\n\n            for (key in this.paper.customAttributes) {\n              if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n                this.attrs[key] = params[key];\n\n                for (var subkey in par) {\n                  if (par[has](subkey)) {\n                    params[subkey] = par[subkey];\n                  }\n                }\n              }\n            }\n\n            setFillAndStroke(this, params);\n            return this;\n          };\n          /*\\\n           * Element.toFront\n           [ method ]\n           **\n           * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n           = (object) @Element\n          \\*/\n\n\n          elproto.toFront = function () {\n            if (this.removed) {\n              return this;\n            }\n\n            var node = getRealNode(this.node);\n            node.parentNode.appendChild(node);\n            var svg = this.paper;\n            svg.top != this && R._tofront(this, svg);\n            return this;\n          };\n          /*\\\n           * Element.toBack\n           [ method ]\n           **\n           * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n           = (object) @Element\n          \\*/\n\n\n          elproto.toBack = function () {\n            if (this.removed) {\n              return this;\n            }\n\n            var node = getRealNode(this.node);\n            var parentNode = node.parentNode;\n            parentNode.insertBefore(node, parentNode.firstChild);\n\n            R._toback(this, this.paper);\n\n            var svg = this.paper;\n            return this;\n          };\n          /*\\\n           * Element.insertAfter\n           [ method ]\n           **\n           * Inserts current object after the given one.\n           = (object) @Element\n          \\*/\n\n\n          elproto.insertAfter = function (element) {\n            if (this.removed || !element) {\n              return this;\n            }\n\n            var node = getRealNode(this.node);\n            var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\n            if (afterNode.nextSibling) {\n              afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n            } else {\n              afterNode.parentNode.appendChild(node);\n            }\n\n            R._insertafter(this, element, this.paper);\n\n            return this;\n          };\n          /*\\\n           * Element.insertBefore\n           [ method ]\n           **\n           * Inserts current object before the given one.\n           = (object) @Element\n          \\*/\n\n\n          elproto.insertBefore = function (element) {\n            if (this.removed || !element) {\n              return this;\n            }\n\n            var node = getRealNode(this.node);\n            var beforeNode = getRealNode(element.node || element[0].node);\n            beforeNode.parentNode.insertBefore(node, beforeNode);\n\n            R._insertbefore(this, element, this.paper);\n\n            return this;\n          };\n\n          elproto.blur = function (size) {\n            // Experimental. No Safari support. Use it on your own risk.\n            var t = this;\n\n            if (+size !== 0) {\n              var fltr = $(\"filter\"),\n                  blur = $(\"feGaussianBlur\");\n              t.attrs.blur = size;\n              fltr.id = R.createUUID();\n              $(blur, {\n                stdDeviation: +size || 1.5\n              });\n              fltr.appendChild(blur);\n              t.paper.defs.appendChild(fltr);\n              t._blur = fltr;\n              $(t.node, {\n                filter: \"url(#\" + fltr.id + \")\"\n              });\n            } else {\n              if (t._blur) {\n                t._blur.parentNode.removeChild(t._blur);\n\n                delete t._blur;\n                delete t.attrs.blur;\n              }\n\n              t.node.removeAttribute(\"filter\");\n            }\n\n            return t;\n          };\n\n          R._engine.circle = function (svg, x, y, r) {\n            var el = $(\"circle\");\n            svg.canvas && svg.canvas.appendChild(el);\n            var res = new Element(el, svg);\n            res.attrs = {\n              cx: x,\n              cy: y,\n              r: r,\n              fill: \"none\",\n              stroke: \"#000\"\n            };\n            res.type = \"circle\";\n            $(el, res.attrs);\n            return res;\n          };\n\n          R._engine.rect = function (svg, x, y, w, h, r) {\n            var el = $(\"rect\");\n            svg.canvas && svg.canvas.appendChild(el);\n            var res = new Element(el, svg);\n            res.attrs = {\n              x: x,\n              y: y,\n              width: w,\n              height: h,\n              rx: r || 0,\n              ry: r || 0,\n              fill: \"none\",\n              stroke: \"#000\"\n            };\n            res.type = \"rect\";\n            $(el, res.attrs);\n            return res;\n          };\n\n          R._engine.ellipse = function (svg, x, y, rx, ry) {\n            var el = $(\"ellipse\");\n            svg.canvas && svg.canvas.appendChild(el);\n            var res = new Element(el, svg);\n            res.attrs = {\n              cx: x,\n              cy: y,\n              rx: rx,\n              ry: ry,\n              fill: \"none\",\n              stroke: \"#000\"\n            };\n            res.type = \"ellipse\";\n            $(el, res.attrs);\n            return res;\n          };\n\n          R._engine.image = function (svg, src, x, y, w, h) {\n            var el = $(\"image\");\n            $(el, {\n              x: x,\n              y: y,\n              width: w,\n              height: h,\n              preserveAspectRatio: \"none\"\n            });\n            el.setAttributeNS(xlink, \"href\", src);\n            svg.canvas && svg.canvas.appendChild(el);\n            var res = new Element(el, svg);\n            res.attrs = {\n              x: x,\n              y: y,\n              width: w,\n              height: h,\n              src: src\n            };\n            res.type = \"image\";\n            return res;\n          };\n\n          R._engine.text = function (svg, x, y, text) {\n            var el = $(\"text\");\n            svg.canvas && svg.canvas.appendChild(el);\n            var res = new Element(el, svg);\n            res.attrs = {\n              x: x,\n              y: y,\n              \"text-anchor\": \"middle\",\n              text: text,\n              \"font-family\": R._availableAttrs[\"font-family\"],\n              \"font-size\": R._availableAttrs[\"font-size\"],\n              stroke: \"none\",\n              fill: \"#000\"\n            };\n            res.type = \"text\";\n            setFillAndStroke(res, res.attrs);\n            return res;\n          };\n\n          R._engine.setSize = function (width, height) {\n            this.width = width || this.width;\n            this.height = height || this.height;\n            this.canvas.setAttribute(\"width\", this.width);\n            this.canvas.setAttribute(\"height\", this.height);\n\n            if (this._viewBox) {\n              this.setViewBox.apply(this, this._viewBox);\n            }\n\n            return this;\n          };\n\n          R._engine.create = function () {\n            var con = R._getContainer.apply(0, arguments),\n                container = con && con.container;\n\n            if (!container) {\n              throw new Error(\"SVG container not found.\");\n            }\n\n            var x = con.x,\n                y = con.y,\n                width = con.width,\n                height = con.height,\n                cnvs = $(\"svg\"),\n                css = \"overflow:hidden;\",\n                isFloating;\n            x = x || 0;\n            y = y || 0;\n            width = width || 512;\n            height = height || 342;\n            $(cnvs, {\n              height: height,\n              version: 1.1,\n              width: width,\n              xmlns: \"http://www.w3.org/2000/svg\",\n              \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n            });\n\n            if (container == 1) {\n              cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\n              R._g.doc.body.appendChild(cnvs);\n\n              isFloating = 1;\n            } else {\n              cnvs.style.cssText = css + \"position:relative\";\n\n              if (container.firstChild) {\n                container.insertBefore(cnvs, container.firstChild);\n              } else {\n                container.appendChild(cnvs);\n              }\n            }\n\n            container = new R._Paper();\n            container.width = width;\n            container.height = height;\n            container.canvas = cnvs;\n            container.clear();\n            container._left = container._top = 0;\n            isFloating && (container.renderfix = function () {});\n            container.renderfix();\n            return container;\n          };\n\n          R._engine.setViewBox = function (x, y, w, h, fit) {\n            eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n            var paperSize = this.getSize(),\n                size = mmax(w / paperSize.width, h / paperSize.height),\n                top = this.top,\n                aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n                vb,\n                sw;\n\n            if (x == null) {\n              if (this._vbSize) {\n                size = 1;\n              }\n\n              delete this._vbSize;\n              vb = \"0 0 \" + this.width + S + this.height;\n            } else {\n              this._vbSize = size;\n              vb = x + S + y + S + w + S + h;\n            }\n\n            $(this.canvas, {\n              viewBox: vb,\n              preserveAspectRatio: aspectRatio\n            });\n\n            while (size && top) {\n              sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n              top.attr({\n                \"stroke-width\": sw\n              });\n              top._.dirty = 1;\n              top._.dirtyT = 1;\n              top = top.prev;\n            }\n\n            this._viewBox = [x, y, w, h, !!fit];\n            return this;\n          };\n          /*\\\n           * Paper.renderfix\n           [ method ]\n           **\n           * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n           * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n           * This method fixes the issue.\n           **\n             Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n          \\*/\n\n\n          R.prototype.renderfix = function () {\n            var cnvs = this.canvas,\n                s = cnvs.style,\n                pos;\n\n            try {\n              pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n            } catch (e) {\n              pos = cnvs.createSVGMatrix();\n            }\n\n            var left = -pos.e % 1,\n                top = -pos.f % 1;\n\n            if (left || top) {\n              if (left) {\n                this._left = (this._left + left) % 1;\n                s.left = this._left + \"px\";\n              }\n\n              if (top) {\n                this._top = (this._top + top) % 1;\n                s.top = this._top + \"px\";\n              }\n            }\n          };\n          /*\\\n           * Paper.clear\n           [ method ]\n           **\n           * Clears the paper, i.e. removes all the elements.\n          \\*/\n\n\n          R.prototype.clear = function () {\n            R.eve(\"raphael.clear\", this);\n            var c = this.canvas;\n\n            while (c.firstChild) {\n              c.removeChild(c.firstChild);\n            }\n\n            this.bottom = this.top = null;\n            (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n            c.appendChild(this.desc);\n            c.appendChild(this.defs = $(\"defs\"));\n          };\n          /*\\\n           * Paper.remove\n           [ method ]\n           **\n           * Removes the paper from the DOM.\n          \\*/\n\n\n          R.prototype.remove = function () {\n            eve(\"raphael.remove\", this);\n            this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\n            for (var i in this) {\n              this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n            }\n          };\n\n          var setproto = R.st;\n\n          for (var method in elproto) {\n            if (elproto[has](method) && !setproto[has](method)) {\n              setproto[method] = function (methodname) {\n                return function () {\n                  var arg = arguments;\n                  return this.forEach(function (el) {\n                    el[methodname].apply(el, arg);\n                  });\n                };\n              }(method);\n            }\n          }\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        /***/\n      },\n\n      /***/\n      \"./dev/raphael.vml.js\":\n      /*!****************************!*\\\n        !*** ./dev/raphael.vml.js ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function devRaphaelVmlJs(module, exports, __nested_webpack_require_280447__) {\n        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__nested_webpack_require_280447__(\n        /*! ./raphael.core */\n        \"./dev/raphael.core.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = function (R) {\n          if (R && !R.vml) {\n            return;\n          }\n\n          var has = \"hasOwnProperty\",\n              Str = String,\n              toFloat = parseFloat,\n              math = Math,\n              round = math.round,\n              mmax = math.max,\n              mmin = math.min,\n              abs = math.abs,\n              fillString = \"fill\",\n              separator = /[, ]+/,\n              eve = R.eve,\n              ms = \" progid:DXImageTransform.Microsoft\",\n              S = \" \",\n              E = \"\",\n              map = {\n            M: \"m\",\n            L: \"l\",\n            C: \"c\",\n            Z: \"x\",\n            m: \"t\",\n            l: \"r\",\n            c: \"v\",\n            z: \"x\"\n          },\n              bites = /([clmz]),?([^clmz]*)/gi,\n              blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n              val = /-?[^,\\s-]+/g,\n              cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n              zoom = 21600,\n              pathTypes = {\n            path: 1,\n            rect: 1,\n            image: 1\n          },\n              ovalTypes = {\n            circle: 1,\n            ellipse: 1\n          },\n              path2vml = function path2vml(path) {\n            var total = /[ahqstv]/ig,\n                command = R._pathToAbsolute;\n            Str(path).match(total) && (command = R._path2curve);\n            total = /[clmz]/g;\n\n            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n              var res = Str(path).replace(bites, function (all, command, args) {\n                var vals = [],\n                    isMove = command.toLowerCase() == \"m\",\n                    res = map[command];\n                args.replace(val, function (value) {\n                  if (isMove && vals.length == 2) {\n                    res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n                    vals = [];\n                  }\n\n                  vals.push(round(value * zoom));\n                });\n                return res + vals;\n              });\n              return res;\n            }\n\n            var pa = command(path),\n                p,\n                r;\n            res = [];\n\n            for (var i = 0, ii = pa.length; i < ii; i++) {\n              p = pa[i];\n              r = pa[i][0].toLowerCase();\n              r == \"z\" && (r = \"x\");\n\n              for (var j = 1, jj = p.length; j < jj; j++) {\n                r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n              }\n\n              res.push(r);\n            }\n\n            return res.join(S);\n          },\n              compensation = function compensation(deg, dx, dy) {\n            var m = R.matrix();\n            m.rotate(-deg, .5, .5);\n            return {\n              dx: m.x(dx, dy),\n              dy: m.y(dx, dy)\n            };\n          },\n              setCoords = function setCoords(p, sx, sy, dx, dy, deg) {\n            var _ = p._,\n                m = p.matrix,\n                fillpos = _.fillpos,\n                o = p.node,\n                s = o.style,\n                y = 1,\n                flip = \"\",\n                dxdy,\n                kx = zoom / sx,\n                ky = zoom / sy;\n            s.visibility = \"hidden\";\n\n            if (!sx || !sy) {\n              return;\n            }\n\n            o.coordsize = abs(kx) + S + abs(ky);\n            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\n            if (deg) {\n              var c = compensation(deg, dx, dy);\n              dx = c.dx;\n              dy = c.dy;\n            }\n\n            sx < 0 && (flip += \"x\");\n            sy < 0 && (flip += \" y\") && (y = -1);\n            s.flip = flip;\n            o.coordorigin = dx * -kx + S + dy * -ky;\n\n            if (fillpos || _.fillsize) {\n              var fill = o.getElementsByTagName(fillString);\n              fill = fill && fill[0];\n              o.removeChild(fill);\n\n              if (fillpos) {\n                c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n                fill.position = c.dx * y + S + c.dy * y;\n              }\n\n              if (_.fillsize) {\n                fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n              }\n\n              o.appendChild(fill);\n            }\n\n            s.visibility = \"visible\";\n          };\n\n          R.toString = function () {\n            return \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xEBl \" + this.version;\n          };\n\n          var addArrow = function addArrow(o, value, isEnd) {\n            var values = Str(value).toLowerCase().split(\"-\"),\n                se = isEnd ? \"end\" : \"start\",\n                i = values.length,\n                type = \"classic\",\n                w = \"medium\",\n                h = \"medium\";\n\n            while (i--) {\n              switch (values[i]) {\n                case \"block\":\n                case \"classic\":\n                case \"oval\":\n                case \"diamond\":\n                case \"open\":\n                case \"none\":\n                  type = values[i];\n                  break;\n\n                case \"wide\":\n                case \"narrow\":\n                  h = values[i];\n                  break;\n\n                case \"long\":\n                case \"short\":\n                  w = values[i];\n                  break;\n              }\n            }\n\n            var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n            stroke[se + \"arrow\"] = type;\n            stroke[se + \"arrowlength\"] = w;\n            stroke[se + \"arrowwidth\"] = h;\n          },\n              setFillAndStroke = function setFillAndStroke(o, params) {\n            // o.paper.canvas.style.display = \"none\";\n            o.attrs = o.attrs || {};\n            var node = o.node,\n                a = o.attrs,\n                s = node.style,\n                xy,\n                newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n                isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n                res = o;\n\n            for (var par in params) {\n              if (params[has](par)) {\n                a[par] = params[par];\n              }\n            }\n\n            if (newpath) {\n              a.path = R._getPath[o.type](o);\n              o._.dirty = 1;\n            }\n\n            params.href && (node.href = params.href);\n            params.title && (node.title = params.title);\n            params.target && (node.target = params.target);\n            params.cursor && (s.cursor = params.cursor);\n            \"blur\" in params && o.blur(params.blur);\n\n            if (params.path && o.type == \"path\" || newpath) {\n              node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n              o._.dirty = 1;\n\n              if (o.type == \"image\") {\n                o._.fillpos = [a.x, a.y];\n                o._.fillsize = [a.width, a.height];\n                setCoords(o, 1, 1, 0, 0, 0);\n              }\n            }\n\n            \"transform\" in params && o.transform(params.transform);\n\n            if (isOval) {\n              var cx = +a.cx,\n                  cy = +a.cy,\n                  rx = +a.rx || +a.r || 0,\n                  ry = +a.ry || +a.r || 0;\n              node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n              o._.dirty = 1;\n            }\n\n            if (\"clip-rect\" in params) {\n              var rect = Str(params[\"clip-rect\"]).split(separator);\n\n              if (rect.length == 4) {\n                rect[2] = +rect[2] + +rect[0];\n                rect[3] = +rect[3] + +rect[1];\n\n                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n                    dstyle = div.style;\n\n                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\n                if (!node.clipRect) {\n                  dstyle.position = \"absolute\";\n                  dstyle.top = 0;\n                  dstyle.left = 0;\n                  dstyle.width = o.paper.width + \"px\";\n                  dstyle.height = o.paper.height + \"px\";\n                  node.parentNode.insertBefore(div, node);\n                  div.appendChild(node);\n                  node.clipRect = div;\n                }\n              }\n\n              if (!params[\"clip-rect\"]) {\n                node.clipRect && (node.clipRect.style.clip = \"auto\");\n              }\n            }\n\n            if (o.textpath) {\n              var textpathStyle = o.textpath.style;\n              params.font && (textpathStyle.font = params.font);\n              params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n              params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n              params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n              params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n            }\n\n            if (\"arrow-start\" in params) {\n              addArrow(res, params[\"arrow-start\"]);\n            }\n\n            if (\"arrow-end\" in params) {\n              addArrow(res, params[\"arrow-end\"], 1);\n            }\n\n            if (params.opacity != null || params.fill != null || params.src != null || params.stroke != null || params[\"stroke-width\"] != null || params[\"stroke-opacity\"] != null || params[\"fill-opacity\"] != null || params[\"stroke-dasharray\"] != null || params[\"stroke-miterlimit\"] != null || params[\"stroke-linejoin\"] != null || params[\"stroke-linecap\"] != null) {\n              var fill = node.getElementsByTagName(fillString),\n                  newfill = false;\n              fill = fill && fill[0];\n              !fill && (newfill = fill = createNode(fillString));\n\n              if (o.type == \"image\" && params.src) {\n                fill.src = params.src;\n              }\n\n              params.fill && (fill.on = true);\n\n              if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n                fill.on = false;\n              }\n\n              if (fill.on && params.fill) {\n                var isURL = Str(params.fill).match(R._ISURL);\n\n                if (isURL) {\n                  fill.parentNode == node && node.removeChild(fill);\n                  fill.rotate = true;\n                  fill.src = isURL[1];\n                  fill.type = \"tile\";\n                  var bbox = o.getBBox(1);\n                  fill.position = bbox.x + S + bbox.y;\n                  o._.fillpos = [bbox.x, bbox.y];\n\n                  R._preload(isURL[1], function () {\n                    o._.fillsize = [this.offsetWidth, this.offsetHeight];\n                  });\n                } else {\n                  fill.color = R.getRGB(params.fill).hex;\n                  fill.src = E;\n                  fill.type = \"solid\";\n\n                  if (R.getRGB(params.fill).error && (res.type in {\n                    circle: 1,\n                    ellipse: 1\n                  } || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n                    a.fill = \"none\";\n                    a.gradient = params.fill;\n                    fill.rotate = false;\n                  }\n                }\n              }\n\n              if (\"fill-opacity\" in params || \"opacity\" in params) {\n                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n                opacity = mmin(mmax(opacity, 0), 1);\n                fill.opacity = opacity;\n\n                if (fill.src) {\n                  fill.color = \"none\";\n                }\n              }\n\n              node.appendChild(fill);\n              var stroke = node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0],\n                  newstroke = false;\n              !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\n              if (params.stroke && params.stroke != \"none\" || params[\"stroke-width\"] || params[\"stroke-opacity\"] != null || params[\"stroke-dasharray\"] || params[\"stroke-miterlimit\"] || params[\"stroke-linejoin\"] || params[\"stroke-linecap\"]) {\n                stroke.on = true;\n              }\n\n              (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n              var strokeColor = R.getRGB(params.stroke);\n              stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n              opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n              var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n              opacity = mmin(mmax(opacity, 0), 1);\n              params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n              params[\"stroke-width\"] && (stroke.weight = width);\n              width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n              stroke.opacity = opacity;\n              params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n              stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n              params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\n              if (\"stroke-dasharray\" in params) {\n                var dasharray = {\n                  \"-\": \"shortdash\",\n                  \".\": \"shortdot\",\n                  \"-.\": \"shortdashdot\",\n                  \"-..\": \"shortdashdotdot\",\n                  \". \": \"dot\",\n                  \"- \": \"dash\",\n                  \"--\": \"longdash\",\n                  \"- .\": \"dashdot\",\n                  \"--.\": \"longdashdot\",\n                  \"--..\": \"longdashdotdot\"\n                };\n                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n              }\n\n              newstroke && node.appendChild(stroke);\n            }\n\n            if (res.type == \"text\") {\n              res.paper.canvas.style.display = E;\n              var span = res.paper.span,\n                  m = 100,\n                  fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n              s = span.style;\n              a.font && (s.font = a.font);\n              a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n              a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n              a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n              fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n              s.fontSize = fontSize * m + \"px\";\n              res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n              var brect = span.getBoundingClientRect();\n              res.W = a.w = (brect.right - brect.left) / m;\n              res.H = a.h = (brect.bottom - brect.top) / m; // res.paper.canvas.style.display = \"none\";\n\n              res.X = a.x;\n              res.Y = a.y + res.H / 2;\n              (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n              var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\n              for (var d = 0, dd = dirtyattrs.length; d < dd; d++) {\n                if (dirtyattrs[d] in params) {\n                  res._.dirty = 1;\n                  break;\n                }\n              } // text-anchor emulation\n\n\n              switch (a[\"text-anchor\"]) {\n                case \"start\":\n                  res.textpath.style[\"v-text-align\"] = \"left\";\n                  res.bbx = res.W / 2;\n                  break;\n\n                case \"end\":\n                  res.textpath.style[\"v-text-align\"] = \"right\";\n                  res.bbx = -res.W / 2;\n                  break;\n\n                default:\n                  res.textpath.style[\"v-text-align\"] = \"center\";\n                  res.bbx = 0;\n                  break;\n              }\n\n              res.textpath.style[\"v-text-kern\"] = true;\n            } // res.paper.canvas.style.display = E;\n\n          },\n              addGradientFill = function addGradientFill(o, gradient, fill) {\n            o.attrs = o.attrs || {};\n            var attrs = o.attrs,\n                pow = Math.pow,\n                opacity,\n                oindex,\n                type = \"linear\",\n                fxfy = \".5 .5\";\n            o.attrs.gradient = gradient;\n            gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n              type = \"radial\";\n\n              if (fx && fy) {\n                fx = toFloat(fx);\n                fy = toFloat(fy);\n                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n                fxfy = fx + S + fy;\n              }\n\n              return E;\n            });\n            gradient = gradient.split(/\\s*\\-\\s*/);\n\n            if (type == \"linear\") {\n              var angle = gradient.shift();\n              angle = -toFloat(angle);\n\n              if (isNaN(angle)) {\n                return null;\n              }\n            }\n\n            var dots = R._parseDots(gradient);\n\n            if (!dots) {\n              return null;\n            }\n\n            o = o.shape || o.node;\n\n            if (dots.length) {\n              o.removeChild(fill);\n              fill.on = true;\n              fill.method = \"none\";\n              fill.color = dots[0].color;\n              fill.color2 = dots[dots.length - 1].color;\n              var clrs = [];\n\n              for (var i = 0, ii = dots.length; i < ii; i++) {\n                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n              }\n\n              fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\n              if (type == \"radial\") {\n                fill.type = \"gradientTitle\";\n                fill.focus = \"100%\";\n                fill.focussize = \"0 0\";\n                fill.focusposition = fxfy;\n                fill.angle = 0;\n              } else {\n                // fill.rotate= true;\n                fill.type = \"gradient\";\n                fill.angle = (270 - angle) % 360;\n              }\n\n              o.appendChild(fill);\n            }\n\n            return 1;\n          },\n              Element = function Element(node, vml) {\n            this[0] = this.node = node;\n            node.raphael = true;\n            this.id = R._oid++;\n            node.raphaelid = this.id;\n            this.X = 0;\n            this.Y = 0;\n            this.attrs = {};\n            this.paper = vml;\n            this.matrix = R.matrix();\n            this._ = {\n              transform: [],\n              sx: 1,\n              sy: 1,\n              dx: 0,\n              dy: 0,\n              deg: 0,\n              dirty: 1,\n              dirtyT: 1\n            };\n            !vml.bottom && (vml.bottom = this);\n            this.prev = vml.top;\n            vml.top && (vml.top.next = this);\n            vml.top = this;\n            this.next = null;\n          };\n\n          var elproto = R.el;\n          Element.prototype = elproto;\n          elproto.constructor = Element;\n\n          elproto.transform = function (tstr) {\n            if (tstr == null) {\n              return this._.transform;\n            }\n\n            var vbs = this.paper._viewBoxShift,\n                vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n                oldt;\n\n            if (vbs) {\n              oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n            }\n\n            R._extractTransform(this, vbt + tstr);\n\n            var matrix = this.matrix.clone(),\n                skew = this.skew,\n                o = this.node,\n                split,\n                isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n                isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n            matrix.translate(1, 1);\n\n            if (isPatt || isGrad || this.type == \"image\") {\n              skew.matrix = \"1 0 0 1\";\n              skew.offset = \"0 0\";\n              split = matrix.split();\n\n              if (isGrad && split.noRotation || !split.isSimple) {\n                o.style.filter = matrix.toFilter();\n                var bb = this.getBBox(),\n                    bbt = this.getBBox(1),\n                    dx = bb.x - bbt.x,\n                    dy = bb.y - bbt.y;\n                o.coordorigin = dx * -zoom + S + dy * -zoom;\n                setCoords(this, 1, 1, dx, dy, 0);\n              } else {\n                o.style.filter = E;\n                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n              }\n            } else {\n              o.style.filter = E;\n              skew.matrix = Str(matrix);\n              skew.offset = matrix.offset();\n            }\n\n            if (oldt !== null) {\n              // empty string value is true as well\n              this._.transform = oldt;\n\n              R._extractTransform(this, oldt);\n            }\n\n            return this;\n          };\n\n          elproto.rotate = function (deg, cx, cy) {\n            if (this.removed) {\n              return this;\n            }\n\n            if (deg == null) {\n              return;\n            }\n\n            deg = Str(deg).split(separator);\n\n            if (deg.length - 1) {\n              cx = toFloat(deg[1]);\n              cy = toFloat(deg[2]);\n            }\n\n            deg = toFloat(deg[0]);\n            cy == null && (cx = cy);\n\n            if (cx == null || cy == null) {\n              var bbox = this.getBBox(1);\n              cx = bbox.x + bbox.width / 2;\n              cy = bbox.y + bbox.height / 2;\n            }\n\n            this._.dirtyT = 1;\n            this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n            return this;\n          };\n\n          elproto.translate = function (dx, dy) {\n            if (this.removed) {\n              return this;\n            }\n\n            dx = Str(dx).split(separator);\n\n            if (dx.length - 1) {\n              dy = toFloat(dx[1]);\n            }\n\n            dx = toFloat(dx[0]) || 0;\n            dy = +dy || 0;\n\n            if (this._.bbox) {\n              this._.bbox.x += dx;\n              this._.bbox.y += dy;\n            }\n\n            this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n            return this;\n          };\n\n          elproto.scale = function (sx, sy, cx, cy) {\n            if (this.removed) {\n              return this;\n            }\n\n            sx = Str(sx).split(separator);\n\n            if (sx.length - 1) {\n              sy = toFloat(sx[1]);\n              cx = toFloat(sx[2]);\n              cy = toFloat(sx[3]);\n              isNaN(cx) && (cx = null);\n              isNaN(cy) && (cy = null);\n            }\n\n            sx = toFloat(sx[0]);\n            sy == null && (sy = sx);\n            cy == null && (cx = cy);\n\n            if (cx == null || cy == null) {\n              var bbox = this.getBBox(1);\n            }\n\n            cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n            cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n            this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n            this._.dirtyT = 1;\n            return this;\n          };\n\n          elproto.hide = function () {\n            !this.removed && (this.node.style.display = \"none\");\n            return this;\n          };\n\n          elproto.show = function () {\n            !this.removed && (this.node.style.display = E);\n            return this;\n          }; // Needed to fix the vml setViewBox issues\n\n\n          elproto.auxGetBBox = R.el.getBBox;\n\n          elproto.getBBox = function () {\n            var b = this.auxGetBBox();\n\n            if (this.paper && this.paper._viewBoxShift) {\n              var c = {};\n              var z = 1 / this.paper._viewBoxShift.scale;\n              c.x = b.x - this.paper._viewBoxShift.dx;\n              c.x *= z;\n              c.y = b.y - this.paper._viewBoxShift.dy;\n              c.y *= z;\n              c.width = b.width * z;\n              c.height = b.height * z;\n              c.x2 = c.x + c.width;\n              c.y2 = c.y + c.height;\n              return c;\n            }\n\n            return b;\n          };\n\n          elproto._getBBox = function () {\n            if (this.removed) {\n              return {};\n            }\n\n            return {\n              x: this.X + (this.bbx || 0) - this.W / 2,\n              y: this.Y - this.H,\n              width: this.W,\n              height: this.H\n            };\n          };\n\n          elproto.remove = function () {\n            if (this.removed || !this.node.parentNode) {\n              return;\n            }\n\n            this.paper.__set__ && this.paper.__set__.exclude(this);\n            R.eve.unbind(\"raphael.*.*.\" + this.id);\n\n            R._tear(this, this.paper);\n\n            this.node.parentNode.removeChild(this.node);\n            this.shape && this.shape.parentNode.removeChild(this.shape);\n\n            for (var i in this) {\n              this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n            }\n\n            this.removed = true;\n          };\n\n          elproto.attr = function (name, value) {\n            if (this.removed) {\n              return this;\n            }\n\n            if (name == null) {\n              var res = {};\n\n              for (var a in this.attrs) {\n                if (this.attrs[has](a)) {\n                  res[a] = this.attrs[a];\n                }\n              }\n\n              res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n              res.transform = this._.transform;\n              return res;\n            }\n\n            if (value == null && R.is(name, \"string\")) {\n              if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n                return this.attrs.gradient;\n              }\n\n              var names = name.split(separator),\n                  out = {};\n\n              for (var i = 0, ii = names.length; i < ii; i++) {\n                name = names[i];\n\n                if (name in this.attrs) {\n                  out[name] = this.attrs[name];\n                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n                  out[name] = this.paper.customAttributes[name].def;\n                } else {\n                  out[name] = R._availableAttrs[name];\n                }\n              }\n\n              return ii - 1 ? out : out[names[0]];\n            }\n\n            if (this.attrs && value == null && R.is(name, \"array\")) {\n              out = {};\n\n              for (i = 0, ii = name.length; i < ii; i++) {\n                out[name[i]] = this.attr(name[i]);\n              }\n\n              return out;\n            }\n\n            var params;\n\n            if (value != null) {\n              params = {};\n              params[name] = value;\n            }\n\n            value == null && R.is(name, \"object\") && (params = name);\n\n            for (var key in params) {\n              eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n            }\n\n            if (params) {\n              for (key in this.paper.customAttributes) {\n                if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n                  var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n                  this.attrs[key] = params[key];\n\n                  for (var subkey in par) {\n                    if (par[has](subkey)) {\n                      params[subkey] = par[subkey];\n                    }\n                  }\n                }\n              } // this.paper.canvas.style.display = \"none\";\n\n\n              if (params.text && this.type == \"text\") {\n                this.textpath.string = params.text;\n              }\n\n              setFillAndStroke(this, params); // this.paper.canvas.style.display = E;\n            }\n\n            return this;\n          };\n\n          elproto.toFront = function () {\n            !this.removed && this.node.parentNode.appendChild(this.node);\n            this.paper && this.paper.top != this && R._tofront(this, this.paper);\n            return this;\n          };\n\n          elproto.toBack = function () {\n            if (this.removed) {\n              return this;\n            }\n\n            if (this.node.parentNode.firstChild != this.node) {\n              this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\n              R._toback(this, this.paper);\n            }\n\n            return this;\n          };\n\n          elproto.insertAfter = function (element) {\n            if (this.removed) {\n              return this;\n            }\n\n            if (element.constructor == R.st.constructor) {\n              element = element[element.length - 1];\n            }\n\n            if (element.node.nextSibling) {\n              element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n            } else {\n              element.node.parentNode.appendChild(this.node);\n            }\n\n            R._insertafter(this, element, this.paper);\n\n            return this;\n          };\n\n          elproto.insertBefore = function (element) {\n            if (this.removed) {\n              return this;\n            }\n\n            if (element.constructor == R.st.constructor) {\n              element = element[0];\n            }\n\n            element.node.parentNode.insertBefore(this.node, element.node);\n\n            R._insertbefore(this, element, this.paper);\n\n            return this;\n          };\n\n          elproto.blur = function (size) {\n            var s = this.node.runtimeStyle,\n                f = s.filter;\n            f = f.replace(blurregexp, E);\n\n            if (+size !== 0) {\n              this.attrs.blur = size;\n              s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n              s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n            } else {\n              s.filter = f;\n              s.margin = 0;\n              delete this.attrs.blur;\n            }\n\n            return this;\n          };\n\n          R._engine.path = function (pathString, vml) {\n            var el = createNode(\"shape\");\n            el.style.cssText = cssDot;\n            el.coordsize = zoom + S + zoom;\n            el.coordorigin = vml.coordorigin;\n            var p = new Element(el, vml),\n                attr = {\n              fill: \"none\",\n              stroke: \"#000\"\n            };\n            pathString && (attr.path = pathString);\n            p.type = \"path\";\n            p.path = [];\n            p.Path = E;\n            setFillAndStroke(p, attr);\n            vml.canvas && vml.canvas.appendChild(el);\n            var skew = createNode(\"skew\");\n            skew.on = true;\n            el.appendChild(skew);\n            p.skew = skew;\n            p.transform(E);\n            return p;\n          };\n\n          R._engine.rect = function (vml, x, y, w, h, r) {\n            var path = R._rectPath(x, y, w, h, r),\n                res = vml.path(path),\n                a = res.attrs;\n\n            res.X = a.x = x;\n            res.Y = a.y = y;\n            res.W = a.width = w;\n            res.H = a.height = h;\n            a.r = r;\n            a.path = path;\n            res.type = \"rect\";\n            return res;\n          };\n\n          R._engine.ellipse = function (vml, x, y, rx, ry) {\n            var res = vml.path(),\n                a = res.attrs;\n            res.X = x - rx;\n            res.Y = y - ry;\n            res.W = rx * 2;\n            res.H = ry * 2;\n            res.type = \"ellipse\";\n            setFillAndStroke(res, {\n              cx: x,\n              cy: y,\n              rx: rx,\n              ry: ry\n            });\n            return res;\n          };\n\n          R._engine.circle = function (vml, x, y, r) {\n            var res = vml.path(),\n                a = res.attrs;\n            res.X = x - r;\n            res.Y = y - r;\n            res.W = res.H = r * 2;\n            res.type = \"circle\";\n            setFillAndStroke(res, {\n              cx: x,\n              cy: y,\n              r: r\n            });\n            return res;\n          };\n\n          R._engine.image = function (vml, src, x, y, w, h) {\n            var path = R._rectPath(x, y, w, h),\n                res = vml.path(path).attr({\n              stroke: \"none\"\n            }),\n                a = res.attrs,\n                node = res.node,\n                fill = node.getElementsByTagName(fillString)[0];\n\n            a.src = src;\n            res.X = a.x = x;\n            res.Y = a.y = y;\n            res.W = a.width = w;\n            res.H = a.height = h;\n            a.path = path;\n            res.type = \"image\";\n            fill.parentNode == node && node.removeChild(fill);\n            fill.rotate = true;\n            fill.src = src;\n            fill.type = \"tile\";\n            res._.fillpos = [x, y];\n            res._.fillsize = [w, h];\n            node.appendChild(fill);\n            setCoords(res, 1, 1, 0, 0, 0);\n            return res;\n          };\n\n          R._engine.text = function (vml, x, y, text) {\n            var el = createNode(\"shape\"),\n                path = createNode(\"path\"),\n                o = createNode(\"textpath\");\n            x = x || 0;\n            y = y || 0;\n            text = text || \"\";\n            path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n            path.textpathok = true;\n            o.string = Str(text);\n            o.on = true;\n            el.style.cssText = cssDot;\n            el.coordsize = zoom + S + zoom;\n            el.coordorigin = \"0 0\";\n            var p = new Element(el, vml),\n                attr = {\n              fill: \"#000\",\n              stroke: \"none\",\n              font: R._availableAttrs.font,\n              text: text\n            };\n            p.shape = el;\n            p.path = path;\n            p.textpath = o;\n            p.type = \"text\";\n            p.attrs.text = Str(text);\n            p.attrs.x = x;\n            p.attrs.y = y;\n            p.attrs.w = 1;\n            p.attrs.h = 1;\n            setFillAndStroke(p, attr);\n            el.appendChild(o);\n            el.appendChild(path);\n            vml.canvas.appendChild(el);\n            var skew = createNode(\"skew\");\n            skew.on = true;\n            el.appendChild(skew);\n            p.skew = skew;\n            p.transform(E);\n            return p;\n          };\n\n          R._engine.setSize = function (width, height) {\n            var cs = this.canvas.style;\n            this.width = width;\n            this.height = height;\n            width == +width && (width += \"px\");\n            height == +height && (height += \"px\");\n            cs.width = width;\n            cs.height = height;\n            cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\n            if (this._viewBox) {\n              R._engine.setViewBox.apply(this, this._viewBox);\n            }\n\n            return this;\n          };\n\n          R._engine.setViewBox = function (x, y, w, h, fit) {\n            R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n            var paperSize = this.getSize(),\n                width = paperSize.width,\n                height = paperSize.height,\n                H,\n                W;\n\n            if (fit) {\n              H = height / h;\n              W = width / w;\n\n              if (w * H < width) {\n                x -= (width - w * H) / 2 / H;\n              }\n\n              if (h * W < height) {\n                y -= (height - h * W) / 2 / W;\n              }\n            }\n\n            this._viewBox = [x, y, w, h, !!fit];\n            this._viewBoxShift = {\n              dx: -x,\n              dy: -y,\n              scale: paperSize\n            };\n            this.forEach(function (el) {\n              el.transform(\"...\");\n            });\n            return this;\n          };\n\n          var createNode;\n\n          R._engine.initWin = function (win) {\n            var doc = win.document;\n\n            if (doc.styleSheets.length < 31) {\n              doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n            } else {\n              // no more room, add to the existing one\n              // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n              doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n            }\n\n            try {\n              !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\n              createNode = function createNode(tagName) {\n                return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n              };\n            } catch (e) {\n              createNode = function createNode(tagName) {\n                return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n              };\n            }\n          };\n\n          R._engine.initWin(R._g.win);\n\n          R._engine.create = function () {\n            var con = R._getContainer.apply(0, arguments),\n                container = con.container,\n                height = con.height,\n                s,\n                width = con.width,\n                x = con.x,\n                y = con.y;\n\n            if (!container) {\n              throw new Error(\"VML container not found.\");\n            }\n\n            var res = new R._Paper(),\n                c = res.canvas = R._g.doc.createElement(\"div\"),\n                cs = c.style;\n\n            x = x || 0;\n            y = y || 0;\n            width = width || 512;\n            height = height || 342;\n            res.width = width;\n            res.height = height;\n            width == +width && (width += \"px\");\n            height == +height && (height += \"px\");\n            res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n            res.coordorigin = \"0 0\";\n            res.span = R._g.doc.createElement(\"span\");\n            res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n            c.appendChild(res.span);\n            cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\n            if (container == 1) {\n              R._g.doc.body.appendChild(c);\n\n              cs.left = x + \"px\";\n              cs.top = y + \"px\";\n              cs.position = \"absolute\";\n            } else {\n              if (container.firstChild) {\n                container.insertBefore(c, container.firstChild);\n              } else {\n                container.appendChild(c);\n              }\n            }\n\n            res.renderfix = function () {};\n\n            return res;\n          };\n\n          R.prototype.clear = function () {\n            R.eve(\"raphael.clear\", this);\n            this.canvas.innerHTML = E;\n            this.span = R._g.doc.createElement(\"span\");\n            this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n            this.canvas.appendChild(this.span);\n            this.bottom = this.top = null;\n          };\n\n          R.prototype.remove = function () {\n            R.eve(\"raphael.remove\", this);\n            this.canvas.parentNode.removeChild(this.canvas);\n\n            for (var i in this) {\n              this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n            }\n\n            return true;\n          };\n\n          var setproto = R.st;\n\n          for (var method in elproto) {\n            if (elproto[has](method) && !setproto[has](method)) {\n              setproto[method] = function (methodname) {\n                return function () {\n                  var arg = arguments;\n                  return this.forEach(function (el) {\n                    el[methodname].apply(el, arg);\n                  });\n                };\n              }(method);\n            }\n          }\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/eve-raphael/eve.js\":\n      /*!*****************************************!*\\\n        !*** ./node_modules/eve-raphael/eve.js ***!\n        \\*****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEveRaphaelEveJs(module, exports, __webpack_require__) {\n        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n        // \n        // Licensed under the Apache License, Version 2.0 (the \"License\");\n        // you may not use this file except in compliance with the License.\n        // You may obtain a copy of the License at\n        // \n        // http://www.apache.org/licenses/LICENSE-2.0\n        // \n        // Unless required by applicable law or agreed to in writing, software\n        // distributed under the License is distributed on an \"AS IS\" BASIS,\n        // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        // See the License for the specific language governing permissions and\n        // limitations under the License.\n        // ┌────────────────────────────────────────────────────────────┐ \\\\\n        // │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n        // ├────────────────────────────────────────────────────────────┤ \\\\\n        // │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n        // └────────────────────────────────────────────────────────────┘ \\\\\n\n\n        (function (glob) {\n          var version = \"0.5.0\",\n              has = \"hasOwnProperty\",\n              separator = /[\\.\\/]/,\n              comaseparator = /\\s*,\\s*/,\n              wildcard = \"*\",\n              fun = function fun() {},\n              numsort = function numsort(a, b) {\n            return a - b;\n          },\n              current_event,\n              stop,\n              events = {\n            n: {}\n          },\n              firstDefined = function firstDefined() {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n              if (typeof this[i] != \"undefined\") {\n                return this[i];\n              }\n            }\n          },\n              lastDefined = function lastDefined() {\n            var i = this.length;\n\n            while (--i) {\n              if (typeof this[i] != \"undefined\") {\n                return this[i];\n              }\n            }\n          },\n              objtos = Object.prototype.toString,\n              Str = String,\n              isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n          };\n          /*\\\n           * eve\n           [ method ]\n            * Fires event with given `name`, given scope and other parameters.\n            > Arguments\n            - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n           - scope (object) context for the event handlers\n           - varargs (...) the rest of arguments will be sent to event handlers\n            = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n          \\*/\n\n\n          var eve = function eve(name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n\n            for (var i = 0, ii = listeners.length; i < ii; i++) {\n              if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n\n                if (listeners[i].zIndex < 0) {\n                  queue[listeners[i].zIndex] = listeners[i];\n                }\n              }\n            }\n\n            indexed.sort(numsort);\n\n            while (indexed[z] < 0) {\n              l = queue[indexed[z++]];\n              out.push(l.apply(scope, args));\n\n              if (stop) {\n                stop = oldstop;\n                return out;\n              }\n            }\n\n            for (i = 0; i < ii; i++) {\n              l = listeners[i];\n\n              if (\"zIndex\" in l) {\n                if (l.zIndex == indexed[z]) {\n                  out.push(l.apply(scope, args));\n\n                  if (stop) {\n                    break;\n                  }\n\n                  do {\n                    z++;\n                    l = queue[indexed[z]];\n                    l && out.push(l.apply(scope, args));\n\n                    if (stop) {\n                      break;\n                    }\n                  } while (l);\n                } else {\n                  queue[l.zIndex] = l;\n                }\n              } else {\n                out.push(l.apply(scope, args));\n\n                if (stop) {\n                  break;\n                }\n              }\n            }\n\n            stop = oldstop;\n            current_event = ce;\n            return out;\n          }; // Undocumented. Debug only.\n\n\n          eve._events = events;\n          /*\\\n           * eve.listeners\n           [ method ]\n            * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n            > Arguments\n            - name (string) name of the event, dot (`.`) or slash (`/`) separated\n            = (array) array of event handlers\n          \\*/\n\n          eve.listeners = function (name) {\n            var names = isArray(name) ? name : name.split(separator),\n                e = events,\n                item,\n                items,\n                k,\n                i,\n                ii,\n                j,\n                jj,\n                nes,\n                es = [e],\n                out = [];\n\n            for (i = 0, ii = names.length; i < ii; i++) {\n              nes = [];\n\n              for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n\n                while (k--) {\n                  item = items[k];\n\n                  if (item) {\n                    nes.push(item);\n                    out = out.concat(item.f || []);\n                  }\n                }\n              }\n\n              es = nes;\n            }\n\n            return out;\n          };\n          /*\\\n           * eve.separator\n           [ method ]\n            * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n           * here. Be aware that if you pass a string longer than one character it will be treated as\n           * a list of characters.\n            - separator (string) new separator. Empty string resets to default: `.` or `/`.\n          \\*/\n\n\n          eve.separator = function (sep) {\n            if (sep) {\n              sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n              sep = \"[\" + sep + \"]\";\n              separator = new RegExp(sep);\n            } else {\n              separator = /[\\.\\/]/;\n            }\n          };\n          /*\\\n           * eve.on\n           [ method ]\n           **\n           * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n           | eve.on(\"*.under.*\", f);\n           | eve(\"mouse.under.floor\"); // triggers f\n           * Use @eve to trigger the listener.\n           **\n           - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n           - f (function) event handler function\n           **\n           - name (array) if you don’t want to use separators, you can use array of strings\n           - f (function) event handler function\n           **\n           = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n           > Example:\n           | eve.on(\"mouse\", eatIt)(2);\n           | eve.on(\"mouse\", scream);\n           | eve.on(\"mouse\", catchIt)(1);\n           * This will ensure that `catchIt` function will be called before `eatIt`.\n           *\n           * If you want to put your handler before non-indexed handlers, specify a negative value.\n           * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n          \\*/\n\n\n          eve.on = function (name, f) {\n            if (typeof f != \"function\") {\n              return function () {};\n            }\n\n            var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\n            for (var i = 0, ii = names.length; i < ii; i++) {\n              (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                  e = e.n;\n                  e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {\n                    n: {}\n                  });\n                }\n\n                e.f = e.f || [];\n\n                for (i = 0, ii = e.f.length; i < ii; i++) {\n                  if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                  }\n                }\n\n                !exist && e.f.push(f);\n              })(names[i]);\n            }\n\n            return function (zIndex) {\n              if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n              }\n            };\n          };\n          /*\\\n           * eve.f\n           [ method ]\n           **\n           * Returns function that will fire given event with optional arguments.\n           * Arguments that will be passed to the result function will be also\n           * concated to the list of final arguments.\n           | el.onclick = eve.f(\"click\", 1, 2);\n           | eve.on(\"click\", function (a, b, c) {\n           |     console.log(a, b, c); // 1, 2, [event object]\n           | });\n           > Arguments\n           - event (string) event name\n           - varargs (…) and any other arguments\n           = (function) possible event handler function\n          \\*/\n\n\n          eve.f = function (event) {\n            var attrs = [].slice.call(arguments, 1);\n            return function () {\n              eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n            };\n          };\n          /*\\\n           * eve.stop\n           [ method ]\n           **\n           * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n          \\*/\n\n\n          eve.stop = function () {\n            stop = 1;\n          };\n          /*\\\n           * eve.nt\n           [ method ]\n           **\n           * Could be used inside event handler to figure out actual name of the event.\n           **\n           > Arguments\n           **\n           - subname (string) #optional subname of the event\n           **\n           = (string) name of the event, if `subname` is not specified\n           * or\n           = (boolean) `true`, if current event’s name contains `subname`\n          \\*/\n\n\n          eve.nt = function (subname) {\n            var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\n            if (subname) {\n              return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n            }\n\n            return cur;\n          };\n          /*\\\n           * eve.nts\n           [ method ]\n           **\n           * Could be used inside event handler to figure out actual name of the event.\n           **\n           **\n           = (array) names of the event\n          \\*/\n\n\n          eve.nts = function () {\n            return isArray(current_event) ? current_event : current_event.split(separator);\n          };\n          /*\\\n           * eve.off\n           [ method ]\n           **\n           * Removes given function from the list of event listeners assigned to given name.\n           * If no arguments specified all the events will be cleared.\n           **\n           > Arguments\n           **\n           - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n           - f (function) event handler function\n          \\*/\n\n          /*\\\n           * eve.unbind\n           [ method ]\n           **\n           * See @eve.off\n          \\*/\n\n\n          eve.off = eve.unbind = function (name, f) {\n            if (!name) {\n              eve._events = events = {\n                n: {}\n              };\n              return;\n            }\n\n            var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\n            if (names.length > 1) {\n              for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n              }\n\n              return;\n            }\n\n            names = isArray(name) ? name : Str(name).split(separator);\n            var e,\n                key,\n                splice,\n                i,\n                ii,\n                j,\n                jj,\n                cur = [events];\n\n            for (i = 0, ii = names.length; i < ii; i++) {\n              for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n\n                if (names[i] != wildcard) {\n                  if (e[names[i]]) {\n                    splice.push(e[names[i]]);\n                  }\n                } else {\n                  for (key in e) {\n                    if (e[has](key)) {\n                      splice.push(e[key]);\n                    }\n                  }\n                }\n\n                cur.splice.apply(cur, splice);\n              }\n            }\n\n            for (i = 0, ii = cur.length; i < ii; i++) {\n              e = cur[i];\n\n              while (e.n) {\n                if (f) {\n                  if (e.f) {\n                    for (j = 0, jj = e.f.length; j < jj; j++) {\n                      if (e.f[j] == f) {\n                        e.f.splice(j, 1);\n                        break;\n                      }\n                    }\n\n                    !e.f.length && delete e.f;\n                  }\n\n                  for (key in e.n) {\n                    if (e.n[has](key) && e.n[key].f) {\n                      var funcs = e.n[key].f;\n\n                      for (j = 0, jj = funcs.length; j < jj; j++) {\n                        if (funcs[j] == f) {\n                          funcs.splice(j, 1);\n                          break;\n                        }\n                      }\n\n                      !funcs.length && delete e.n[key].f;\n                    }\n                  }\n                } else {\n                  delete e.f;\n\n                  for (key in e.n) {\n                    if (e.n[has](key) && e.n[key].f) {\n                      delete e.n[key].f;\n                    }\n                  }\n                }\n\n                e = e.n;\n              }\n            }\n          };\n          /*\\\n           * eve.once\n           [ method ]\n           **\n           * Binds given event handler with a given name to only run once then unbind itself.\n           | eve.once(\"login\", f);\n           | eve(\"login\"); // triggers f\n           | eve(\"login\"); // no listeners\n           * Use @eve to trigger the listener.\n           **\n           > Arguments\n           **\n           - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n           - f (function) event handler function\n           **\n           = (function) same return function as @eve.on\n          \\*/\n\n\n          eve.once = function (name, f) {\n            var f2 = function f2() {\n              eve.off(name, f2);\n              return f.apply(this, arguments);\n            };\n\n            return eve.on(name, f2);\n          };\n          /*\\\n           * eve.version\n           [ property (string) ]\n           **\n           * Current version of the library.\n          \\*/\n\n\n          eve.version = version;\n\n          eve.toString = function () {\n            return \"You are running Eve \" + version;\n          };\n\n           true && module.exports ? module.exports = eve :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return eve;\n          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n        })(this);\n        /***/\n\n      }\n      /******/\n\n    })\n  );\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/vendor/libs/raphael/raphael.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/vendor/libs/raphael/raphael.js");
/******/ 	
/******/ })()
;